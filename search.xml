<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB 数据更新操作</title>
      <link href="/mongodb-update/"/>
      <url>/mongodb-update/</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB-更新文档"><a href="#MongoDB-更新文档" class="headerlink" title="MongoDB 更新文档"></a>MongoDB 更新文档</h4><p>MongoDB 使用 <code>update()</code> 和 <code>save()</code> 方法来更新集合中的文档。</p><h5 id="update-方法"><a href="#update-方法" class="headerlink" title="update() 方法"></a><code>update()</code> 方法</h5><p><code>update()</code> 方法用于更新已存在的文档。语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">    &lt;query&gt;,</span><br><span class="line">    &lt;update&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">      upsert: &lt;boolean&gt;,</span><br><span class="line">      multi: &lt;boolean&gt;,</span><br><span class="line">      writeConcern: &lt;document&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h5><ul><li><strong><code>query</code></strong> : update 的查询条件，类似 sql update 查询内 where 后面的。</li><li><strong><code>update</code></strong> : update 的对象和一些更新的操作符（如$,$inc…）等，也可以理解为 sql update 查询内 <code>set</code> 后面的</li><li><strong><code>upsert</code></strong> : 可选，这个参数的意思是，如果不存在 update 的记录，是否插入 <code>objNew</code>,<code>true</code> 为插入，默认是 <code>false</code>，不插入。</li><li><strong><code>multi</code></strong> : 可选，mongodb 默认是 <code>false</code>,只更新找到的第一条记录，如果这个参数为 <code>true</code>,就把按条件查出来多条记录全部更新。</li><li><strong><code>writeConcern</code></strong> :可选，抛出异常的级别。</li></ul><p><a href="https://docs.mongodb.com/manual/reference/update-methods/">官方连接连接地址</a></p><span id="more"></span><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>向数据库插入点数据（集合名称为 test)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  _id: 100,</span><br><span class="line">  sku: &quot;abc123&quot;,</span><br><span class="line">  quantity: 200,</span><br><span class="line">  instock: true,</span><br><span class="line">  reorder: false,</span><br><span class="line">  details: &#123; model: &quot;1Q2&quot;, make: &quot;xyz&quot; &#125;,</span><br><span class="line">  tags: [ &quot;apparel&quot;, &quot;clothing&quot; ],</span><br><span class="line">  ratings: [ &#123; by: &quot;ijk&quot;, rating: 1 &#125; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="各种更新操作符"><a href="#各种更新操作符" class="headerlink" title="各种更新操作符"></a>各种更新操作符</h4><h5 id="set"><a href="#set" class="headerlink" title="$set"></a><code>$set</code></h5><p>用来指定一个键的值。如果这个键不存在，则创建它。<br>示例：更新 quantity 字段、更新 details 的内容以及更新 tags 的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $set:</span><br><span class="line">      &#123;</span><br><span class="line">        quantity: 500,</span><br><span class="line">        details: &#123; model: &quot;1Q2&quot;, make: &quot;xyz&quot; &#125;,</span><br><span class="line">        tags: [ &quot;coats&quot;, &quot;outerwear&quot;, &quot;clothing&quot; ]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="set-与-操作"><a href="#set-与-操作" class="headerlink" title="$set 与 . 操作"></a><code>$set</code> 与 <code>.</code> 操作</h5><p>示例：使用 “.” 符号更新数据内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $set: &#123; &quot;details.make&quot;: &quot;zzz&quot; &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>同样可以使用 <code>.</code> 符号操作数组内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $set:</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;tags.1&quot;: &quot;rain gear&quot;,</span><br><span class="line">        &quot;ratings.0.rating&quot;: 2</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建不存在的 key 值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.tset.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $set:</span><br><span class="line">      &#123; &quot;name&quot;: &quot;not the name&quot; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="unset"><a href="#unset" class="headerlink" title="$unset"></a><code>$unset</code></h5><p>从文档中移除指定的键。<br>若要完全删除键 “name” ,使用 <code>$unset</code> 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $unset:</span><br><span class="line">      &#123; &quot;name&quot;: 1 &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="inc"><a href="#inc" class="headerlink" title="$inc"></a><code>$inc</code></h5><ul><li><p><code>$inc</code> 修改器用来增加已有键的值，或者在键不存在时创建一个键。<code>inc</code> 就是专门来增加（和减少）数字的。</p></li><li><p><code>$inc</code> 只能用于整数、长整数或双精度浮点数。要是用在其他类型的数据上就会导致操作失败。</p></li><li><p><code>$inc</code> 可以接收正数或者负数的值。</p></li></ul><p>示例：将 “quantity” 值减少 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $inc :</span><br><span class="line">      &#123; &quot;quantity&quot;: -1 &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="rename"><a href="#rename" class="headerlink" title="$rename"></a><code>$rename</code></h5><p>操作符可以重命名字段名称，新的字段名称不能和文档中现有的字段名相同。</p><p>语法</p><p><code>&#123; $rename: &#123; &lt;old name1&gt;: &lt;new name1&gt;, &lt;old name2&gt;: &lt;new name2&gt;, ... &#125; &#125;</code></p><p>示例：修改 “sku” 为 “skuName”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">   &#123; _id: 100 &#125;,</span><br><span class="line">   &#123; $rename :</span><br><span class="line">      &#123; &quot;sku&quot;: &quot;skuName&quot; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="$pop"></a><code>$pop</code></h5><p>只能用于对 数组（array）进行操作。用于移除数组第一个元素，或者用于移除数组的最后一个元素。<br>语法 -1 表示移除数组第一个元素， 1 表示移除数组最后一个元素</p><p><code>&#123; $pop: &#123; &lt;field&gt;: &lt;-1 | 1&gt;, ... &#125; &#125;</code></p><p>集合数据 <code>&#123; _id: 1, scores: [ 8, 9, 10 ] &#125;</code></p><ul><li><p>移除第一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.test.update( &#123; _id: 1 &#125;, &#123; $pop: &#123; scores: -1 &#125; &#125; )</span><br><span class="line"> </span><br><span class="line">// 查询返回</span><br><span class="line">&#123; _id: 1, scores: [ 9, 10 ] &#125;</span><br></pre></td></tr></table></figure></li><li><p>移除最后一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.test.update( &#123; _id: 1 &#125;, &#123; $pop: &#123; scores: 1 &#125; &#125; ) </span><br><span class="line">// 查询返回 </span><br><span class="line">&#123; _id: 1, scores: [ 9 ] &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h5><p>如果指定的键已经存在，会向已有的数组末尾加入一个元素，要是没有就会创建一个新的数组。<br>集合数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : 1000,</span><br><span class="line">    &quot;details&quot; : &#123;</span><br><span class="line">        &quot;model&quot; : &quot;14Q3&quot;,</span><br><span class="line">        &quot;make&quot; : &quot;zzz&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tags&quot; : [ </span><br><span class="line">        &quot;coats&quot;, </span><br><span class="line">        &quot;outerwear&quot;, </span><br><span class="line">        &quot;clothing&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;sku&quot; : &quot;abc123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>向 tags 中增加一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.test.update( &#123; _id: 1000&#125;, &#123; $push: &#123;tags: &quot;push&quot;&#125; &#125; ); </span><br><span class="line">// 返回结果 </span><br><span class="line">&#123;...&quot;tags&quot; : [ &quot;coats&quot;, &quot;outerwear&quot;, &quot;clothing&quot;, &quot;push&quot;], ...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加一个不存在的 key “name”</p></li></ul><p><code>db.getCollection(&#39;test&#39;).update( &#123;_id : 100&#125;, &#123;$push: &#123; name : &quot;sku&quot; &#125; &#125; );</code></p><p><strong>注意：<code>push</code> 只能对数组进行操作。</strong></p><h5 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a><code>$addToSet</code></h5><p>向集合数据中添加数组内容，如果数据存在就做追加操作，如果数据不存在就做新增 key 与内容操作。</p><p>语法 </p><p><code>&#123;&quot;$addToSet&quot; : &#123;成员： 内容&#125; &#125;</code></p><ul><li>向数据中的 name 字段追加内容（紧接着前面”$push”操作的数据来）</li></ul><p><code>db.getCollection(&#39;test&#39;).update( &#123;_id : 100&#125;, &#123; $addToSet : &#123; name : &quot;Name&quot; &#125; &#125; );</code></p><ul><li>追加一个不存在的 key item （此时的操作和 <code>$push</code> 类似）</li></ul><p><code>db.getCollection(&#39;test&#39;).update( &#123;_id : 100&#125;, &#123; $addToSet : &#123; item : &quot;Name&quot; &#125; &#125; );</code></p><h5 id="pull"><a href="#pull" class="headerlink" title="$pull"></a><code>$pull</code></h5><p>语法</p><p><code>&#123; $pull: &#123; &lt;field1&gt;: &lt;value|condition&gt;, &lt;field2&gt;: &lt;value|condition&gt;, ... &#125; &#125;</code></p><p> pull操作符移除指定字段值为数组，且匹配pull操作符移除指定字段值为数组，且匹配pull语句声明的查询条件的所有元素。</p><ul><li><p>移除 tags 中的 “push” 与 “coats” 值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.test.update(</span><br><span class="line">    &#123; _id : 100 &#125;,</span><br><span class="line">    &#123; $pull: &#123; tags: &#123; $in: [ &quot;push&quot;, &quot;coats&quot; ] &#125; &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>移除 name 中的 “Name”</p></li></ul><p><code>db.test.update( &#123; _id : 100 &#125;, &#123; $pull: &#123; name : &quot;Name&quot; &#125; &#125; )</code></p><h5 id="findAndModify"><a href="#findAndModify" class="headerlink" title="findAndModify()"></a>findAndModify()</h5><p>语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">db.test.findAndModify(&#123;</span><br><span class="line">    query: &lt;document&gt;,</span><br><span class="line">    sort: &lt;document&gt;,</span><br><span class="line">    remove: &lt;boolean&gt;,</span><br><span class="line">    update: &lt;document&gt;,</span><br><span class="line">    new: &lt;boolean&gt;,</span><br><span class="line">    fields: &lt;document&gt;,</span><br><span class="line">    upsert: &lt;boolean&gt;,</span><br><span class="line">    bypassDocumentValidation: &lt;boolean&gt;,</span><br><span class="line">    writeConcern: &lt;document&gt;,</span><br><span class="line">    collation: &lt;document&gt;,</span><br><span class="line">    arrayFilters: [ &lt;filterdocument1&gt;, ... ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果我们想对 某个数据进行全部修改，就可以使用 <code>findAndModify()</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.test.findAndModify(&#123;</span><br><span class="line">   query: &#123; _id: 100&#125;,</span><br><span class="line">   update: &#123;</span><br><span class="line">    &quot;details&quot; : &#123;</span><br><span class="line">        &quot;model&quot; : &quot;12Q3&quot;,</span><br><span class="line">        &quot;make&quot; : &quot;zzz&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tags&quot; : [ </span><br><span class="line">        &quot;coats&quot;, </span><br><span class="line">        &quot;outerwear&quot;, </span><br><span class="line">        &quot;clothing&quot;, </span><br><span class="line">        &quot;push&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;sku&quot; : &quot;abc123&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://docs.mongodb.com/manual/reference/operator/update/">官网链接</a></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 远程连接由 https 换成 ssh</title>
      <link href="/git-https2ssh/"/>
      <url>/git-https2ssh/</url>
      
        <content type="html"><![CDATA[<p>在github.com上 建立了一个小项目，push 的时候，提示 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/xxx.git/&#x27;: error setting certificate verify locations: </span><br><span class="line">CAfile: D:/Git/mingw64/ssl/certs/ca-bundle.crtle </span><br><span class="line">CApath: none</span><br></pre></td></tr></table></figure><p>而且用 https 在 push 都要输入用户名和密码，很是麻烦</p><p>还是 ssh 方便 下面把它换成 ssh 方式的</p><p><code>git remote -v </code></p><p>可以看到形如一下的返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">origin https://github.com/xxx.git (fetch)</span><br><span class="line"></span><br><span class="line">origin https://github.com/xxx.git (push)</span><br></pre></td></tr></table></figure><ul><li>移除本地分支<br><code>git remote rm origin</code></li><li>添加远程分支<br><code>git remote add origin &#39;git@github.com:xxx/***.git&#39;</code></li><li>最后就阔以愉快的用 ssh 方式了（前提是配置了 ssh key）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 数据库的主从同步</title>
      <link href="/mysql-master-slave/"/>
      <url>/mysql-master-slave/</url>
      
        <content type="html"><![CDATA[<p>大型网站为了软解大量的并发访问，除了在网站实现分布式负载均衡，远远不够.<br>到了数据业务层、数据访问层，如果还是传统的数据结构，<br>或者只是单单靠一台服务器来处理如此多的数据库连接操作，数据库必然会崩溃，特别是数据丢失的话，后果更是不堪设想.<br>利用主从数据库来实现读写分离，从而分担主数据库的压力.<br>在多个服务器上部署 mysql，将其中一台认为主数据库，而其他为从数据库，实现主从同步.<br>其中主数据库负责主动写的操作，而从数据库则只负责主动读的操作（slave 从数据库仍然会被动的进行写操作，为了保持数据一致性），<br>这样就可以很大程度上的避免数据丢失的问题，同时也可减少数据库的连接，减轻主数据库的负载.</p><p>主从同步复制有以下几种方式：</p><ul><li>同步复制：master 的变化，必须等待 slave-1,slave-2,…,slave-n 完成后才能返回。</li><li>异步复制：master 只需要完成自己的数据库操作即可，至于 slaves 是否收到二进制日志，是否完成操作，不用关心。MYSQL 的默认设置。</li><li>半同步复制：master 只保证 slaves 中的一个操作成功，就返回，其他 slave 不管。这个功能，是由 google 为 MYSQL 引入的。</li></ul><p>mysql 主从复制的思路：</p><ul><li><p>配置主服务器，即 msater，使之具备一下能力(主要接受用户的写操作，并且负责将二进制日志同步给从服务器)</p><ul><li>记录二进制日志</li><li>为从服务提供一个用户(设置密码)，提高二进制日志同步得安全性</li></ul></li><li><p>配置从服务器，即 slave，使之具备一下能力(主要负责用户的读操作(分担主服务器的读写压力)，并且负责重放 master的 写操作，还能实现容灾能力，保证高可用)</p><ul><li>记录中继日志</li><li>连接到 mysql 可以启动 slave 功能，并且设置 master 信息，通过配置信息，开启 IO_THREAD 和 SQL_THREAD 线程</li></ul></li></ul><span id="more"></span><p>下面是在centos 7系统上，实现的 mysql5.7 数据库的主从同步配置，从而实现读写分离操作。</p><p>这里测试的两台服务器的IP地址分别为主服务器（192.168.2.19）和从服务器（192.168.2.169）<br>分别在这两个服务器上创建test数据库，以备后面测试。</p><h5 id="master-主服务器的配置"><a href="#master-主服务器的配置" class="headerlink" title="master 主服务器的配置"></a>master 主服务器的配置</h5><ul><li><p>配置文件my.cnf的修改<br><code>vim /etc/my.cnf</code><br>在 <code>[mysqld]</code> 中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#备注：</span><br><span class="line">#server-id 服务器唯一标识。</span><br><span class="line">#log_bin 启动MySQL二进制日志，即数据同步语句，从数据库会一条一条的执行这些语句。</span><br><span class="line">#binlog_do_db 指定记录二进制日志的数据库，即需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可。</span><br><span class="line">#binlog_ignore_db 指定不记录二进制日志的数据库，即不需要复制的数据库名，如果有多个数据库，重复设置这个选项即可。</span><br><span class="line">#其中需要注意的是，binlog_do_db和binlog_ignore_db为互斥选项，一般只需要一个即可。</span><br><span class="line"></span><br><span class="line">server-id=1</span><br><span class="line">log_bin=master-bin</span><br><span class="line">log_bin_index=master-bin.index</span><br><span class="line">binlog_do_db=test</span><br></pre></td></tr></table></figure></li><li><p>创建从服务器的用户和权限<br>进入主 mysql 数据库 <code>mysql -uroot -p</code><br>创建从数据库的 <code>masterbackup</code> 用户和权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#备注</span><br><span class="line">#192.168.2.%通配符，表示0-255的IP都可访问主服务器，正式环境请配置指定从服务器IP</span><br><span class="line">#若将 192.168.2.% 改为 %，则任何ip均可作为其从数据库来访问主服务器</span><br><span class="line">grant replication slave on *.* to masterbackup@&#x27;192.168.2.%&#x27; identified by &#x27;12345678&#x27;;</span><br><span class="line"># 刷新权限信息</span><br><span class="line">flush privileges; </span><br></pre></td></tr></table></figure><p>重启mysql服务 <code>service mysqld restart</code></p></li><li><p>查看主服务器状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| master-bin.000001 |      154 | test         |                  |                   |</span><br><span class="line">+-------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure></li></ul><h5 id="slave-从服务器的配置"><a href="#slave-从服务器的配置" class="headerlink" title="slave 从服务器的配置"></a>slave 从服务器的配置</h5><ul><li><p>配置文件my.cnf的修改<br><code>vim /etc/my.cnf</code><br>在 <code>[mysqld]</code> 中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#备注：</span><br><span class="line">#server-id 服务器唯一标识，如果有多个从服务器，每个服务器的server-id不能重复，跟IP一样是唯一标识，如果你没设置server-id或者设置为0，则从服务器不会连接到主服务器。</span><br><span class="line">#relay-log 启动MySQL二进制日志，可以用来做数据备份和崩溃恢复，或主服务器挂掉了，将此从服务器作为其他从服务器的主服务器。</span><br><span class="line">#replicate-do-db 指定同步的数据库，如果复制多个数据库，重复设置这个选项即可。若在master端不指定binlog-do-db，则在slave端可用replication-do-db来过滤。</span><br><span class="line">#replicate-ignore-db 不需要同步的数据库，如果有多个数据库，重复设置这个选项即可。</span><br><span class="line">#其中需要注意的是，replicate-do-db和replicate-ignore-db为互斥选项，一般只需要一个即可。</span><br><span class="line"></span><br><span class="line">server-id=2</span><br><span class="line">relay-log=slave-relay-bin</span><br><span class="line">relay-log-index=slave-relay-bin.index</span><br><span class="line">#replicate-do-db=test</span><br></pre></td></tr></table></figure><p>退出保存重启</p></li><li><p>连接 master 主服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#备注：</span><br><span class="line">#master_host对应主服务器的IP地址。</span><br><span class="line">#master_port对应主服务器的端口。</span><br><span class="line">#master_log_file对应 show master status 显示的File列：master-bin.000001。</span><br><span class="line">#master_log_pos对应 show master status 显示的Position列：154。</span><br><span class="line"></span><br><span class="line">mysql&gt; change master to master_host=&#x27;192.168.2.19&#x27;,master_port=3306,master_user=&#x27;masterbackup&#x27;,master_password=&#x27;12345678&#x27;,master_log_file=&#x27;master-bin.000001&#x27;,master_log_pos=154;</span><br></pre></td></tr></table></figure></li><li><p>启动 slave 数据同步<br><code>mysql&gt; start slave;</code></p></li><li><p>停止 slave 数据同步（若有需要）<br><code>mysql&gt; stop slave;</code></p></li><li><p>查看 slave 信息<br><code>mysql&gt; show slave status\G;</code><br><code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code> 都为 <code>yes</code>，则表示同步成功。</p></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>在主服务器上登陆 mysql，且进入 test 数据库，创建 test 表，且插入一条数据<br>用数据库管理工具（nacicat 等）操作方便<br>在从服务器上登陆 mysql，且进入 test 数据库，查看 test 表 是有数据，证明同步数据成功。</p><h5 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h5><p>若在主从同步的过程中，出现其中一条语句同步失败报错了，则后面的语句也肯定不能同步成功了。<br>例如，主库有一条数据，而从库并没有这一条数据，然而，在主库执行了删除这一条数据的操作，那么从库没有这么一条数据就肯定删除不了，从而报错了。<br>在此时的从数据库的数据同步就失败了，因此后面的同步语句就无法继续执行。<br>这里提供的解决方法有两种</p><ul><li><p>在从数据库中，使用 <code>SET</code> 全局 <code>sql_slave_skip_counter</code> 来跳过事件，跳过这一个错误，然后执行从下一个事件组开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在从数据库上操作</span><br><span class="line">mysql &gt; stop slave;</span><br><span class="line">mysql &gt; set global sql_slave_skip_counter=1;</span><br><span class="line">mysql &gt; start slave;</span><br></pre></td></tr></table></figure></li><li><p>在从数据库中，重新连上主数据库。这种操作会直接跳过中间的那些同步语句，可能会导致一些数据未同步过去的问题，但这种操作也是最后的绝招。最好就是令从数据库与主数据库的数据结构和数据都一致了之后，再来恢复主从同步的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在从数据库上操作</span><br><span class="line"># master_log_file 和 master_log_pos 可能会不同，需要在主数据库中 show master status 来查看</span><br><span class="line"></span><br><span class="line">mysql &gt; stop slave;</span><br><span class="line">mysql &gt; change master to master_host=&#x27;192.168.2.19&#x27;,master_port=3306,master_user=&#x27;masterbackup&#x27;,master_password=&#x27;12345678&#x27;,master_log_file=&#x27;master-bin.000001&#x27;,master_log_pos=2050;</span><br><span class="line">mysql &gt; start slave;</span><br></pre></td></tr></table></figure></li></ul><p>mysql 数据库的主从同步就完成了，至于读写分离，我们可以通过程序来实现，简单的实现思想。<br>我们可以在主服务器创建一个数据库用户（出于安全，根据需求给予相应的权限）主要用于写操作，在程序中通过这一用户连接主数据库的只用于写操作而不用读操作。<br>在从服务器上创建一个数据库用户（出于安全，只给予读 <code>select</code> 的权限）主要用于读操作，在程序中通过这一用户连接从数据库即可。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> slave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装 mysql5.7</title>
      <link href="/centos7-install-mysql57/"/>
      <url>/centos7-install-mysql57/</url>
      
        <content type="html"><![CDATA[<h5 id="安装-mysql-server"><a href="#安装-mysql-server" class="headerlink" title="安装 mysql-server"></a>安装 mysql-server</h5><ul><li>下载并安装 mysql yum 源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure></li></ul><p>运行查看可安装的mysql的命令：<code>yum repolist all| grep mysql</code><br>可以修改 yum 配置（<code>enabled=1</code> 想要安装哪个版本就在哪个版本的后面把 0 换成 1，因为默认是最新版，所以需要把最新版的 1 换成 0，5.7 的换为 1）<br>路径 <code>/etc/yum.repos.d/mysql-community.repo</code><br>这里下载的是 5.7 版本的源就不要修改了</p><ul><li>安装 mysql-server<br><code>yum -y install mysql-community-server</code></li></ul><span id="more"></span><h5 id="mysql-初始化安装的一些配置"><a href="#mysql-初始化安装的一些配置" class="headerlink" title="mysql 初始化安装的一些配置"></a>mysql 初始化安装的一些配置</h5><ul><li><p>启动 mysql-serer<br><code>systemctl start mysqld</code></p></li><li><p>开机自启<br><code>systemctl enable mysqld</code></p></li><li><p>查看是否启动成功，即是否存在 3306 端口<br><code>netstat -tnlp | grep 3306</code></p></li><li><p>查询 root 密码<br><code>grep &quot;password&quot; /var/log/mysqld.log</code></p></li><li><p>登录到 mysql<br><code>mysql -uroot -p</code></p></li><li><p>首次操作要求重置密码,必须大小写特殊字符组成<br><code>mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;;</code></p></li><li><p>配置使用弱密码 (不想设置复杂的密码)<br>mysql 升级到 5.7 版本后，对密码进行了加强，默认密码策略要求密码必须是大小写字母数字特殊字母的组合，至少8位<br><code>mysql.user</code> 中的 <code>password</code> 字段修改为了 <code>authentication_string</code></p><p>增加了密码验证插件 查看当前密码规则 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;validate_password%&#x27;;  </span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password_check_user_name    | OFF    |</span><br><span class="line">| validate_password_dictionary_file    |        |</span><br><span class="line">| validate_password_length             | 8      | 密码最小长度</span><br><span class="line">| validate_password_mixed_case_count   | 1      | 密码大写小写混合个数</span><br><span class="line">| validate_password_number_count       | 1      | 密码数字个数</span><br><span class="line">| validate_password_policy             | MEDIUM | 密码检查等级</span><br><span class="line">| validate_password_special_char_count | 1      | 密码特殊字符个数</span><br><span class="line">+--------------------------------------+--------+</span><br></pre></td></tr></table></figure><p>解决办法有两种<br>一种是改验证规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy=0;</span><br><span class="line">mysql&gt; set global validate_password_mixed_case_count=0;</span><br><span class="line">mysql&gt; set global validate_password_number_count=3;</span><br><span class="line">mysql&gt; set global validate_password_special_char_count=0;</span><br></pre></td></tr></table></figure><p>二是直接卸载这个密码验证插件<br><code>mysql&gt; uninstall plugin validate_password;</code></p></li><li><p>授权远程访问 % 表示所有主机都可以访问<br><code>mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;自己的密码&#39; with grant option;</code></p></li><li><p>刷新权限信息<br><code>mysql&gt; flush privileges;</code></p></li></ul><blockquote><p>最后要注意防火墙开放3306端口 不然链接不上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Explain 执行计划</title>
      <link href="/mysql-explain/"/>
      <url>/mysql-explain/</url>
      
        <content type="html"><![CDATA[<h4 id="Explain有什么用"><a href="#Explain有什么用" class="headerlink" title="Explain有什么用"></a><strong>Explain有什么用</strong></h4><p>当<code>Explain</code>与<code>SQL</code>语句一起使用时，<code>MySQL</code>会显示来自优化器关于<code>SQL</code>执行的信息。<br>也就是说，<code>MySQL</code>解释了它将如何处理该语句，包括如何连接表以及什么顺序连接表等。</p><ul><li>表的加载顺序</li><li><code>sql</code>的查询类型</li><li>可能用到哪些索引，哪些索引又被实际使用</li><li>表与表之间的引用关系</li><li>一个表中有多少行被优化器查询</li></ul><span id="more"></span><h4 id="Explain有哪些信息"><a href="#Explain有哪些信息" class="headerlink" title="Explain有哪些信息"></a><strong>Explain有哪些信息</strong></h4><p>Explain执行计划包含字段信息如下：<br>分别是 <code>id</code>、<code>select_type</code>、<code>table</code>、<code>partitions</code>、<code>type</code>、<code>possible_keys</code>、<code>key</code>、<code>key_len</code>、<code>ref</code>、<code>rows</code>、<code>filtered</code>、<code>Extra</code>12个字段。</p><p>下边会结合具体的<code>SQL</code>示例，详细的解读每个字段以及每个字段中不同参数的含义，以下所有示例数据库版本为 <code>MySQL.5.7.18</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.7.18    |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><p>创建三张表 <code>one</code>、<code>two</code>、<code>three</code>，<br>表之间的关系 <code>one.two_id = two.two_id AND two.three_id = three.three_id</code></p><h4 id="Explain执行计划详解"><a href="#Explain执行计划详解" class="headerlink" title="Explain执行计划详解"></a><strong>Explain执行计划详解</strong></h4><h5 id="id"><a href="#id" class="headerlink" title="id"></a>id</h5><p>id: 表示查询中执行select子句或者操作表的顺序，**<code>id</code>的值越大，代表优先级越高，越先执行**。id大致会出现 3种情况：</p><ul><li><p>id相同<br>看到三条记录的<code>id</code>都相同，可以理解成这三个表为一组，具有同样的优先级，执行顺序由上而下，具体顺序由优化器决定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM one o,two t, three r WHERE o.two_id = t.two_id AND t.three_id = r.three_id;</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                  | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL                 |    2 |      100 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | t     | NULL       | ALL    | PRIMARY       | NULL    | NULL    | NULL                 |    2 |       50 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">|  1 | SIMPLE      | r     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | xin-slave.t.three_id |    1 |      100 | NULL                                               |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+----------------------+------+----------+----------------------------------------------------+</span><br></pre></td></tr></table></figure></li><li><p>id不同<br>如果我们的<code>SQL</code>中存在子查询，那么<code>id</code>的序号会递增，id值越大优先级越高，越先被执行 。<br>当三个表依次嵌套，发现最里层的子查询<code>id</code>最大，最先执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN select * from one o where o.two_id = (select t.two_id from two t where t.three_id = (select r.three_id  from three r where r.three_name=&#x27;我是第三表2&#x27;));</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | PRIMARY     | o     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |       50 | Using where |</span><br><span class="line">|  2 | SUBQUERY    | t     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |       50 | Using where |</span><br><span class="line">|  3 | SUBQUERY    | r     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |       50 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>以上两种同时存在<br>将上边的<code>SQL</code>稍微修改一下，增加一个子查询，发现<code>id</code>的以上两种同时存在。<br>相同<code>id</code>划分为一组，这样就有三个组，同组的从上往下顺序执行，不同组<code>id</code>值越大，优先级越高，越先执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  EXPLAIN select * from one o where o.two_id = (select t.two_id from two t where t.three_id = (select r.three_id  from three r where r.three_name=&#x27;我是第三表2&#x27;)) AND o.one_id in(select one_id from one where o.one_name=&quot;我是第一表2&quot;);</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+-------------+</span><br><span class="line">|  1 | PRIMARY     | o     | NULL       | ALL    | PRIMARY       | NULL    | NULL    | NULL               |    2 |       50 | Using where |</span><br><span class="line">|  1 | PRIMARY     | one   | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | xin-slave.o.one_id |    1 |      100 | Using index |</span><br><span class="line">|  2 | SUBQUERY    | t     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL               |    2 |       50 | Using where |</span><br><span class="line">|  3 | SUBQUERY    | r     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL               |    2 |       50 | Using where |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+---------+---------+--------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li></ul><h5 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h5><p><code>select_type</code>： 表示<code>select</code>查询的类型，主要是用于区分各种复杂的查询，例如：普通查询、联合查询、子查询等。</p><ul><li><p>SIMPLE<br><code>SIMPLE</code>：表示最简单的<code>select</code>查询语句，也就是在查询中不包含子查询或者<code>union</code>交并差集等操作。</p></li><li><p>PRIMARY<br><code>PRIMARY</code>：当查询语句中包含任何复杂的子部分，最外层查询则被标记为<code>PRIMARY</code>。</p></li><li><p>SUBQUERY<br><code>SUBQUERY</code>：当<code>select</code>或<code>where</code>列表中包含了子查询，该子查询被标记为：<code>SUBQUERY</code>。</p></li><li><p>DERIVED<br><code>DERIVED</code>：表示包含在<code>from</code>子句中的子查询的<code>select</code>，在我们的<code>from</code>列表中包含的子查询会被标记为<code>derived</code>。</p></li><li><p>UNION<br><code>UNION</code>：如果<code>union</code>后边又出现的<code>select</code>语句，则会被标记为<code>union</code>；<br>若<code>union</code>包含在<code>from</code>子句的子查询中，外层<code>select</code>将被标记为<code>derived</code>。</p></li><li><p>UNION RESULT<br><code>UNION RESULT</code>：代表从<code>union</code>的临时表中读取数据，<br>而<code>table</code>列的<code>&lt;union1,4&gt;</code>表示用第一个和第四个<code>select</code>的结果进行<code>union</code>操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN select t.two_name, ( select one.one_id from one) o from (select two_id,two_name from two where two_name =&#x27;&#x27;) t  union (select r.three_name,r.three_id from three r);</span><br><span class="line"></span><br><span class="line">+------+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+</span><br><span class="line">| id   | select_type  | table      | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra           |</span><br><span class="line">+------+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+</span><br><span class="line">|    1 | PRIMARY      | two        | NULL       | ALL   | NULL          | NULL    | NULL    | NULL |    2 |       50 | Using where     |</span><br><span class="line">|    2 | SUBQUERY     | one        | NULL       | index | NULL          | PRIMARY | 4       | NULL |    2 |      100 | Using index     |</span><br><span class="line">|    4 | UNION        | r          | NULL       | ALL   | NULL          | NULL    | NULL    | NULL |    2 |      100 | NULL            |</span><br><span class="line">| NULL | UNION RESULT | &lt;union1,4&gt; | NULL       | ALL   | NULL          | NULL    | NULL    | NULL | NULL | NULL     | Using temporary |</span><br><span class="line">+------+--------------+------------+------------+-------+---------------+---------+---------+------+------+----------+-----------------+</span><br></pre></td></tr></table></figure></li></ul><h5 id="table"><a href="#table" class="headerlink" title="table"></a>table</h5><p>查询的表名，并不一定是真实存在的表，有别名显示别名，也可能为临时表，例如上边的<code>DERIVED</code>、<code>&lt;union1,4&gt;</code>等。</p><h5 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h5><p>查询时匹配到的分区信息，对于非分区表值为<code>NULL</code>，当查询的是分区表时，<code>partitions</code>显示分区表命中的分区情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+----------------+---------------------------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table          | partitions                      | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+----------------+---------------------------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | one            | p201801,p201802,p201803,p300012 | index | NULL          | PRIMARY | 9       | NULL |    3 |      100 | Using index |</span><br><span class="line">+----+-------------+----------------+---------------------------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p><code>type</code>：查询使用了何种类型，它在<code>SQL</code>优化中是一个非常重要的指标，<br>以下性能从好到坏依次是：<br><code>system</code> &gt; <code>const</code> &gt; <code>eq_ref</code> &gt; <code>ref</code> &gt; <code>ref_or_null</code> &gt; <code>index_merge</code> &gt; <code>unique_subquery</code> &gt; <code>index_subquery</code> &gt; <code>range</code> &gt; <code>index</code> &gt; <code>ALL</code></p><ul><li><p>system<br><code>system</code>： 当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘IO，速度非常快。</p></li><li><p>const<br><code>const</code>：表示查询时命中<code>primary key</code>主键或者<code>unique</code>唯一索引，或者被连接的部分是一个常量(<code>const</code>)值。<br>这类扫描效率极高，返回数据量少，速度非常快。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * from three where three_id=1;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | three | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |      100 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br></pre></td></tr></table></figure></li><li><p>eq_ref<br><code>eq_ref</code>：查询时命中主键<code>primary key</code>或者<code>unique key</code>索引，<code>type</code>就是<code>eq_ref</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN select o.one_name from one o ,two t where o.one_id = t.two_id ; </span><br><span class="line">+----+-------------+-------+------------+--------+---------------+----------+---------+--------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type   | possible_keys | key      | key_len | ref                | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+----------+---------+--------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | index  | PRIMARY       | idx_name | 768     | NULL               |    2 |      100 | Using index |</span><br><span class="line">|  1 | SIMPLE      | t     | NULL       | eq_ref | PRIMARY       | PRIMARY  | 4       | xin-slave.o.one_id |    1 |      100 | Using index |</span><br><span class="line">+----+-------------+-------+------------+--------+---------------+----------+---------+--------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>ref<br><code>ref</code>：区别于<code>eq_ref</code>，<code>ref</code>表示使用非唯一性索引，会找到很多个符合条件的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select o.one_id from one o where o.one_name = &quot;xin&quot; ; </span><br><span class="line">+--------+</span><br><span class="line">| one_id |</span><br><span class="line">+--------+</span><br><span class="line">|      1 |</span><br><span class="line">|      3 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN select o.one_id from one o where o.one_name = &quot;xin&quot; ; </span><br><span class="line">+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | ref  | idx_name      | idx_name | 768     | const |    1 |      100 | Using index |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>ref_or_null<br><code>ref_or_null</code>：这种连接类型类似于 <code>ref</code>，区别在于<code>MySQL</code>会额外搜索包含<code>NULL</code>值的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN select o.one_id from one o where o.one_name = &quot;xin&quot; OR o.one_name IS NULL; </span><br><span class="line">+----+-------------+-------+------------+-------------+---------------+----------+---------+-------+------+----------+--------------------------+</span><br><span class="line">| id | select_type | table | partitions | type        | possible_keys | key      | key_len | ref   | rows | filtered | Extra                    |</span><br><span class="line">+----+-------------+-------+------------+-------------+---------------+----------+---------+-------+------+----------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | ref_or_null | idx_name      | idx_name | 768     | const |    3 |      100 | Using where; Using index |</span><br><span class="line">+----+-------------+-------+------------+-------------+---------------+----------+---------+-------+------+----------+--------------------------+</span><br></pre></td></tr></table></figure></li><li><p>index_merge<br><code>index_merge</code>：使用了索引合并优化方法，查询使用了两个以上的索引。<br>下边示例中同时使用到主键<code>one_id</code>和 字段<code>one_name</code>的<code>idx_name</code>索引 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN select * from one o where o.one_id &gt;1 and o.one_name =&#x27;xin&#x27;; </span><br><span class="line">+----+-------------+-------+------------+-------------+------------------+------------------+---------+------+------+----------+------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type        | possible_keys    | key              | key_len | ref  | rows | filtered | Extra                                          |</span><br><span class="line">+----+-------------+-------+------------+-------------+------------------+------------------+---------+------+------+----------+------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | index_merge | PRIMARY,idx_name | idx_name,PRIMARY | 772,4   | NULL |    1 |      100 | Using intersect(idx_name,PRIMARY); Using where |</span><br><span class="line">+----+-------------+-------+------------+-------------+------------------+------------------+---------+------+------+----------+------------------------------------------------+</span><br></pre></td></tr></table></figure></li><li><p>unique_subquery<br><code>unique_subquery</code>：替换下面的<code>IN</code>子查询，子查询返回不重复的集合。<br><code>value IN (SELECT primary_key FROM single_table WHERE some_expr)</code></p></li><li><p>index_subquery<br><code>index_subquery</code>：区别于<code>unique_subquery</code>，用于非唯一索引，可以返回重复值。<br><code>value IN (SELECT key_column FROM single_table WHERE some_expr)</code></p></li><li><p>range<br><code>range</code>：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。<br>在<code>where</code>语句中使用<code>bettween...and</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>in</code>等条件查询<code>type</code>都是<code>range</code>。<br>举个栗子：<code>three</code>表中<code>three_id</code>为唯一主键，<code>user_id</code>普通字段未建索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * from three where three_id BETWEEN 2 AND 3;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | three | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL |    1 |      100 | Using where |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure><p>从结果中看到只有对设置了索引的字段，做范围检索<code>type</code>才是<code>range</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * from three where user_id BETWEEN 2 AND 3;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | three | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>index<br><code>index</code>：<code>Index</code>与<code>ALL</code>其实都是读全表，区别在于<code>index</code>是遍历索引树读取，而<code>ALL</code>是从硬盘中读取。<br>下边示例：<code>three_id</code>为主键，不带<code>where</code>条件全表查询，<code>type</code>结果为<code>index</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT three_id from three ;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | three | NULL       | index | NULL          | PRIMARY | 4       | NULL |    1 |      100 | Using index |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>ALL<br><code>ALL</code>：将遍历全表以找到匹配的行，性能最差。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * from two ;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | two   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |      100 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></pre></td></tr></table></figure></li></ul><h5 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h5><p><code>possible_keys</code>：表示在<code>MySQL</code>中通过哪些索引，能让我们在表中找到想要的记录，一旦查询涉及到的某个字段上存在索引，<br>则索引将被列出，但这个索引并不定一会是最终查询数据时所被用到的索引。具体请参考上边的例子。</p><h5 id="key"><a href="#key" class="headerlink" title="key"></a>key</h5><p><code>key</code>：区别于<code>possible_keys</code>，<code>key</code>是查询中实际使用到的索引，若没有使用索引，显示为<code>NULL</code>。具体请参考上边的例子。</p><blockquote><p>当type为index_merge时，可能会显示多个索引。</p></blockquote><h5 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h5><p><code>key_len</code>：表示查询用到的索引长度（字节数），原则上长度越短越好 。</p><ul><li>单列索引，那么需要将整个索引长度算进去；</li><li>多列索引，不是所有列都能用到，需要计算查询中实际用到的列。<blockquote><p>注意：key_len只计算where条件中用到的索引长度，而排序和分组即便是用到了索引，也不会计算到key_len中。</p></blockquote></li></ul><h5 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h5><p><code>ref</code>：常见的有：<code>const</code>，<code>func</code>，<code>null</code>，字段名。</p><ul><li>当使用常量等值查询，显示<code>const</code>，</li><li>当关联查询时，会显示相应关联表的关联字段</li><li>如果查询条件使用了表达式、函数，或者条件列发生内部隐式转换，可能显示为<code>func</code></li><li>其他情况<code>null</code></li></ul><h5 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h5><p><code>rows</code>：以表的统计信息和索引使用情况，估算要找到我们所需的记录，需要读取的行数。<br>这是评估<code>SQL</code>性能的一个比较重要的数据，<code>mysql</code>需要扫描的行数，很直观的显示<code>SQL</code>性能的好坏，一般情况下<code>rows</code>值越小越好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * from three;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | three | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |      100 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></pre></td></tr></table></figure><h5 id="filtered"><a href="#filtered" class="headerlink" title="filtered"></a>filtered</h5><p><code>filtered</code>这个是一个百分比的值，表里符合条件的记录数的百分比。<br>简单点说，这个字段表示存储引擎返回的数据在经过过滤后，剩下满足条件的记录数量的比例。</p><p>在<code>MySQL.5.7</code>版本以前想要显示<code>filtered</code>需要使用<code>explain extended</code>命令。<br><code>MySQL.5.7</code>后，默认<code>explain</code>直接显示<code>partitions</code>和<code>filtered</code>的信息。</p><h5 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h5><p><code>Extra</code>：不适合在其他列中显示的信息，<code>Explain</code>中的很多额外的信息会在<code>Extra</code>字段显示。</p><ul><li><p>Using index<br><code>Using index</code>：我们在相应的<code>select</code>操作中使用了覆盖索引，通俗一点讲就是查询的列被索引覆盖，<br>使用到覆盖索引查询速度会非常快，<code>SQl</code>优化中理想的状态。<br>什么又是覆盖索引?<br>一条<code>SQL</code>只需要通过索引就可以返回，我们所需要查询的数据（一个或几个字段），而不必通过二级索引，<br>查到主键之后再通过主键查询整行数据（<code>select *</code>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- one_id表为主键</span><br><span class="line">mysql&gt; EXPLAIN SELECT one_id from one ;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key        | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | one   | NULL       | index | NULL          | idx_two_id | 5       | NULL |    3 |      100 | Using index |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+------------+---------+------+------+----------+-------------+</span><br><span class="line">```        </span><br><span class="line">注意：想要使用到覆盖索引，我们在`select`时只取出需要的字段，不可`select *`，而且该字段建了索引。    </span><br><span class="line">```mysql</span><br><span class="line">mysql&gt; EXPLAIN SELECT * from one ;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | one   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |      100 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></pre></td></tr></table></figure></li><li><p>Using where<br><code>Using where</code>：查询时未找到可用的索引，进而通过<code>where</code>条件过滤获取所需数据，<br>但要注意的是并不是所有带<code>where</code>语句的查询都会显示<code>Using where</code>。<br>下边示例<code>create_time</code>并未用到索引，<code>type</code>为<code>ALL</code>，即<code>MySQL</code>通过全表扫描后再按<code>where</code>条件筛选数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_name from one where create_time =&#x27;2020-05-18&#x27;;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | one   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>Using temporary<br><code>Using temporary</code>：表示查询后结果需要使用临时表来存储，一般在排序或者分组查询时用到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_name from one where one_id in (1,2) group by one_name;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | one   | NULL       | range| NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using temporary; Using filesort |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>Using filesort<br><code>Using filesort</code>：表示无法利用索引完成的排序操作，也就是<code>ORDER BY</code>的字段没有索引，通常这样的<code>SQL</code>都是需要优化的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_id from one  ORDER BY create_time;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">|  1 | SIMPLE      | one   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |      100 | Using filesort |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br></pre></td></tr></table></figure><p>如果<code>ORDER BY</code>字段有索引就会用到覆盖索引，相比执行速度快很多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_id from one  ORDER BY one_id;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | one   | NULL       | index | NULL          | PRIMARY | 4       | NULL |    3 |      100 | Using index |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span><br></pre></td></tr></table></figure></li><li><p>Using join buffer<br><code>Using join buffer</code>：在我们联表查询的时候，如果表的连接条件没有用到索引，需要有一个连接缓冲区来存储中间结果。<br>先看一下有索引的情况：连接条件<code>one_name</code>、<code>two_name</code>都用到索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_name from one o,two t where o.one_name = t.two_name;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+----------+---------+----------------------+------+----------+--------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref                  | rows | filtered | Extra                    |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+----------+---------+----------------------+------+----------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | index | idx_name      | idx_name | 768     | NULL                 |    3 |      100 | Using where; Using index |</span><br><span class="line">|  1 | SIMPLE      | t     | NULL       | ref   | idx_name      | idx_name | 768     | xin-slave.o.one_name |    1 |      100 | Using index              |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+----------+---------+----------------------+------+----------+--------------------------+</span><br></pre></td></tr></table></figure><p>接下来删掉 连接条件<code>one_name</code>、<code>two_name</code>的字段索引。<br>发现<code>Extra</code>列变成<code>Using join buffer</code>，<code>type</code>均为全表扫描，这也是<code>SQL</code>优化中需要注意的地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_name from one o,two t where o.one_name = t.two_name;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | t     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |      100 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | o     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    3 |    33.33 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</span><br></pre></td></tr></table></figure></li><li><p>Impossible where<br><code>Impossible where</code>：表示在我们用不太正确的<code>where</code>语句，导致没有符合条件的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT one_name from one WHERE 1=2;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL | NULL     | Impossible WHERE |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+</span><br></pre></td></tr></table></figure></li><li><p>No tables used<br><code>No tables used</code>：我们的查询语句中没有<code>FROM</code>子句，或者有<code>FROM DUAL</code>子句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXPLAIN select now();</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL | NULL     | No tables used |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span><br></pre></td></tr></table></figure></li></ul><p><code>Extra</code> 列的信息非常非常多，这里就不再一一列举了，详见<code>MySQL</code>官方文档 ：<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_index_merge">https://dev.mysql.com/doc/ref...</a>   </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>重点看的几列：</p><ul><li><p><code>possible_keys</code>：可能可以利用的索引的名字。这里的索引名字是创建索引时指定的索引昵称；<br>如果索引没有昵称，则默认显示的是索引中第一个列的名字（在本例中，它是“firstname”）。<br>默认索引名字的含义往往不是很明显。</p></li><li><p><code>key</code>：它显示了<code>MySQL</code>实际使用的索引的名字。如果它为空（或<code>NULL</code>），则<code>MySQL</code>不使用索引。</p></li><li><p><code>key_len</code>：索引中被使用部分的长度，以字节计。</p></li><li><p><code>ref</code>：列出是通过常量（<code>const</code>），还是某个表的某个字段（如果是<code>join</code>）来过滤（通过<code>key</code>）的。</p></li><li><p><code>rows</code>：<code>MySQL</code>所认为的它在找到正确的结果之前必须扫描的记录数。显然，这里最理想的数字就是1。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> explain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装 Docker 和 Docker-compose</title>
      <link href="/centos7-docker/"/>
      <url>/centos7-docker/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>安装 Docker</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"># 添加docker下载仓库（由于网络原因，这里添加的是阿里云镜像）</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"># 安装docker-ce</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"></span><br><span class="line"># 开机自启</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"># 启动docker-ce</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">sudo docker --version</span><br><span class="line"></span><br><span class="line"># 默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。</span><br><span class="line"># 而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。</span><br><span class="line"># 可将非 root 用户 加入 docker 组：（$USER 当前用户）</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><ul><li><strong>安装 docker-compose</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 下载 docker-compose （有可能比较慢 可下载好上传） 版本 1.25.5</span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 修改权限</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">sudo docker-compose --version</span><br></pre></td></tr></table></figure><p>注意需要使用 root 账户或可以使用 sudo 的账户</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>limit分页查询性能问题</title>
      <link href="/mysql-limit/"/>
      <url>/mysql-limit/</url>
      
        <content type="html"><![CDATA[<p>分页查询时，我们会在 <code>LIMIT</code> 后面传两个参数，一个是偏移量（<code>offset</code>），一个是获取的条数（<code>limit</code>）。当偏移量很小时，查询速度很快，但是当 <code>offset</code> 很大时，查询速度就会变慢。</p><p>MySQL Limit 语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br></pre></td></tr></table></figure><p>假设有一张 300w 条数据的表，对其进行分页查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select * from tbl limit 1, 10// 31.6ms</span><br><span class="line">select * from tbl limit 10, 10// 34.9ms</span><br><span class="line">select * from tbl limit 100, 10// 35.6ms</span><br><span class="line">select * from tbl limit 1000, 10// 38.3ms</span><br><span class="line">select * from tbl limit 10000, 10// 5561ms</span><br><span class="line">select * from tbl limit 100000, 10// 60.6s</span><br><span class="line">select * from tbl limit 1000000, 10// 272.3s</span><br></pre></td></tr></table></figure><p>LIMIT分页查询的时间与偏移量值成正比。当偏移量越大时，查询时间越长。这种情况，会随着业务的增加，数据的增多，会越发的明显。那么，如何优化这种情况呢？答案是，覆盖索引。</p><span id="more"></span><p><strong>优化思路</strong></p><p>对于LIMIT分页查询的性能优化，主要思路是利用覆盖索引字段定位数据，然后再取出内容。</p><ul><li><h4 id="子查询分页方式"><a href="#子查询分页方式" class="headerlink" title="子查询分页方式"></a>子查询分页方式</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tbl</span><br><span class="line">WHERE id &gt;= (SELECT id FROM tbl limit 100000, 1)</span><br><span class="line">LIMIT 20  // 55ms</span><br></pre></td></tr></table></figure><p>子查询分页方式，首先通过子查询和覆盖索引定位到起始位置ID，然后再取所需条数的数据。</p><p>缺点是，不适用于结果集不以ID连续自增的分页场景。在复杂分页场景，往往需要通过过滤条件，筛选到符合条件的ID，此时的ID是离散且不连续的。如果使用上述的方式，并不能筛选出目标数据。</p><p><strong>改造版</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT t1.* FROM tbl t1</span><br><span class="line">WHERE t1.id in (SELECT t2.id from (SELECT id FROM tbl limit 100000, 10) as t2)  // 53.8ms</span><br></pre></td></tr></table></figure><p>查询效率很高。但是，这种写法比较繁琐。我们可以使用下面的  <code>join</code>  分页方式，达到相同的优化效果。实际上，两者的原理是相同的。</p><ul><li><h4 id="join-分页方式"><a href="#join-分页方式" class="headerlink" title="join 分页方式"></a>join 分页方式</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tbl t1 </span><br><span class="line">JOIN (SELECT id from tbl WHERE status=1 </span><br><span class="line">limit 100000, 10) t2</span><br><span class="line">ON t1.id = t2.id  // 53.3 ms</span><br></pre></td></tr></table></figure><p>这条SQL是，通过自连接与<code>join</code>定位到目标 <code>ids</code>，然后再将数据取出。在定位目标 <code>ids</code>时，由于 <code>SELECT</code>的元素只有主键 <code>ID</code>，且<code>status</code> 存在索引，因此MySQL只需在索引中，就能定位到目标 <code>ids</code>，不用在数据文件上进行查找。因而，查询效率非常高。</p><h4 id="覆盖索引（Cover-Index）"><a href="#覆盖索引（Cover-Index）" class="headerlink" title="覆盖索引（Cover Index）"></a>覆盖索引（Cover Index）</h4><blockquote><p>如果索引包含所有满足查询需要的数据的索引成为覆盖索引(Covering Index)，也就是平时所说的不需要回表操作。</p></blockquote><p>简单的说，覆盖索引覆盖所有需要查询的字段（大于或等于所查询的字段）。MySQL可以通过索引获取查询数据，因而不需要读取数据行。</p><p><strong>覆盖索引的好处：</strong></p><ul><li>索引大小远小于数据行大小。因而，如果只读取索引，则能极大减少对数据访问量。</li><li>索引按顺序储存。对于IO密集型的范围查询会比随机从磁盘读取每一行数据的IO要少。</li><li>避免对主键索引的二次查询。二级索引的叶子节点包含了主键的值，如果二级索引包含所要查询的值，则能避免二次查询主键索引（聚簇索引，聚簇索引既存储了索引，也储存了值）。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过利用覆盖索引，能极大的优化了Limit分页查询的效率。在真正的实践中，除了使用覆盖索引，优化查询速度外，我们还可以使用 Redis 缓存，将热点数据进行缓存储存。</p><p>也可以根据应用场景来选择限制分页，即在不影响阅读体验的前提下，只允许用户可以查看前几千条的数据。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> limit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 PhpStorm 的默认 PHP 版本语法为 7.0+</title>
      <link href="/phpstorm-php-lang-level/"/>
      <url>/phpstorm-php-lang-level/</url>
      
        <content type="html"><![CDATA[<p>在项目中使用 PHP7 新特性时 PHPStorm 出现了红色波浪线错误，鼠标移上去看，提示 <code>Coalesce operator is available in PHP 7 Only</code>，这明显不是代码错误，项目基于 PHP7.0+的，有点强迫症，必须把这个给干掉</p><span id="more"></span><p>首先自己的机子上的 PHP 版本是 7.3.8 的，排除安装的 PHP 版本过低的问题<br>查了一下发现 PHPStorm 默认支持的 PHP 版本语法问题<br>通过在偏好设置中查看发现默认是 PHP5.6 ，修改为 PHP7.+ 即可<br>在 <code>Setting -&gt; Languagers &amp; Framework -&gt; PHP</code> 可看到 <code>PHP language level</code> 是 5.6 的<br>但状态时不可编辑的，是因为 PhpStorm 自动开启了 Composer 配置文件同步的机制，只需要关闭就可以编辑了<br>在 <code>Setting -&gt; Languagers &amp; Framework -&gt; PHP -&gt; Composer -&gt; Synchronize IDE Setting with composer.json</code> 默认勾选了，取消勾选 然后 Apple 应用<br>这时候 <code>Setting -&gt; Languagers &amp; Framework -&gt; PHP </code> 的 <code>PHP language level</code> 可以编辑了 选一个 PHP7.+ 的 选好 Apply 并点击 OK 保存</p><p>这就修改成功了<br>红色波浪错误不见了，看着舒服多了</p><p>比较懒 就不上图了</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 PHP 连接 docker 容器中的 MySQL 、 Redis 时 报错：Connection refused</title>
      <link href="/docker-connection-refused/"/>
      <url>/docker-connection-refused/</url>
      
        <content type="html"><![CDATA[<p>环境时基于 docker-compose 管理的 PHP 和 MySQL 服务<br>使用 PHP 连接 docker 容器中的 MySQL 和 Redis 时，报错：Connection refused，也就是在代码中使用 MySql Redis 会报错</p><span id="more"></span><p>连接 MySQL 测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$pdo</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:dbname=test;host=127.0.0.1;charset=utf8mb4;port=3306&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection to server sucessfully&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(PDOException <span class="variable">$pe</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$pe</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错</p><p><code>SQLSTATE[HY000] [2002] Connection refused</code></p><p>连接 Redis 测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$redis</span> = <span class="keyword">new</span> <span class="title class_">Redis</span>();</span><br><span class="line">    <span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Connection to server sucessfully&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错</p><p><code>Connection refused</code></p><p>但是在宿主机用 Navicat 可以连接 MySql 各种操作都没问题，用 RedisDesktopManager 连接 Redis 也没问题</p><p>后来在网上找到了原因<br>主要是对 Docker 容器的隔离机制理解不够，其实每个容器之间都是隔离的，有相互依赖的服务，需要进行显示的关联，比如使用选项 –link<br>简单来说，容器之间相互隔绝，在进行了端口映射之后，宿主机可以通过 127.0.0.1:6379 访问 Redis ，127.0.0.1:3306 访问 MySql ，但 PHP 容器不行</p><p><strong>测试连接 MySQL 的代码其实是运行在 PHP 对应的容器里，而 MySQL 服务是在它自己对应的容器里，当我们的 host 填写 127.0.0.1 时候，其实对应的是 PHP 容器里面，所以不可能找到对应的服务，从而引起上面拒绝连接的错误。Redis 同理。</strong></p><ul><li>其实容器之间关联之后，可以通过容器名进行连接</li><li>MySQL 服务对应的容器名是 mysql，PHP 容器与它关联的名字也是 MySQL，所以把 127.0.0.1 改成 mysql（对应的容器名） 再进行连接即可！</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Connection refused </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用git stash命令保存和恢复进度</title>
      <link href="/git-stash/"/>
      <url>/git-stash/</url>
      
        <content type="html"><![CDATA[<p>我们有时会遇到这样的情况，正在dev分支开发新功能，做到一半时有人过来反馈一个bug，让马上解决，要切换分支（<code>git checkout</code>），<br>但是新功能做到了一半你又不想提交，这时就可以使用 <code>git stash</code> 命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，<br>使用 <code>git stash pop</code> 来恢复之前的进度继续开发新功能。下面来看一下 <code>git stash</code> 命令的常见用法</p><span id="more"></span><h4 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h4><p>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行 <code>git status</code> 命令，就会发现当前是一个干净的工作区，没有任何改动。使用 <code>git stash save &#39;message...&#39;</code> 可以添加一些注释</p><h4 id="git-stash-list"><a href="#git-stash-list" class="headerlink" title="git stash list"></a>git stash list</h4><p>显示保存进度的列表。也就意味着，<code>git stash</code> 命令可以多次执行。</p><ul><li><code>git stash pop [–index] [stash_id]</code></li><li><code>git stash pop</code> 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。</li><li><code>git stash pop --index</code> 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）</li><li><code>git stash pop stash@&#123;1&#125;</code> 恢复指定的进度到工作区。stash_id是通过git stash list命令得到的<br>通过<code>git stash pop</code>命令恢复进度后，会删除当前进度。</li></ul><h4 id="git-stash-apply-–index-stash-id"><a href="#git-stash-apply-–index-stash-id" class="headerlink" title="git stash apply [–index] [stash_id]"></a>git stash apply [–index] [stash_id]</h4><p>除了不删除恢复的进度之外，其余和 <code>git stash pop</code> 命令一样。</p><h4 id="git-stash-drop-stash-id"><a href="#git-stash-drop-stash-id" class="headerlink" title="git stash drop [stash_id]"></a>git stash drop [stash_id]</h4><p>删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。</p><h4 id="git-stash-clear"><a href="#git-stash-clear" class="headerlink" title="git stash clear"></a>git stash clear</h4><p>删除所有存储的进度。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> stash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 开放查看端口 防火墙关闭打开</title>
      <link href="/centos7-firewalld-service/"/>
      <url>/centos7-firewalld-service/</url>
      
        <content type="html"><![CDATA[<p>Centos 7 firewall 命令：</p><p>开启防火墙：</p><p><code>systemctl start firewalld.service </code></p><h4 id="查看防火墙状态："><a href="#查看防火墙状态：" class="headerlink" title="查看防火墙状态："></a>查看防火墙状态：</h4><ul><li>查看默认防火墙状态（关闭后显示notrunning，开启后显示running）<br><code>firewall-cmd --state</code></li></ul><p>*查看已经开放的端口：</p><p><code>firewall-cmd --list-ports</code></p><ul><li>开启端口<br><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></li></ul><p>命令含义：</p><p>–zone #作用域</p><p>–add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议</p><p>–permanent #永久生效，没有此参数重启后失效</p><h4 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload #重启firewall</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure><p>CentOS 7 以下版本 iptables 命令<br>如要开放80，22，8080 端口，输入以下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><p>然后保存：</p><p>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save</p><ul><li>查看打开的端口：</li></ul><p><code>/etc/init.d/iptables status</code></p><ul><li>关闭防火墙<br>1） 永久性生效，重启后不会复原</li></ul><p>开启： <code>chkconfig iptables on</code></p><p>关闭： <code>chkconfig iptables off</code></p><p>2） 即时生效，重启后复原</p><p>开启： <code>service iptables start</code></p><p>关闭： <code>service iptables stop</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualbox 虚拟机静态IP设置（debian）</title>
      <link href="/vbox-static-ip/"/>
      <url>/vbox-static-ip/</url>
      
        <content type="html"><![CDATA[<p>virtualbox 虚拟机静态IP设置（用于Host Only和NAT共存的方式）</p><p>网卡1：NAT网络<br>网卡2：Host-Only网络</p><p>sudo vim &#x2F;etc&#x2F;network&#x2F;interfaces</p><p>在下面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 增加的Host-only静态IP设置 (enp0s8 是根据拓扑关系映射的网卡名称（旧规则是eth0,eth1）)</span><br><span class="line"># 可以通过 ```ls /sys/class/net```查看，是否为enp0s8</span><br><span class="line">auto enp0s8</span><br><span class="line">iface enp0s8 inet static</span><br><span class="line">address 192.168.56.101</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.56.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> virtualbox </tag>
            
            <tag> debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>{@inheritDoc的使用}</title>
      <link href="/inheritDoc/"/>
      <url>/inheritDoc/</url>
      
        <content type="html"><![CDATA[<p>{@inheritDoc}的使用<br>这个注释的作用是在：继承的时候 直接把父类的注释都copy下来</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> inheritDoc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPMailer发送的时候出现的 SMTP connect() failed 错误</title>
      <link href="/phpmailer-failed/"/>
      <url>/phpmailer-failed/</url>
      
        <content type="html"><![CDATA[<p>PHPMailer发送的时候出现的 SMTP connect() failed 错误<br>以前封装好的方法 测试过没问题的 突然今天有问题了<br>查了一下 说是 因为从php5.6以后加入了一些安全校验，这样一来在连接有SSL验证的服务器的话，可能就会产生这样的问题。</p><p>解决方法就是加入这样一段内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$mail-&gt;SMTPOptions = array(</span><br><span class="line">    &#x27;ssl&#x27; =&gt; array(</span><br><span class="line">        &#x27;verify_peer&#x27; =&gt; false,</span><br><span class="line">        &#x27;verify_peer_name&#x27; =&gt; false,</span><br><span class="line">        &#x27;allow_self_signed&#x27; =&gt; true</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPMailer </tag>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS 7上安装Sublime Text 3</title>
      <link href="/centos7-install-SublimeText3/"/>
      <url>/centos7-install-SublimeText3/</url>
      
        <content type="html"><![CDATA[<p>Sublime Text是一个专有的跨平台多功能文本和源代码编辑器，用于Web和软件开发。它非常快，并且具有许多开箱即用的强大功能。可以通过安装新插件和创建自定义设置来增强其功能。</p><span id="more"></span><ul><li><p><strong>首先导入官方Sublime Text存储库的GPG密钥</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -v --import https://download.sublimetext.com/sublimehq-rpm-pub.gpg</span><br></pre></td></tr></table></figure></li><li><p><strong>使用以下命令将Yum存储库添加到系统中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo</span><br><span class="line"></span><br><span class="line">//输出</span><br><span class="line">adding repo from: https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo</span><br><span class="line">grabbing file https://download.sublimetext.com/rpm/stable/x86_64/sublime-text.repo to /etc/yum.repos.d/sublime-text.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/sublime-text.repo</span><br></pre></td></tr></table></figure></li><li><p><strong>启用存储库后，键入以下命令安装Sublime Text 3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install sublime-text</span><br></pre></td></tr></table></figure></li></ul><p>Sublime Text已安装完成<br>可以在左上角的 应用程序-&gt;编程(Applications -&gt; Programming) 中找到 Sublime Text</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> SublimeText3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CentOS 7上安装Google Chrome Web浏览器</title>
      <link href="/centos7-install-GoogleChrome/"/>
      <url>/centos7-install-GoogleChrome/</url>
      
        <content type="html"><![CDATA[<p>谷歌浏览器是世界上使用最广泛的网络浏览器。它是为现代网络构建的快速，易用且安全的浏览器。<br>Chrome不是一个开源浏览器，它不包含在CentOS存储库中。它基于Chromium，这是一个开源浏览器，可在EPEL存储库中找到。</p><span id="more"></span><h3 id="安装Google-Chrome"><a href="#安装Google-Chrome" class="headerlink" title="安装Google Chrome"></a>安装Google Chrome</h3><p><strong>前提：请确保以具有sudo权限的用户身份登录。</strong></p><p>在CentOS上安装Google Chrome</p><ul><li>首先打开终端，使用以下wget命令下载最新的Google Chrome 包：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure></li><li>下载文件后，键入以下命令在CentOS 7系统上安装Google Chrome：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum localinstall google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure>上面的命令将提示您输入用户密码，然后它将安装Chrome和所有其他必需的软件包。</li></ul><h3 id="启动Google-Chrome"><a href="#启动Google-Chrome" class="headerlink" title="启动Google Chrome"></a>启动Google Chrome</h3><p>现在您已经在CentOS系统上安装了Google Chrome(应用程序-&gt;互联网-&gt;Google Chrome)<br><img src="https://raw.githubusercontent.com/xqmGitHub/xqmgithub.github.io/img/hexo/20190228162647.png"></p><p>当您第一次启动Google Chrome时，会出现如下窗口，询问您是否要将Google Chrome设置为默认浏览器，并向Google发送使用统计信息和崩溃报告<br>根据您的偏好选择，然后单击OK继续。</p><h3 id="更新Google-Chrome"><a href="#更新Google-Chrome" class="headerlink" title="更新Google Chrome"></a>更新Google Chrome</h3><p>在安装过程中，官方Google存储库将添加到您的系统中。您可以使用cat命令验证文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/yum.repos.d/google-chrome.repo</span><br><span class="line"></span><br><span class="line">//输出</span><br><span class="line">[google-chrome]</span><br><span class="line">name=google-chrome</span><br><span class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure><p>这可确保在通过桌面标准软件更新工具发布新版本时，您的Google Chrome安装将自动更新。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> GoogleChrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装composer</title>
      <link href="/linux-install-composer/"/>
      <url>/linux-install-composer/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//安装composer</span><br><span class="line">php -r &quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span><br><span class="line">php composer-setup.php</span><br><span class="line">sudo mv composer.phar /usr/local/bin/composer</span><br><span class="line">//切换中国镜像</span><br><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br><span class="line">//更新composer</span><br><span class="line">composer selfupdate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Travis CI 自动部署 Hexo 到 GitHub 和 Coding</title>
      <link href="/travisci-auto-deploy-hexo/"/>
      <url>/travisci-auto-deploy-hexo/</url>
      
        <content type="html"><![CDATA[<p>每次写完一篇文章,都要手动执行hexo g &amp;&amp; gulp和hexo d去生成静态网页后在进行部署到GitHub page和Coding page上去</p><p>而且为了保存文章的源码md文件还需要push到对应的仓库分支上,比较麻烦 就想到了自动部署 网上找了一下最后用<a href="https://travis-ci.com/">Travis CI</a></p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>本地写完文章 &#x3D;&gt; push GitHub &#x3D;&gt; GitHub触发Travis CI构建 &#x3D;&gt; 执行命令 &#x3D;&gt; 部署 &#x3D;&gt; 完成</li></ul><h3 id="Travis-CI设置"><a href="#Travis-CI设置" class="headerlink" title="Travis CI设置"></a>Travis CI设置</h3><ul><li>用GitHub账号登录<a href="https://travis-ci.com/">Travis CI</a></li><li>然后添加到你要激活的存储库。</li></ul><p><img src="https://i.loli.net/2019/02/22/5c6fb47d6ba45.png"></p><ul><li>然后选择你要使用的仓库(放hexo博客的仓库)</li><li>接下来生成GitHub和Coding的Token（生成后页面不要关闭 最好在新标签打开 方便后面复制）</li></ul><p>GitHub传送门<a href="https://github.com/settings/tokens">GitHub</a></p><p>点击 Generate new token 来生成<br><img src="https://i.loli.net/2019/02/22/5c6fb72e9301e.png"></p><p>Coding传送门<a href="https://coding.net/user/account/setting/tokens">Coding</a></p><p><img src="https://i.loli.net/2019/02/22/5c6fb8a13cc9d.png"></p><p>点击右边的 Settings 来添加环境变量（复制刚才生成好的Token）</p><ul><li><strong>CI_TOKEN是GitHub的Token</strong></li><li><strong>CO_TOKEN是Coding的Token</strong></li></ul><p><img src="https://i.loli.net/2019/02/22/5c6fbb6e4702c.png"></p><h3 id="在项目根目录新建-travis-yml-文件"><a href="#在项目根目录新建-travis-yml-文件" class="headerlink" title="在项目根目录新建 .travis.yml 文件"></a>在项目根目录新建 <code>.travis.yml</code> 文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line"># 不要用 stable 坑 版本太高 gulp的时候会报错 </span><br><span class="line">- 8.11.3</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">before_install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo generate &amp;&amp; gulp</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  # GitHub用户名</span><br><span class="line">  - git config user.name &quot;GitHub用户名&quot;</span><br><span class="line">  # GitHub邮箱</span><br><span class="line">  - git config user.email &quot;GitHub邮箱&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;auto commit by TravisCI at `date +%Y%m%d`&quot;</span><br><span class="line">  # GitHub Pages</span><br><span class="line">  - git push --force --quiet &quot;https://$&#123;CI_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master </span><br><span class="line">  # Coding Pages 这里的 xxx 是你的Coding名</span><br><span class="line">  - git push --force --quiet &quot;https://xxx:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;&quot; master:master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  # 这里替换你要监听的分支</span><br><span class="line">  - hexo</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   # GitHub Pages(GitHub仓库地址)</span><br><span class="line">   - GH_REF: github.com/xxx/xxx.github.io.git</span><br><span class="line">   # Coding Pages(Coding仓库地址)</span><br><span class="line">   - CO_REF: git.coding.net/xxx/xxx.git</span><br><span class="line"></span><br><span class="line"># 这个可以不用</span><br><span class="line"># configure notifications (email, IRC, campfire etc) </span><br><span class="line"># please update this section to your needs!</span><br><span class="line"># https://docs.travis-ci.com/user/notifications/</span><br><span class="line">notifications:</span><br><span class="line">  #你的邮箱</span><br><span class="line">  email:</span><br><span class="line">    - gmail@gmail.com</span><br><span class="line">  on_success: change</span><br><span class="line">  on_failure: always</span><br></pre></td></tr></table></figure><p>之后就直接提交到GitHub就行了 后面的事就交给 Travis CI 去干了</p><p>注 我的仓库分两个分支：hexo和master。hexo作为默认分支，存放博客源代码，master分支存放博客生成页面</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TravisCI </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test travis-ci</title>
      <link href="/test-travis-ci/"/>
      <url>/test-travis-ci/</url>
      
        <content type="html"><![CDATA[<p>测试 TravisCI 自动部署</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> travis-ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Base64编码解码</title>
      <link href="/js-bases64/"/>
      <url>/js-bases64/</url>
      
        <content type="html"><![CDATA[<p>Base64编码解码是经常用到的 js怎么用呢 第一反应是找 bases64.js<br>使用很简单，浏览器引入该JS文件，然后Base64编码这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base64.encode(&#x27;123456&#x27;);</span><br><span class="line">// 返回：&#x27;MTIzNDU2&#x27;</span><br></pre></td></tr></table></figure><p>解码就调用<code>decode</code>方法，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Base64.decode(&#x27;MTIzNDU2&#x27;);</span><br><span class="line">// 返回：&#x27;123456&#x27;</span><br></pre></td></tr></table></figure><p>就是这么简单。<br>结果，今天发现，尼玛原来浏览器很早就支持了JS Base64加密解密，还花时间去找类库，还要加载一次，只能说JS基础掌握不牢。</p><span id="more"></span><p><strong>原生atob和btoa方法</strong><br>实际上，从IE10+浏览器开始，所有浏览器就原生提供了Base64编码解码方法，不仅可以用于浏览器环境，Service Worker环境也可以使用。</p><ul><li>Base64解码</li></ul><p>语法为（浏览器中）：</p><p><code>var decodedData = window.atob(encodedData);</code><br>或者（浏览器或js Worker线程中）：</p><p><code>var decodedData = self.atob(encodedData);</code><br>例如：</p><p><code>window.atob(&#39;MTIzNDU2&#39;); // 返回：&#39;123456&#39;</code></p><ul><li>Base64编码</li></ul><p>语法为（浏览器中）：</p><p><code>var encodedData = window.btoa(stringToEncode);</code><br>或者（浏览器或js Worker线程中）：</p><p><code>var encodedData = self.btoa(stringToEncode);</code><br>例如：<br><code>window.btoa(&#39;123456&#39;); // 返回：&#39;MTIzNDU2&#39;</code></p><p>还有个问题 中文Base64数据转换会有报错问题</p><p>解决方法，就是中文先encode转码和decode编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//编码：</span><br><span class="line">window.btoa(window.encodeURIComponent(&#x27;我是中文&#x27;)); </span><br><span class="line">//返回 JUU2JTg4JTkxJUU2JTk4JUFGJUU0JUI4JUFEJUU2JTk2JTg3</span><br><span class="line"></span><br><span class="line">//解码：</span><br><span class="line">window.decodeURIComponent(window.atob(&#x27;JUU2JTg4JTkxJUU2JTk4JUFGJUU0JUI4JUFEJUU2JTk2JTg3&#x27;));</span><br><span class="line">//返回 我是中文</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bases64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解压缩报错tar：Error is not recoverable：exiting now</title>
      <link href="/tar-isnotrecoverable/"/>
      <url>/tar-isnotrecoverable/</url>
      
        <content type="html"><![CDATA[<p>解压缩报错tar: Error is not recoverable: exiting now<br>[root@root]# tar -zxvf &#x2F;home&#x2F;data&#x2F;data.tar.gz.xz<br>gzip: stdin: not in gzip format<br>tar: Child returned status 1<br>tar: Error is not recoverable: exiting now</p><p>解决方法：<br>去掉z参数，使用 tar -xvf 解压正常</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP三元运算符?:的简写</title>
      <link href="/php-ternaryoperator/"/>
      <url>/php-ternaryoperator/</url>
      
        <content type="html"><![CDATA[<p>在PHP中三元运算符可以简化书写，使程序更加优雅<br>从<strong>PHP5.3</strong>以后提供了更加简洁的写法</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;a&#x27;;</span><br><span class="line">echo $str ? $str: &#x27;哈哈哈&#x27;;</span><br></pre></td></tr></table></figure><p>表达式<code>(expr1) ? (expr2) : (expr3)</code>在 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。<br>自 <strong>PHP 5.3</strong> 起，可以省略三元运算符中间那部分。表达式 <code>expr1 ?: expr3 </code>在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。 </p><p>上面可以简化为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;a&#x27;;</span><br><span class="line">echo $str ?: &#x27;哈哈哈&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三元运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php：找不到命令</title>
      <link href="/php-commandnotfound/"/>
      <url>/php-commandnotfound/</url>
      
        <content type="html"><![CDATA[<p>在终端输入一个命令，而系统提示你说命令没有找到（Command not found）的话，要么是因为你没有装相应的软件包，要么就是因为路径设置的问题。如果是因为软件包的问题，那没有别的好说的，安装相应的软件包就好了。而另外一种情况，则需要对用户的路径进行设置。</p><span id="more"></span><p> php：找不到命令  php 已经安装了 那就是环境变量问题<br> 解决：<br><code>export PATH=$PATH:/usr/local/php/bin</code><br>然后，再 <code>echo $PATH</code> 看看，就看见了。<br><code>usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin:/usr/local/php/bin</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装PhpStorm</title>
      <link href="/centos7-install-phpstorm/"/>
      <url>/centos7-install-phpstorm/</url>
      
        <content type="html"><![CDATA[<ul><li><p>官网下载PhpStorm最新的包<br>  <a href="https://www.jetbrains.com/phpstorm/download/#section=linux1">直达链接</a></p><ul><li>下载好后 解压<code>tar -zxf PhpStorm-版本.tar.gz</code></li><li>将解压出来的目录移动到你喜欢的目录</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv  PhpStorm  /usr/local/phpstorm</span><br><span class="line"></span><br><span class="line">cd /usr/local/phpstorm/bin</span><br><span class="line"></span><br><span class="line">chmod 777 phpstorm.sh</span><br><span class="line"></span><br><span class="line">./phpstorm.sh</span><br></pre></td></tr></table></figure></li><li><p>开始安装，根据运行提示，输入相应license<br>网上找到的   <a href="http://idea.lanyus.com/">IntelliJ IDEA 注册码</a>  感谢大佬</p><p> 给phpstorm创建环境变量，可以在命令行直接输入phpstorm命令来启动<br><code>ln -s /usr/local/phpstorm/bin/phpstorm.sh  /usr/local/bin/phpstorm</code></p></li><li><p>加入快捷方式<br>1.新建文件  <code>touch phpstorm.desktop</code></p></li></ul><p>2.编辑文件 <code>vim phpstorm.desktop</code></p><p>以下是我的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Categories=Development;</span><br><span class="line">Comment[zh_CN]=</span><br><span class="line">Comment=</span><br><span class="line">Exec=/usr/local/phpstorm/bin/phpstorm.sh</span><br><span class="line">GenericName[zh_CN]=IDE</span><br><span class="line">GenericName=IDE</span><br><span class="line">Icon=/usr/local/phpstorm/bin/phpstorm.png</span><br><span class="line">MimeType=</span><br><span class="line">Name=PHPStorm</span><br><span class="line">Path=</span><br><span class="line">StartupNotify=true</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">X-DBUS-ServiceName=</span><br><span class="line">X-DBUS-StartupType=</span><br><span class="line">X-KDE-SubstituteUID=false</span><br><span class="line">X-KDE-Username=eddie</span><br></pre></td></tr></table></figure><p>保存，退出。</p><p>3.将phpstorm.desktop移动到目录</p><p><code>sudo mv phpstorm.desktop  /usr/share/applications/</code></p><p>4、给文件添加可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/share/applications</span><br><span class="line">chmod +x phpstorm.desktop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> phpstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis 清空数据</title>
      <link href="/redis-flush/"/>
      <url>/redis-flush/</url>
      
        <content type="html"><![CDATA[<ul><li><p>flushall ——&gt; 清空整个 Redis 服务器的数据(删除所有数据库的所有 key )</p></li><li><p>flushdb ——&gt; 清空当前数据库中的所有 key</p></li></ul><p>这两个命令要慎用，毕竟数据无价，清空了就没了<br>在测试的时候 清除测试数据很方便</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> flush </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【大数据分析必备】超全国内常用API接口汇总</title>
      <link href="/common-use-api/"/>
      <url>/common-use-api/</url>
      
        <content type="html"><![CDATA[<p>下面列举了100多个国内常用API接口，并按照 笔记、出行、词典、电商、地图、电影、即时通讯、开发者网站、快递查询、旅游、社交、视频、天气、团队协作、图片与图像处理、外卖、消息推送、音乐、云、语义识别、语音识别、杂志、综合 进行了如下分类。</p><span id="more"></span><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><ul><li>OneNote - OneNote支持获取，复制，创建，更新，导入与导出笔记，支持为笔记添加多媒体内容，管理权限等。提供SDK和Demo。</li><li>为知笔记 - 为知笔记Windows客户端开放了大量的API，其中绝大部分，都通过COM提供，可以在javascript, C#, C++, Delphi等语言中使用。接口通过IDL(Interface description language)语言描述。</li><li>印象笔记 - 印象笔记提供了ActionScript 3, Android, C++, Windows, iOS, Java, JavaScript, OS X, Perl, PHP, Python, Ruby等平台的SDK和完整的API参考文档，可通过API进行认证，笔记，笔记本，附件，搜索，同步等操作，同时提供企业版和本地API。</li><li>有道云笔记 - 有道云笔记提供了Android SDK，同时Open API允许进行授权，用户，笔记本，笔记，分享，附件等方面的操作。</li></ul><h4 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h4><ul><li>滴滴 - 滴滴提供了iOS和Android SDK, 可实现拉起滴滴叫车等方面的操作。</li><li>神州专车 - 神州专车提供了API模式和H5模式两种接入模式，允许进行基础信息，订单，支付，充值，用户，发票，代金券，企业等方面的操作。</li><li>Uber - Uber提供了Android和iOS的SDK,允许进行乘客，行程体验，司机，派送次数等四大方面的操作。</li></ul><h4 id="词典"><a href="#词典" class="headerlink" title="词典"></a>词典</h4><ul><li>百度翻译 - 百度翻译支持多种语言互相翻译，包含PHP, JS, Python, C, Java版Demo。</li><li>必应词典 - 微软翻译API支持文字和语音两种类型，支持多种语言互相翻译，提供C#版本Demo。</li><li>必应词典(非官方) - 支持单词和语句翻译。 #非官方</li><li>金山词霸 - 金山词霸支持简单的翻译操作。</li><li>金山词霸(非官方) - 金山词霸允许进行简单的翻译操作。 #非官方</li><li>扇贝 - 扇贝提供了完整的API，允许进行用户，查询，添加学习记录，忘记单词，例句，笔记等方面的操作。</li><li>译云翻译 - 译云支持进行中英互译，后续会支持更多的语言。</li><li>有道词典 - 有道词典允许进行简单的翻译操作。</li><li>有道词典(非官方) - 允许进行简单的翻译操作。 #非官方</li></ul><h4 id="电商"><a href="#电商" class="headerlink" title="电商"></a>电商</h4><ul><li>当当 - 当当允许商家用户和网站接入授权，可进行商品，订单，图片，问答，店铺和促销等方面的操作。</li><li>京东 - 京东提供了Java, PHP, .net的SDK，授权后可进行多种操作。</li><li>苏宁开放服务 - 苏宁提供了Java, PHP, .Net, Python版本的SDK，授权后可进行多种操作。</li><li>淘宝开放平台 - 淘宝提供了Java, .Net, PHP, Python版本的SDK，授权后提供多种操作。</li><li>亚马逊 - 亚马逊提供多种语言版本的SDK，授权后允许多种操作。</li></ul><h4 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h4><ul><li>百度地图 - 百度地图提供了Android, iOS版本的SDK和JavaScript API，可进行定位、地图、数据、出行、鹰眼轨迹和分析服务。</li><li>高德地图 - 高德地图提供了JavaScript和web服务API，Android和iOS SDK，支持地图，定位，搜索，路线规划，导航和室内地图等。</li><li>腾讯地图 - 腾讯地图提供了JavaScript API，Android和iOS SDK，支持定位，地图，地点搜索，路线和导航等。</li><li>天地图 - 天地图提供了H5 API和JavaScript API等web API，同时提供了Android和iOS SDK，支持基础地图服务，图层管理，地图覆盖物，地图工具，地名搜索和出行规划服务。</li><li>图吧地图 - 图吧提供了JavaScript和Flash API，Android和iOS SDK，支持定位，地址解析，位置标注，位置截图，路线规划，周边查询，兴趣点搜索和在线导航。</li></ul><h4 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h4><ul><li>豆瓣电影 - 豆瓣电影支持电影条目，影人条目，搜索和榜单等。</li><li>豆瓣电影(非官方) - 获取最近热映电影、短评、影评、图片等。 #非官方</li><li>猫眼电影(非官方) - 支持查询首页电影列表，电影详情(含评论)，本地影院和影院详情，选座。 #非官方</li><li>Time时光(非官方) - 支持获取时光网网站数据。 #非官方</li><li>V电影(非官方) - 支持获取V电影网站的数据。 #非官方</li></ul><h4 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h4><ul><li>环信 - 支持Android, iOS, WebIM, Linux, REST集成，支持多种消息类型。</li><li>融云 - 支持Android, iOS, Web, 游戏集成，支持多种消息类型。</li><li>网易云信 - 支持IM实时通讯，实时音视频，教学白班，专线电话，短信，聊天室，提供iOS, Android, Windows和Web SDK。</li><li>腾讯云通信IM - 提供iOS, Android, Windows和Web SDK，支持多种消息类型。</li></ul><h4 id="开发者网站"><a href="#开发者网站" class="headerlink" title="开发者网站"></a>开发者网站</h4><ul><li>Coding - 授权后可访问coding.net网站的内容。</li><li>干货集中营 - 提供妹子图和Android, iOS, 前端，拓展资源等内容。</li><li>diycode - 授权后可访问diycode网站的内容。</li><li>开源中国 - 授权后可访问开源中国网站的内容。</li><li>Laravel China - 授权后可访问 Laravel China 网站的内容。</li><li>Ruby China - 授权后可访问Ruby China网站的内容。</li><li>V2EX - 可访问V2EX网站的内容。</li></ul><h4 id="快递查询"><a href="#快递查询" class="headerlink" title="快递查询"></a>快递查询</h4><ul><li>Trackingmore - Trackingmore目前支持400多家国内外快递商，免费版有使用次数限制。</li><li>快递100 - 快递100支持300家国内国际快递，免费版有使用次数限制。</li><li>快递100(非官方) - 快递100支持300家国内国际快递。 #非官方</li></ul><h4 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h4><ul><li>12306(非官方) - 支持获取12306火车票票数、票价查询。 #非官方</li><li>去哪儿 - 支持获取去哪儿网的内容。</li><li>途牛 - 支持途牛网的内容，仅开放给供应商系统。</li><li>途牛火车票(非官方) - 支持获取途牛火车票票数、票价查询。 #非官方</li><li>携程 - 支持携程网的内容。</li><li>艺龙 - 支持获取产品数据，完成用户的预订，进行订单查询、更改或取消。提供在线工具，以及H5, Java, C#, PHP, Ruby版本的Demo。</li></ul><h4 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h4><ul><li>钉钉 - 支持免登，企业通讯录，服务窗，钉盘，地图，会话，DING，电话，音频，扫码，支付，分享等服务，提供SDK和Demo，PC版UI规范，调试工具和钉钉UI组件库。</li><li>豆瓣 - 支持图书，电影，音乐，同城，广播，用户，日记，相册，线上活动，论坛，回复和我去等功能，提供豆瓣组件，豆瓣标示和Demo。</li><li>开心网 - 支持用户信息，登录授权，好友，传播应用，支付，分享内容，消息，交互，开心网应用等内容，提供SDK，开源插件和标示素材。</li><li>QQ互联 - 支持用户资料，QQ会员信息，空间相册，腾讯微博资料，分享到腾讯微博，微博好友信息，财付通信息等内容，提供SDK, Demo, 以及设计资源。</li><li>微博 - 支持粉丝服务，微博，评论，用户，关系，账号，收藏，搜索，提醒，短链，公共服务，位置服务，地理信息，地图引擎，支付以及OAuth2.0授权等内容，提供微博标示及SDK。</li><li>微信 - 支持移动应用，网站应用，公众账号，公众号第三方平台等内容，提供SDK, Demo, 以及设计资源。</li></ul><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul><li>爱奇艺 - 支持弹幕，全色彩播放器，高清码流，视频托管，播放爱奇艺视频，应用分发，IOCP等内容。</li><li>Bilibili(非官方) - 支持登录，我的信息，番剧专题，视频&#x2F;专题收藏、关注，番剧，弹幕等。 #非官方</li><li>Bilibili(非官方) - 支持获取Bilibili网站数据。#非官方</li><li>乐视 - 支持标准直播，标准点播，视频发行平台，移动直播等内容，提供SDK下载。</li><li>内涵段子(非官方) - 支持获取内涵段子中大部分模块信息。 #非官方</li><li>搜狐视频 - 支持一二级内容获取，内容分类获取，视频详情信息，专辑详情信息，分级列表获取，关键词搜索等内容。</li><li>土豆 - 支持视频模块，豆单模块，影视库模块，用户模块，转帖模块，字段定义模块等内容。</li><li>优酷 - 支持内容输出，视频搜索，智能推荐，用户登录，用户互动，用户信息，视频上传至优酷，视频互动等内容，提供SDK。</li></ul><h4 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h4><ul><li>彩云天气 - 支持全球天气数据，两种空气质量数据，天气预报，实况天气，独家降水预报，独家空气质量预报，六种天气数据，四种生活指数数据等内容，部分功能收费。</li><li>和风天气 - 支持7-10天预报，实况天气，每小时预报，生活指数，灾害预警，景点天气，历史天气，城市查询等内容，仅国内数据免费。</li><li>魅族天气(非官方) - 支持获取魅族天气。 #非官方</li><li>小米天气(非官方) - 支持获取小米天气数据。 #非官方</li><li>心知天气 - 支持天气实况，逐日预报和历史，24小时逐小时预报，过去24小时天气历史记录，气象灾害预警，空气质量实况与城市排行，逐日和逐小时空气质量预报，过去24小时空气质量历史记录，生活指数，农历、节气、生肖，机动车尾号限行，日出日落，月初月落和月像，城市搜索等内容，仅国内数据免费。</li><li>中央天气预报(非官方) - 支持获取中央天气预报数据。 #非官方</li></ul><h4 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h4><ul><li>Teambition - 支持详细的文档说明，部分平台提供demo。</li></ul><h4 id="图片与图像处理"><a href="#图片与图像处理" class="headerlink" title="图片与图像处理"></a>图片与图像处理</h4><ul><li>别样网 - 无版权免费大尺寸图片共享平台。</li><li>Bing每日壁纸(非官方) - 支持图片URL和图片描述，可获取不同地区的数据。 #非官方</li><li>Camera360 - 支持全帧率直播美白滤镜，提供SDK和Demo。</li><li>嗨图 - 支持图片标注，仅提供iOS版本SDK。</li><li>名片全能王 - 支持精准识别几十种语言的名片，自动切边并美化名片图像，自动返回识别结果，提供多种版本SDK，收费。</li><li>pixabay - 在所有的图像和视频Pixabay释放自由版权下创作共用CC0。你可以下载、修改、分发，并使用它们在任何你喜欢的任何东西，即使在商业应用程序中使用它们。不需要归属权。</li><li>企业证件识别 - 支持身份证，驾驶证，护照等，收费。</li><li>扫描全能王 - 支持图像智能剪裁，五种图像增强模式，手动调节图像细节，自动返回扫描结果等，提供iOS与Android版本SDK，收费。</li><li>我知图 - 支持相似图像搜索，图像识别匹配，图像识别关键词推荐，重复图片探测等内容。</li><li>银行卡|信用卡识别 - 提供SDK和API，收费。</li></ul><h4 id="外卖"><a href="#外卖" class="headerlink" title="外卖"></a>外卖</h4><ul><li>百度外卖 - 支持商户，菜品，商品，订单和基础数据等内容，提供SDK和Demo。</li><li>大众点评 - 支持商户，团购，在线预定，商品点评，数据统计，元数据等内容。</li><li>饿了么 - 支持查询，预定，订单，其他订单，数据推送，支付，评价，活动，账户同步，数据落地同步等内容。</li><li>美团外卖 - 支持门店，配送范围，菜品，药品，订单，订单推送等内容。</li></ul><h4 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h4><ul><li>百度云推送 - 支持iOS, Android和服务器端，支持推送，统计，组管理等Rest API接口。服务器端支持Java, Python, PHP, REST API。提供所支持各语言版本的SDK。</li><li>华为推送 - 支持Android，提供SDK。</li><li>极光 - 支持Android, iOS, WindowsPhone, 服务器端REST API, 提供Java, Python, PHP, Ruby, C#, Node.js等版本的SDK。</li><li>LeanCloud - 支持Android, iOS, WindowsPhone和Web网页推送，使用云引擎和JavaScript创建推送，使用REST API推送消息。提供Objectvie-C(开放源码), JavaScript(开放源码), Android, Unity, .Net, WindowsPhone, Java(开放源码), Python(开放源码), PHP(开放源码), C++(开放源码), Swift(开放源码)版本SDK。同时提供Demo。</li><li>腾讯信鸽 - 支持iOS和Android平台，服务器端采用Rest API, 同时服务器端支持Java, PHP, Python等语言并提供SDK。</li><li>小米 - 支持Android和iOS平台，服务器端支持Java, Python并提供SDK。</li><li>友盟 - 支持Android和iOS平台，服务器端支持PHP, Java, Python并提供SDK。</li></ul><h4 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h4><ul><li>百度音乐(非官方) - 支持频道歌曲列表，专辑的歌曲列表，歌曲的详细信息，歌手专辑信息，搜索，歌手的所有歌曲，排行榜，所有专辑，所有歌手，歌手的专辑列表，歌手信息，歌词搜索，歌曲文件详细信息。 #非官方</li><li>豆瓣音乐 - 支持音乐信息，评论信息，标签信息，搜索音乐，某个音乐中标记最多的标签，发表、修改、删除评论，用户对音乐的所有标签等内容。</li><li>考拉FM - 支持获取指定分类下列表和内容，搜索指定关键字内容，专辑&#x2F;电台&#x2F;直播详情，指定专辑下列表，指定电台播单，分类下专辑TOP50，指定期(碎片)所在专辑最新分页功能，分类下全部直播计划，版本升级接口，排行榜，精选，传统电台列表&#x2F;详情&#x2F;地区等。</li><li>酷狗音乐(非官方) - 支持搜索，各种排行榜，歌手专辑信息，下载和获取播放地址。 #非官方</li><li>企鹅FM - 支持获取电台分类列表，电台分类下的专辑信息列表，专辑下节目信息列表，电台节目播放链接，搜索关键字相关主播&#x2F;专辑&#x2F;节目，主播名下专辑，特定时间段内新增主播&#x2F;更新的专辑&#x2F;新增的专辑等。</li><li>QQ音乐(非官方) - 支持歌曲榜单，歌曲&#x2F;歌词地址，歌曲图片。 #非官方</li><li>蜻蜓FM - 支持OAuth2.0授权，音频数据中心，分类，点播，直播，临时直播，排行榜，搜索，内容更新状态，主播，此刻，专题，活动等内容。</li><li>网易云音乐(非官方) - 支持获取用户歌单，歌单详情，歌曲URL。 #非官方</li><li>喜马拉雅FM - 支持Android和iOS平台，并提供相应的SDK和Demo，具体支持内容请下载相关文件查看。</li></ul><h4 id="云"><a href="#云" class="headerlink" title="云"></a>云</h4><ul><li>阿里云 - 支持弹性计算，数据库，存储与CDN，网络，应用服务，域名与网站等类别的内容，并提供了相关SDK。</li><li>百度云 - 支持计算和网络，存储和CDN，数据库，安全和管理，数据分析，智能多媒体服务，物联网服务，人工智能，应用服务，网站服务，数字营销服务等内容，并提供相关的SDK。</li><li>Bmob - 支持云数据库，容器服务，消息推送，文件存储，短信验证码，及时通讯，云端逻辑，定时任务，地理位置等。</li><li>LeanCloud - 支持云存储，数据分析，用户关系，实时通讯，消息推送，移动统计等。</li><li>七牛云 - 支持对象存储，融合CDN，直播云，数据处理等。</li><li>腾讯云 - 支持计算，网络，存储与CDN，数据库，安全服务，监控与管理，域名服务，视频服务，大数据与AI等内容，提供相关SDK。</li><li>野狗 - 支持实时数据同步，实时视频通话，及时通讯，短信，身份认证等。</li></ul><h4 id="语义识别"><a href="#语义识别" class="headerlink" title="语义识别"></a>语义识别</h4><ul><li>BosonNLP玻森 - 支持REST API并提供Python SDK。</li><li>腾讯文智 - 支持词法类，句法类，篇章类，下载类API，目前平台能识别类别囊括了求职招聘、影视、音乐、健康养生、财经、广告推广、犯罪、政治等90多个类别，且算法支持快速迭代更新已有类别及增加新类别。提供Python SDK。</li></ul><h4 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h4><ul><li>百度语音 - 支持全平台REST API, 离线在线融合模式，深度语义解析，场景识别定制，自定义上传语料、训练模型，基础服务永久免费。提供相应SDK和Demo应用。</li><li>搜狗语音云开放平台 - 支持在线&#x2F;离线语音识别，在线听歌识曲，离线语音合成等内容。提供相应平台SDK。</li><li>讯飞开放平台 - 支持语音听写&#x2F;转写，在线&#x2F;离线命令词识别，语音唤醒等内容，平台支持广泛，提供相应SDK。</li></ul><h4 id="杂志"><a href="#杂志" class="headerlink" title="杂志"></a>杂志</h4><ul><li>豆瓣一刻(非官方) - 支持获取指定日期文章列表，栏目总览，推荐作者，作者信息，作者更多文章信息，栏目文章列表及翻页，文章评论及热门评论列表。 #非官方</li><li>开眼(非官方) - 支持获取未登录状态下开眼精选、发现、关注信息。 #非官方</li><li>One一个(非官方) - 支持获取首页图片，文章，音乐及电影。 #非官方</li><li>图虫(非官方) - 支持获取图虫 app 所有信息。 #非官方</li><li>一席(非官方) - 支持获取一席主页、演讲、讲者、枝桠等内容 #非官方</li><li>知乎日报(非官方) - 支持获取界面启动图像，软件版本查询，最新消息，消息内容获取与离线下载，过往消息，新闻额外消息，新闻对应长&#x2F;短评论查看，主题日报列表，主题日报内容，热门消息，栏目总览，栏目具体消息，新闻的推荐者，某个专栏之前的新闻，Editor的主页等。 #非官方</li><li>知乎专栏(非官方) - 支持获取指定专栏的信息，指定专栏的文章列表，指定的文章内容，评论列表，点赞信息。 #非官方</li></ul><h4 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h4><ul><li>阿凡达数据 - 支持金融股票，充值认证，便民类，新闻文章，医药交通，科教文艺，创意数据，及时通讯等内容。</li><li>阿里大于 - 支持验证码，短信通知，语音通知，流量钱包充值，私密专线，群发助手等内容。</li><li>APiX - 支持基础征信数据，信用分析服务，支付缴费接口等数据，部分免费。</li><li>百度API STORE - 支持多种类型数据，提供SDK。</li><li>HaoService - 支持多种类型数据。</li><li>聚合数据 - 支持多种类型数据，部分免费。</li><li>通联数据 - 提供金融类数据，支持免费试用。</li></ul><p>同学，还不快收藏起来，以后备用？</p><p>原文发布于微信公众号 - IT派（transfer_3255716726） <a href="https://cloud.tencent.com/developer/article/1170731">文章直达链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用CSS改变图片颜色的100种方法！</title>
      <link href="/css-change-color/"/>
      <url>/css-change-color/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>“说到对图片进行处理，我们经常会想到PhotoShop这类的图像处理工具。作为前端开发者，我们经常会需要处理一些特效，例如根据不同的状态，让图标显示不同的颜色。或者是hover的时候，对图片的对比度，阴影进行处理。”</p><p>本文略长，请耐心阅读</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUeOr6qcW9OXbqYp4pribI0vx3TtBIjzA2sBdt4uIdiaseoBs7lNkia8qEQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>你以为这些是经过PS软件处理出来的？不不不，纯粹的是用css写出来的，很神奇把。 </p><span id="more"></span><h3 id="强大的-CSS-filter"><a href="#强大的-CSS-filter" class="headerlink" title="强大的 CSS:filter"></a>强大的 CSS:filter</h3><p>CSS滤镜（filter）属提供的图形特效，像模糊，锐化或元素变色。过滤器通常被用于调整图片，背景和边界的渲染。 MDN</p><p>CSS标准里包含了一些已实现预定义效果的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filter: none        </span><br><span class="line">    | blur() </span><br><span class="line">    | brightness() </span><br><span class="line">    | contrast() </span><br><span class="line">    | drop-shadow() </span><br><span class="line">    | grayscale() </span><br><span class="line">    | hue-rotate() </span><br><span class="line">    | invert() </span><br><span class="line">    | opacity() </span><br><span class="line">    | saturate() </span><br><span class="line">    | sepia() </span><br><span class="line">    | url();</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUeVNib7icTbV168s8DxUlOIXiawZ1ich0zEic1RPjTGKRmy0LcbhpS6aHZnA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="filter-none"><a href="#filter-none" class="headerlink" title="filter: none"></a><strong>filter: none</strong></h4><p>没有任何效果，默认filter就为none</p><h4 id="filter-blur-高斯模糊"><a href="#filter-blur-高斯模糊" class="headerlink" title="filter:blur( ) 高斯模糊"></a><strong>filter:blur( ) 高斯模糊</strong></h4><p>给图像一个高斯模糊效果，length值越大，图像越模糊</p><p>我们来尝试一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">blur</span>(<span class="number">2px</span>);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUwkn2iapNGGZ11rlSnf5udoephrtsPnOS31DeicuwNQFibYwribToRUwibDw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="brightness-线性乘法"><a href="#brightness-线性乘法" class="headerlink" title="brightness(%) 线性乘法"></a><strong>brightness(%) 线性乘法</strong></h4><p>可以让图片看起来更亮或者更暗</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">brightness</span>(<span class="number">70%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUsSQJ4BJ9OdW1uibC5uBWSOoNfLzGQU6icuSO85esibibYMMOgqysM51Lag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="contrast-对比度"><a href="#contrast-对比度" class="headerlink" title="contrast(%) 对比度"></a><strong>contrast(%) 对比度</strong></h4><p>调整图像的对比度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">contrast</span>(<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUb4epYBZZzP4SqibDILaNopvrpa7FSHlV2hsonicrvSLFmPKUbJOW1gbg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="drop-shadow-h-shadow-v-shadow-blur-spread-color"><a href="#drop-shadow-h-shadow-v-shadow-blur-spread-color" class="headerlink" title="drop-shadow(h-shadow v-shadow blur spread color)"></a><strong>drop-shadow(h-shadow v-shadow blur spread color)</strong></h4><p>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的，可以以特定颜色画出的遮罩图的偏移版本。 函数接受<shadow>(在CSS3背景中定义)类型的值，除了”inset”关键字是不允许的。该函数与已有的box-shadow box-shadow属性很相似；不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速</p><p>利用这个方案，我们其实改变类似于一些图标的颜色，比如黑色的图标变成蓝色的图标。</p><p>PNG格式小图标的CSS任意颜色赋色技术</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">705px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#ccc</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们将图片投影形成一个同等大小的灰色区域。 </p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUeKYTUonMmib7d3VWD99lOwWL4QH6mAcKNsTYo4y22asbFwOCicoGMq1A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="hue-rotate-deg-色相旋转"><a href="#hue-rotate-deg-色相旋转" class="headerlink" title="hue-rotate(deg) 色相旋转"></a><strong>hue-rotate(deg) 色相旋转</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">hue-rotate</span>(<span class="number">70deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看，我的小姐姐变成了阿凡达！ </p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUDap70z7gcQrjwM967vCqMTqKfX0IKgG2hnlJarciaVLKuVnlZlWv0mQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="invert-反转"><a href="#invert-反转" class="headerlink" title="invert(%) 反转"></a><strong>invert(%) 反转</strong></h4><p>这个函数的作用是反转输入图像，有点像曝光的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">invert</span>(<span class="number">100%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUUk46UqCicvibM896s5TzsyibmWcQzOiaH0hhyZZVsFJ03AP4Xs9OdpOP7g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="grayscale-将图像转换为灰度图像"><a href="#grayscale-将图像转换为灰度图像" class="headerlink" title="grayscale(%) 将图像转换为灰度图像"></a><strong>grayscale(%) 将图像转换为灰度图像</strong></h4><p>这个效果可以将图片做旧，有一种时代沧桑感。喜欢古风的人一定会喜欢上这个效果的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">grayscale</span>(<span class="number">80%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUBWpx9JZbZ4DQ0AV0iaSE5IFNnCcgicXE9OHibMZF0zz7wmXrchcylFUuw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>除了古风还有一种用法是有的时候需要将全站变成灰色，如大屠杀纪念日的时候。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQU1icGCC9gLMnQf7H3xyZXmb06l3bO0TzVDlbRN3ibZouR9TJ8FGibnltYg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>可以这样设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="sepia-将图像转换为深褐色"><a href="#sepia-将图像转换为深褐色" class="headerlink" title="sepia(%) 将图像转换为深褐色"></a><strong>sepia(%) 将图像转换为深褐色</strong></h4><p>下面给我的小姐姐一个暖暖的色调。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">sepia</span>(<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQU0PjA1V9M2RLHRnONrYHF6X6nmDRfdSUVBiaTb8jYtUaSoYvsAcAy59A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>大家是不是发现我并没有把url()方法写到这上面来</p><p>没错，因为我想把这个内容放到最后来说，filter:url()就是css滤镜改变图片的终极方法。CSS:filter可以导入一个svg滤镜，作为他自己的滤镜。</p><h3 id="终极变色解决方案！-filter-url"><a href="#终极变色解决方案！-filter-url" class="headerlink" title="终极变色解决方案！ filter:url();"></a>终极变色解决方案！ filter:url();</h3><p>为什么说filter:url()是图片变色的终极解决方案呢，请容我慢慢道来。</p><p>我们先科普一下PS的工作原理，我们都知道网页是有三原色的R(红) G(绿) B(蓝)，常见的RGBA还包括一个opicity值，而opcity值是根据alpha通道计算出来的。也就是说，我们见到的网页的每一个像素点都是由红蓝绿再加alpha四个通道组成，每一个通道我们称之为色板，PS中的8位板的意思就是2的八次方256，意思就是每一个通道的取值范围都是(0-255) –SVG 研究之路 (11) - filter:feColorMatrix</p><p>如果我们可以改变每个通道的值是不是就能完美的得到我们想要的任意颜色了呢，原理上，我们可以像ps那样利用svg滤镜得到任何我们想要的图像，不仅仅是变色。我们甚至可以凭空生成一幅图像。</p><h4 id="svg-feColorMatrix大法好"><a href="#svg-feColorMatrix大法好" class="headerlink" title="svg feColorMatrix大法好"></a><strong>svg feColorMatrix大法好</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg height=&quot;0&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;filter id=&quot;change&quot;&gt;</span><br><span class="line">                &lt;feColorMatrix type=&quot;matrix&quot; values=&quot;</span><br><span class="line">                0 0 0 0 0.55</span><br><span class="line">                0 0 0 0 0.23 </span><br><span class="line">                0 0 0 0 0 </span><br><span class="line">                0 0 0 0 1&quot; /&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line">&lt;img src=&quot;https://note.youdao.com/yws/res/237/WEBRESOURCE7e77df2551fe1a1db1b9d91f4d518917&quot; alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">url</span>(<span class="string">#change</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过单通道我们可以将图片变成单一的颜色 </p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUyvOI2vOpnycBHHdHt7CXS3rkXdkF9iaguiaOW0cWdKRKm1l56ibUNxic9w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg height=&quot;0&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;filter id=&quot;change&quot;&gt;</span><br><span class="line">               &lt;feColorMatrix values=&quot;3 -1 -1 0 0</span><br><span class="line">                       -1 3 -1 0 0</span><br><span class="line">                       -1 -1 3 0 0</span><br><span class="line">                       0 0 0 1 0&quot; /&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">&lt;/svg&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过双通道我们可以的到一些非常炫酷的PS效果</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUvq9Zp4iacyDMAdumibkHv9NyMDMvvwoyRZ4jHtpeI7uqUvQwgAwfTVfA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>当然，在这里，只是举个例子，通过配置矩阵中的值，我们可以配置每一个像素点的值按照我们定义的规则显示</p><p>我们在这里详细讲一下feColorMatrix 矩阵的计算方式</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUvxHazaibz58acaSZGoicicbKxE9iawv6ViaiaCkaUSnHXwob8uwJ82g10wuQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><p>其中Rin Gi</p><p>n Bin a(alpha) 为原始图片中每个像素点的rgba值</p><p>通过矩阵计算，得到的Rout Gout Bout Aout就是最终显示出来的rgba值。</p><h4 id="将图片转为单色-拿棕色rgba-140-59-0-1-作为例子"><a href="#将图片转为单色-拿棕色rgba-140-59-0-1-作为例子" class="headerlink" title="将图片转为单色 拿棕色rgba(140,59,0,1)作为例子"></a>将图片转为单色 拿棕色rgba(140,59,0,1)作为例子</h4><p>根据上面的公式，我们可以简化一些计算，同一行中，只设置一个通道的值，其他通道为0</p><p>不难得出矩阵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 0 目标值R</span><br><span class="line">0 0 0 0 目标值G</span><br><span class="line">0 0 0 0 目标值B</span><br><span class="line">0 0 0 0 1</span><br></pre></td></tr></table></figure><p>根据规则，只需要计算，255&#x2F;想要显示的颜色对应通道 &#x3D; 目标值</p><p>我们想要的棕色rgba(140,59,0,1) 换算成色板 rgba 为 140 59 0 255</p><p>可以算出目标值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 0 0.55</span><br><span class="line">0 0 0 0 0.23</span><br><span class="line">0 0 0 0 0 </span><br><span class="line">0 0 0 0 1</span><br></pre></td></tr></table></figure><h4 id="多通道设置出炫酷的效果来"><a href="#多通道设置出炫酷的效果来" class="headerlink" title="多通道设置出炫酷的效果来"></a>多通道设置出炫酷的效果来</h4><p>就如同之前我们看到的双通道形成的炫酷图片一般</p><blockquote><p>我們今天要把圖片的飽和度提高，該怎麼做呢？首先當然是想想飽和度的成因，就是紅的越紅，藍的越藍，綠的越綠，由這個成因出發，我們的矩陣就可以寫成下面的樣子，看到矩陣當中出現了 3 和 -1，一定會很那悶這是怎麼來的，箇中原理其實很容易理解，讓我們假設某一個像素的 RGB 分別是 (200&#x2F;255),(100&#x2F;255),(50&#x2F;255)，呈現的應該是有點暗沉的橘色，經過矩陣的換算，R 變成了 200&#x2F;255x3-100&#x2F;255-50&#x2F;255&#x3D; 1.76, G 變成 200&#x2F;255x(-1)+100&#x2F;255*3-50&#x2F;255&#x3D;0.2，B 變成 200x(-1)+100x(-1)+50x3&#x3D;-0.59，因此 RGB 轉換後就是：200x1.76,100x0.2,50x-0.5。SVG 研究之路 (11) - filter:feColorMatrix</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg height=&quot;0&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line">    &lt;defs&gt;</span><br><span class="line">        &lt;filter id=&quot;change&quot;&gt;</span><br><span class="line">               &lt;feColorMatrix values=&quot;3 -1 -1 0 0</span><br><span class="line">                       -1 3 -1 0 0</span><br><span class="line">                       -1 -1 3 0 0</span><br><span class="line">                       0 0 0 1 0&quot; /&gt;</span><br><span class="line">        &lt;/filter&gt;</span><br><span class="line">    &lt;/defs&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><h4 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h4><p>除了feColorMatrix svg滤镜还有很多的方法可以定义滤镜，他们同样可以作用到图片上。由于篇幅限制，这里就不详细展开了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>css3提供了filter这个属性，使得通过前端技术实现更多炫酷的特效成为了可能</p></li><li><p>依赖于svg的滤镜，我们可以实现复杂的滤镜效果</p></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>css：filter与ie上的filter并不是相同的概念</p></li><li><p>css:filter在不同的浏览器上兼容性不一样，您在使用的时候需要注意浏览器的兼容性 </p></li><li><p><img src="https://mmbiz.qpic.cn/mmbiz_png/12mPmHVcSulMDl8IsL3PkRVPHH5eFHQUE6C2hjmt3YHfkqexOOKAiaYf9WJp83GyvhGvDD2sVDbyXFSeeKbIh4g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><p>SVG 研究之路 (11) - filter:feColorMatrix</p></li><li><p>css:filter MDN</p></li><li><p>Color Filters Can Turn Your Gray Skies Blue</p></li><li><p>PNG格式小图标的CSS任意颜色赋色技术</p></li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本次源码我已经放在了<a href="https://codepen.io/nanhupatar/pen/eLQoVM">codePen</a>上 欢迎查看</p><p>文章难免会有疏漏，希望大家能够指正批评</p><p>原文出处： <a href="https://mp.weixin.qq.com/s/_8vpfui02sW7DFG-1TXnsw">前端指南</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 入门 - 3（集合 set、有序集合 sort set）</title>
      <link href="/redis-introduction-3/"/>
      <url>/redis-introduction-3/</url>
      
        <content type="html"><![CDATA[<p>集合 set、有序集合sort set</p><span id="more"></span><h3 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h3><blockquote><p>集合，是一组无序且唯一的数据集。<br>在实际应用中，可以应用于“标签”、“属性”，这类需经常扩展或组合查询的场景</p></blockquote><ul><li><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果元素已存在，则忽略该命令（该命令具有批量功能）。返回成功加入的元素数量</span></span><br><span class="line">SADD key_name member [other members]</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除元素（该命令具有批量功能）。返回删除成功的个数</span></span><br><span class="line">SREM key_name member [other members]</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取全部"><a href="#获取全部" class="headerlink" title="获取全部"></a>获取全部</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回集合下的所有元素</span></span><br><span class="line">SMEMBERS key_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存在返回 1，不存在返回 0</span></span><br><span class="line">SISMEMBER key_name member</span><br></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><ul><li><h4 id="去同"><a href="#去同" class="headerlink" title="去同"></a>去同</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 key_name1 中剔除 key_name2 中相同元素的部分</span></span><br><span class="line">SDIFF key_name1 key_name2 [其他 keys]</span><br></pre></td></tr></table></figure><ul><li><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 key_name1 和 key_name2 的交集</span></span><br><span class="line">SINTER key_name1 key_name2 [其他 keys]</span><br></pre></td></tr></table></figure><ul><li><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 key_name1 和 key_name2 的并集</span></span><br><span class="line">SUNION key_name1 key_name2 [其他 keys]</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取元素个数"><a href="#获取元素个数" class="headerlink" title="获取元素个数"></a>获取元素个数</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回元素个数</span></span><br><span class="line">SCARD key_name</span><br></pre></td></tr></table></figure><h3 id="集合运算并存储结果"><a href="#集合运算并存储结果" class="headerlink" title="集合运算并存储结果"></a>集合运算并存储结果</h3><ul><li><h4 id="去同-1"><a href="#去同-1" class="headerlink" title="去同"></a>去同</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果存储在 destination 键中，可用于多步集合运算</span></span><br><span class="line">SDIFFSTORE destination key_name [key_names...]</span><br></pre></td></tr></table></figure><ul><li><h4 id="交集-1"><a href="#交集-1" class="headerlink" title="交集"></a>交集</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SINTERSTORE destination key_name [key_names...]</span><br></pre></td></tr></table></figure><ul><li><h4 id="并集-1"><a href="#并集-1" class="headerlink" title="并集"></a>并集</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUNIONSTORE destination key_name [key_names ...]</span><br></pre></td></tr></table></figure><ul><li><h4 id="随机获取元素"><a href="#随机获取元素" class="headerlink" title="随机获取元素"></a>随机获取元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无 count 时，随机获取一个元素</span></span><br><span class="line"><span class="comment">// count &gt; 0 时，随机获取 count 个不重复的元素，如果 count 大于集合元素数时，返回全部</span></span><br><span class="line"><span class="comment">// count &lt; 0 时，随机获取 |count| 个元素（可能重复）</span></span><br><span class="line">SRANDMEMBER key_name [count]</span><br></pre></td></tr></table></figure><ul><li><h4 id="弹出一个元素"><a href="#弹出一个元素" class="headerlink" title="弹出一个元素"></a>弹出一个元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机选择一个元素弹出</span></span><br><span class="line">SPOP key_name</span><br></pre></td></tr></table></figure><h3 id="有序集合（Sort-set）"><a href="#有序集合（Sort-set）" class="headerlink" title="有序集合（Sort set）"></a>有序集合（Sort set）</h3><blockquote><p>有序集合，同集合一致，但为每个元素关联了一个分数，使我们能够获得分数最高或最低的前 N 个元素，当然也可按范围获取元素<br>但有序集合更加消耗内存，读取任意位置的数据都会很快，更加便捷的排序调整</p></blockquote><ul><li><h4 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回新加入集合的元素个数</span></span><br><span class="line"><span class="comment">// score 可以为 integer 或 float，也可为 -inf（负无穷）或 +inf（正无穷）</span></span><br><span class="line">ZADD key_name score member [other scores members]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新，将原 member 的 score 调整为 new_score</span></span><br><span class="line">ZADD key_name new_score member</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除一个或多个元素"><a href="#删除一个或多个元素" class="headerlink" title="删除一个或多个元素"></a>删除一个或多个元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回成功删除的元素个数</span></span><br><span class="line">ZREM key_name memeber [other members]</span><br></pre></td></tr></table></figure><ul><li><h4 id="获得元素的分数"><a href="#获得元素的分数" class="headerlink" title="获得元素的分数"></a>获得元素的分数</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回分数</span></span><br><span class="line">ZSCORE kye_name member</span><br></pre></td></tr></table></figure><ul><li><h4 id="获得排名在某个范围的元素列表"><a href="#获得排名在某个范围的元素列表" class="headerlink" title="获得排名在某个范围的元素列表"></a>获得排名在某个范围的元素列表</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先按照分数从小到大排序</span></span><br><span class="line"><span class="comment">// （如果元素的分数相同，则对 member 按照字典顺序排列 “0”&lt;...“9”&lt;“A”&lt;...“Z”&lt;“a”...&lt;“z”）</span></span><br><span class="line"><span class="comment">// 再根据索引（0 开始）结合 start 和 end 的要求返回元素</span></span><br><span class="line"><span class="comment">// 当加上 WITHSCORE 时，同时返回分数 </span></span><br><span class="line">ZRANGE key_name start end [WITHSCORE]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照分数从大到小，其他同 ZRANGE</span></span><br><span class="line">ZREVRANGE key_name start end [WITHSCORE]</span><br></pre></td></tr></table></figure><ul><li><h4 id="获得指定分数范围的元素"><a href="#获得指定分数范围的元素" class="headerlink" title="获得指定分数范围的元素"></a>获得指定分数范围的元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先会对 key_name 按从小到大排列</span></span><br><span class="line"><span class="comment">// 返回分数在 min 和 max 之间的元素（注意：包含 min 和 max）</span></span><br><span class="line">ZRANGEBYSCORE key_name min max [WITHSCORE] [LIMIT offset count]</span><br><span class="line"></span><br><span class="line"><span class="comment">// LIMIT 可在检索的结果中，偏移（往后数）offset 个位置，取 count 个元素</span></span><br><span class="line"><span class="comment">// 在 students 集合中获取分数为 70 ~ 100 分之间，并跳过前 2 个，取 3 个元素</span></span><br><span class="line">ZRANGEBYSCORE students <span class="number">70</span> <span class="number">100</span> WITHSCORE LIMIT <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不希望包含 min 或 max 时，使用“(”（同数学中的集合符号，( 不包含，[ 包含）</span></span><br><span class="line">ZRANGEBYSCORE key_name <span class="number">80</span> (<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按从大到小排列，其他一致</span></span><br><span class="line">ZREVRANGEBYSCORE key_name min max [WITHSCORE] [LIMIT offset count]</span><br></pre></td></tr></table></figure><ul><li><h4 id="调整某个元素的分数"><a href="#调整某个元素的分数" class="headerlink" title="调整某个元素的分数"></a>调整某个元素的分数</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给元素增加 increment 的分值，返回更改后的分数</span></span><br><span class="line"><span class="comment">// increment 可以为正（加），也可以为负（减）</span></span><br><span class="line"><span class="comment">// 如果指定元素不存在，则先创建，初始化为 0，再调整</span></span><br><span class="line">ZINCRBY key_name increment member</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取集合中元素的数量"><a href="#获取集合中元素的数量" class="headerlink" title="获取集合中元素的数量"></a>获取集合中元素的数量</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回个数</span></span><br><span class="line">ZCARD key_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="获得指定分数范围内的元素个数"><a href="#获得指定分数范围内的元素个数" class="headerlink" title="获得指定分数范围内的元素个数"></a>获得指定分数范围内的元素个数</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同 ZRANGEBYSOCRE 中的 min 和 max 一致</span></span><br><span class="line"><span class="comment">// 包含 min 和 max，不包含的话，可以使用“(”</span></span><br><span class="line">ZCOUNT key_name min max</span><br></pre></td></tr></table></figure><ul><li><h4 id="按照排名范围删除元素"><a href="#按照排名范围删除元素" class="headerlink" title="按照排名范围删除元素"></a>按照排名范围删除元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先从小到大排列，再根据索引位置，删除 start 和 end 间的所有元素（注意：包含 start 和 end）</span></span><br><span class="line"><span class="comment">// 返回删除元素个数</span></span><br><span class="line">ZREMRANGEBYRANK key_name start end</span><br></pre></td></tr></table></figure><ul><li><h4 id="按照分数范围删除元素"><a href="#按照分数范围删除元素" class="headerlink" title="按照分数范围删除元素"></a>按照分数范围删除元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除分数范围内的所有元素</span></span><br><span class="line">ZREMRANGEBYSCORE key_name min max</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取元素的排名"><a href="#获取元素的排名" class="headerlink" title="获取元素的排名"></a>获取元素的排名</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从小到大排列，返回索引值（0 开始）</span></span><br><span class="line">ZRANK key_name member</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从大到小排列，返回索引值（0 开始）</span></span><br><span class="line">ZREVRANK key_name member</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://p5tq1m3a9.bkt.clouddn.com/hexo_blog/static/redis3.jpg" alt="总结"></p><p><a href="https://laravel-china.org/articles/8103/redis-introduction-1-basic-key-operation">转</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> set </tag>
            
            <tag> sort set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 入门 - 2（散列 + 列表）</title>
      <link href="/redis-introduction-2/"/>
      <url>/redis-introduction-2/</url>
      
        <content type="html"><![CDATA[<p>Hash、List 最基本的结构化数据类型</p><span id="more"></span><h3 id="散列（Hash）"><a href="#散列（Hash）" class="headerlink" title="散列（Hash）"></a>散列（Hash）</h3><blockquote><p>散列，是种“键 + 字段 + 字段值”的数据结构。实际应用上，可以用它将一个“大块”的内容，分割为一个个的“小块”内容，进而提高效率和性能，减少运行时的资源浪费</p></blockquote><p>所有散列命名均以 “H” 开头</p><ul><li><h4 id="设定与获取"><a href="#设定与获取" class="headerlink" title="设定与获取"></a>设定与获取</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 设定散列的 key + field + value</span><br><span class="line"></span><br><span class="line">// 注意：field_value 只能是字符串，当然不支持类型嵌套</span><br><span class="line">HSET key_name field_name field_value</span><br><span class="line"></span><br><span class="line">// 获取散列的 key with field</span><br><span class="line">HGET key_name field_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="批量设定与批量获取"><a href="#批量设定与批量获取" class="headerlink" title="批量设定与批量获取"></a>批量设定与批量获取</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 批量设定</span><br><span class="line">HMSET key_name field_name1 field_value1 field_name2 field_value2 ...</span><br><span class="line"></span><br><span class="line">// 批量获取</span><br><span class="line">HMGET key_name field_name1 field_name2 ...</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取全部"><a href="#获取全部" class="headerlink" title="获取全部"></a>获取全部</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获取 key_name 下的全部 fields 和 values</span><br><span class="line">HGETALL key_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="判断字段是否存在"><a href="#判断字段是否存在" class="headerlink" title="判断字段是否存在"></a>判断字段是否存在</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 存在返回 1，否则返回 0（包括键不存在或字段不存在）</span><br><span class="line">HEXISTS key_name field_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="当字段不存时设定"><a href="#当字段不存时设定" class="headerlink" title="当字段不存时设定"></a>当字段不存时设定</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不存在则设定 返回 1；存在则什么也不做，返回 0</span></span><br><span class="line">HSETNX key_name field_name field_value</span><br></pre></td></tr></table></figure><ul><li><h4 id="增加数字"><a href="#增加数字" class="headerlink" title="增加数字"></a>增加数字</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回（Integer）增加后的数值。如果字段不存在，则创建，返回 1</span></span><br><span class="line">HINCRBY key_name field_name 每次递增的数值</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HDEL key_name field_name1 field_name2 ...</span><br></pre></td></tr></table></figure><ul><li><h4 id="只获取字段名或字段值"><a href="#只获取字段名或字段值" class="headerlink" title="只获取字段名或字段值"></a>只获取字段名或字段值</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 key_name 下的所有字段名</span></span><br><span class="line">HKEYS key_name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 key_name 下的所有字段值</span></span><br><span class="line">HVALS key_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取字段数量"><a href="#获取字段数量" class="headerlink" title="获取字段数量"></a>获取字段数量</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回字段的数量</span></span><br><span class="line">HLEN key_name</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><blockquote><p>存储一个有序字符串列表，为双向链表，越接近两端的元素读取速度越快。实际应用上，可以用来表示“最新的XXX”、“新鲜事”、“日志”等场景，以突出列表的链表优势</p></blockquote><ul><li><h4 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 key_name 可以理解为 list_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向左边添加元素，返回增加元素后的列表长度（该命令具备批量添加）</span></span><br><span class="line">LPUSH key_name value [value ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向右边添加元素，返回增加元素后的列表长度（该命令具备批量添加）</span></span><br><span class="line">RPUSH key_name value [value ...]</span><br></pre></td></tr></table></figure><pre><code>注意：多个 values 时，则顺次添加，且可以有相同 value 值</code></pre><ul><li><h4 id="弹出元素"><a href="#弹出元素" class="headerlink" title="弹出元素"></a>弹出元素</h4>  注意：“弹出”后，该元素将从列表中消失。执行步骤为：先从列表中移除元素，后返回该元素。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从左边移除一个元素，返回列表值</span></span><br><span class="line">LPOP key_name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从右边移除一个元素，返回列表值</span></span><br><span class="line">RPOP key_name</span><br></pre></td></tr></table></figure><pre><code>可以实现栈和队列的功能：</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈（Strack）</span></span><br><span class="line">LPUSH my_strack A B C</span><br><span class="line">LPOP my_strack  <span class="comment">// C 弹出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列（Queue）</span></span><br><span class="line">LPUSH my_queue A B C</span><br><span class="line">RPOP my_queue   <span class="comment">// A 弹出</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="获取元素个数"><a href="#获取元素个数" class="headerlink" title="获取元素个数"></a>获取元素个数</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回列表的长度</span></span><br><span class="line">LLEN key_name</span><br></pre></td></tr></table></figure><ul><li><h4 id="获取列表片段"><a href="#获取列表片段" class="headerlink" title="获取列表片段"></a>获取列表片段</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 start 至 end 间的所有元素，包括 end</span></span><br><span class="line">LRANGE key_name start end   </span><br></pre></td></tr></table></figure><pre><code>同时，也支持负索引，表示从右侧开始计算序列。 -1 代表最右侧元素，-2 代表最右侧倒数第二个元素注意：1.  如果 start 大于 end，则返回空列表：(empty list or set)2.  如果 end 大于实际值，则返回至最右侧元素3.  无 `RRANGE` 命令</code></pre><ul><li><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除 count 个值为 value 的元素</span></span><br><span class="line">LREM key_name count value</span><br></pre></td></tr></table></figure><ul><li><h4 id="获得-设置-指定索引的元素值"><a href="#获得-设置-指定索引的元素值" class="headerlink" title="获得&#x2F;设置 指定索引的元素值"></a>获得&#x2F;设置 指定索引的元素值</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回索引 index 处的 value</span></span><br><span class="line">LINDEX key_name index</span><br></pre></td></tr></table></figure><pre><code>这样就可以将 list 当做数组来使用</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将索引为 index 的值设定为 value</span></span><br><span class="line">LSET key_name index value</span><br></pre></td></tr></table></figure><ul><li><h4 id="只保留列表指定片段"><a href="#只保留列表指定片段" class="headerlink" title="只保留列表指定片段"></a>只保留列表指定片段</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法同 LRANGE，但只保留指定范围内的元素</span></span><br><span class="line">LTRIM key_name start end</span><br></pre></td></tr></table></figure><pre><code>可以用来实现日志的管理，例如“动态日志”，只保留100条最新的动态日志记录，就可以：</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPUSH logs value</span><br><span class="line">LTRIM logs <span class="number">0</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="向列表中插入元素"><a href="#向列表中插入元素" class="headerlink" title="向列表中插入元素"></a>向列表中插入元素</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先查找 find_value 的元素，再根据 BEFORE|AFTER 在 find_value 前或后插入 set_value 值，返回调整后的列表元素个数</span></span><br><span class="line">LINSERT key_name BEFORE|AFTER find_value set_value</span><br></pre></td></tr></table></figure><ul><li><h4 id="将元素从一个列表转到另一个列表"><a href="#将元素从一个列表转到另一个列表" class="headerlink" title="将元素从一个列表转到另一个列表"></a>将元素从一个列表转到另一个列表</h4></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 form_key_name 列表的最右侧弹出一个元素，再在最左侧添加至 to_key_name 列表中</span></span><br><span class="line">RPOPLPUSH from_key_name to_key_name</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://p5tq1m3a9.bkt.clouddn.com/hexo_blog/static/redis2.png" alt="总结"></p><p><a href="https://laravel-china.org/articles/8103/redis-introduction-1-basic-key-operation">转</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> hash </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 入门 - 1（基本 key 操作）</title>
      <link href="/redis-introduction-1/"/>
      <url>/redis-introduction-1/</url>
      
        <content type="html"><![CDATA[<h3 id="基本-key-value-操作"><a href="#基本-key-value-操作" class="headerlink" title="基本 key-value 操作"></a><strong>基本 key-value 操作</strong></h3><p>Redis 的基础应用</p><span id="more"></span><h4 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h4><p>Redis 的基础</p><ul><li><p>获取 Key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ？、*、[]、\x</span><br><span class="line">KEYS [正则表达式]</span><br><span class="line"></span><br><span class="line">// 获取所有键（不建议在生产上执行此命令）</span><br><span class="line">KEYS *</span><br><span class="line"></span><br><span class="line">// 获取所有以 post_xxxx 开头的 key</span><br><span class="line">KEYS post_*</span><br></pre></td></tr></table></figure></li><li><p>判断 Key 是否存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 存在返回整数类型 1，不存在则返回 0</span><br><span class="line">EXISTS key_name</span><br></pre></td></tr></table></figure></li><li><p>删除 Key </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 返回删除键的个数（整数类型）</span><br><span class="line">DEL key_name</span><br></pre></td></tr></table></figure><p>  注意，DEL 不支持通配符，因此如果需要批量删除需结合 Linux 管道命令实现。</p></li></ul><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>Redis 中最基本的数据类型，最大存储容量为 512 MB</p><ul><li><p>赋值与取值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 存储 key_name = &quot;value&quot;</span><br><span class="line">SET key_name value</span><br><span class="line"></span><br><span class="line">// 获取 key_name 的 &quot;value&quot;</span><br><span class="line">// 注意：key_name 不存在时，返回空</span><br><span class="line">GET key_name</span><br><span class="line"></span><br><span class="line">// 同时赋值多个 key 或 获取 多个 key 的 value</span><br><span class="line">MSET key_name value [key_name2 value2 ...]</span><br><span class="line">MGET key_name [key_name2 ...]</span><br></pre></td></tr></table></figure></li><li><p>末尾追加值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 返回追加后字符串的总长度（Integer）</span><br><span class="line">APPEND key_name value</span><br></pre></td></tr></table></figure><p>  如果 key_name 不存在，则创建一个 key_name-value，相当于执行 SET key_name value</p></li><li><p>获取字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 返回字符串的长度（Integer）</span><br><span class="line">STRLEN key_name</span><br></pre></td></tr></table></figure></li></ul><h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><p>可实现关系型数据库里的“自增”</p><ul><li><p>递增与指定递增值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 让 key_name 递增，并返回递增后的值（注意是 Integer）</span><br><span class="line">INCR key_name   </span><br><span class="line"></span><br><span class="line">// INCR 是 INCRBY key_name 1 的特例</span><br><span class="line">INCRBY key_name [每次递增值]</span><br></pre></td></tr></table></figure><p>  如果 key_name 不存在时，会创建 key_name 并赋值为 0，再执行 INCR 命令。因此，第一次递增后的结果是 1。</p></li><li><p>递减与指定递减值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 递减</span><br><span class="line">DECR key_name</span><br><span class="line"></span><br><span class="line">DECRBY key_name [每次递减值]</span><br></pre></td></tr></table></figure><p>  如果 key_name 不存在时，会创建 key_name 并赋值为 0，再执行 DECR 命令。因此，第一次递增后的结果是 -1。<br>  【引申】Redis 是原子操作，绝不会出现多个客户端同时执行 INCR 命令后，产生相同的递增或递减结果。</p></li><li><p>递增指定浮点数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 每次递增一个双精度浮点数</span><br><span class="line">INCRBYFLOAT key_name [每次递增浮点数]</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p><img src="http://p5tq1m3a9.bkt.clouddn.com/hexo_blog/static/redis_key.png" alt="总结"></p><p><a href="https://laravel-china.org/articles/8103/redis-introduction-1-basic-key-operation">转</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php生成markdown格式的数据库字典</title>
      <link href="/php-craate-mysql2md/"/>
      <url>/php-craate-mysql2md/</url>
      
        <content type="html"><![CDATA[<p>每次开发项目时，总是会被要求提供数据字典<br>如果一个表一个表的写那就太麻烦</p><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 生成mysql数据字典  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库配置</span></span><br><span class="line"><span class="variable">$config</span> = [</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>     =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>     =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;111111&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">characet</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">empty</span>(<span class="variable">$data</span>) )&#123;</span><br><span class="line">        <span class="variable">$fileType</span> = <span class="title function_ invoke__">mb_detect_encoding</span>(<span class="variable">$data</span> , <span class="keyword">array</span>(<span class="string">&#x27;UTF-8&#x27;</span>,<span class="string">&#x27;GBK&#x27;</span>,<span class="string">&#x27;LATIN1&#x27;</span>,<span class="string">&#x27;BIG5&#x27;</span>)) ;</span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$fileType</span> != <span class="string">&#x27;UTF-8&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$data</span> ,<span class="string">&#x27;utf-8&#x27;</span> , <span class="variable">$fileType</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">export_dict</span>(<span class="params"><span class="variable">$dbname</span>, <span class="variable">$config</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$title</span> = <span class="variable">$dbname</span>.<span class="string">&#x27; 数据字典&#x27;</span>;</span><br><span class="line">    <span class="variable">$dsn</span> = <span class="string">&#x27;mysql:dbname=&#x27;</span>.<span class="variable">$dbname</span>.<span class="string">&#x27;;host=&#x27;</span>.<span class="variable">$config</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="comment">//数据库连接</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$con</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$config</span>[<span class="string">&#x27;user&#x27;</span>], <span class="variable">$config</span>[<span class="string">&#x27;password&#x27;</span>], [PDO::<span class="variable constant_">ATTR_ERRMODE</span> =&gt; PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Connection failed: &#x27;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;SET NAMES utf8&#x27;</span>);</span><br><span class="line">    <span class="variable">$tables</span> = <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;SHOW tables&#x27;</span>)-&gt;<span class="title function_ invoke__">fetchAll</span>(PDO::<span class="variable constant_">FETCH_COLUMN</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取得所有的表名</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$tables</span> <span class="keyword">as</span> <span class="variable">$table</span>) &#123;</span><br><span class="line">        <span class="variable">$_tables</span>[][<span class="string">&#x27;TABLE_NAME&#x27;</span>] = <span class="variable">$table</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环取得所有表的备注及表中列消息  </span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_tables</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;  </span><br><span class="line"></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&#x27;SELECT * FROM &#x27;</span>;  </span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&#x27;INFORMATION_SCHEMA.TABLES &#x27;</span>;  </span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&#x27;WHERE &#x27;</span>;  </span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&quot;table_name = &#x27;<span class="subst">&#123;$v[&#x27;TABLE_NAME&#x27;]&#125;</span>&#x27; AND table_schema = &#x27;<span class="subst">&#123;$dbname&#125;</span>&#x27;&quot;</span>;  </span><br><span class="line">        <span class="variable">$tr</span> = <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>)-&gt;<span class="title function_ invoke__">fetch</span>(PDO::<span class="variable constant_">FETCH_ASSOC</span>);</span><br><span class="line">        <span class="variable">$_tables</span>[<span class="variable">$k</span>][<span class="string">&#x27;TABLE_COMMENT&#x27;</span>] = <span class="variable">$tr</span>[<span class="string">&#x27;TABLE_COMMENT&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&#x27;SELECT * FROM &#x27;</span>;  </span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&#x27;INFORMATION_SCHEMA.COLUMNS &#x27;</span>;  </span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&#x27;WHERE &#x27;</span>;  </span><br><span class="line">        <span class="variable">$sql</span> .= <span class="string">&quot;table_name = &#x27;<span class="subst">&#123;$v[&#x27;TABLE_NAME&#x27;]&#125;</span>&#x27; AND table_schema = &#x27;<span class="subst">&#123;$dbname&#125;</span>&#x27;&quot;</span>;  </span><br><span class="line">        <span class="variable">$fields</span> = [];  </span><br><span class="line">        <span class="variable">$field_result</span> = <span class="variable">$con</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>)-&gt;<span class="title function_ invoke__">fetchAll</span>(PDO::<span class="variable constant_">FETCH_ASSOC</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$field_result</span> <span class="keyword">as</span> <span class="variable">$fr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$fields</span>[] = <span class="variable">$fr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_tables</span>[<span class="variable">$k</span>][<span class="string">&#x27;COLUMN&#x27;</span>] = <span class="variable">$fields</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$con</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$mark</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环所有表  </span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_tables</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;  </span><br><span class="line"></span><br><span class="line">        <span class="variable">$mark</span> .= <span class="string">&#x27;## &#x27;</span>.<span class="variable">$v</span>[<span class="string">&#x27;TABLE_NAME&#x27;</span>].<span class="string">&#x27;  &#x27;</span>. <span class="title function_ invoke__">characet</span>(<span class="variable">$v</span>[<span class="string">&#x27;TABLE_COMMENT&#x27;</span>]) .PHP_EOL;</span><br><span class="line">        <span class="variable">$mark</span> .= <span class="string">&#x27;&#x27;</span>.PHP_EOL;</span><br><span class="line">        <span class="variable">$mark</span> .= <span class="string">&#x27;|  字段名  |  数据类型  |  默认值  |  允许非空  |  自动递增  |  备注  |&#x27;</span>.PHP_EOL;</span><br><span class="line">        <span class="variable">$mark</span> .= <span class="string">&#x27;| ------ | ------ | ------ | ------ | ------ | ------ |&#x27;</span>.PHP_EOL;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$v</span>[<span class="string">&#x27;COLUMN&#x27;</span>] <span class="keyword">as</span> <span class="variable">$f</span>) &#123;  </span><br><span class="line">            <span class="variable">$mark</span> .= <span class="string">&#x27;| &#x27;</span>.<span class="variable">$f</span>[<span class="string">&#x27;COLUMN_NAME&#x27;</span>].<span class="string">&#x27; | &#x27;</span>.<span class="variable">$f</span>[<span class="string">&#x27;COLUMN_TYPE&#x27;</span>].<span class="string">&#x27; | &#x27;</span>.<span class="variable">$f</span>[<span class="string">&#x27;COLUMN_DEFAULT&#x27;</span>].<span class="string">&#x27; | &#x27;</span>.<span class="variable">$f</span>[<span class="string">&#x27;IS_NULLABLE&#x27;</span>].<span class="string">&#x27; | &#x27;</span>.(<span class="variable">$f</span>[<span class="string">&#x27;EXTRA&#x27;</span>] == <span class="string">&#x27;auto_increment&#x27;</span> ? <span class="string">&#x27;是&#x27;</span> : <span class="string">&#x27;&#x27;</span>).<span class="string">&#x27; | &#x27;</span>.(<span class="keyword">empty</span>(<span class="variable">$f</span>[<span class="string">&#x27;COLUMN_COMMENT&#x27;</span>]) ? <span class="string">&#x27;-&#x27;</span> : <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$f</span>[<span class="string">&#x27;COLUMN_COMMENT&#x27;</span>])).<span class="string">&#x27; |&#x27;</span>.PHP_EOL;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="variable">$mark</span> .= <span class="string">&#x27;&#x27;</span>.PHP_EOL;</span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//markdown输出</span></span><br><span class="line">    <span class="variable">$md_tplt</span> = <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string"># <span class="subst">&#123;$title&#125;</span></span></span><br><span class="line"><span class="string">&gt;   本数据字典由PHP脚本自动导出,字典的备注来自数据库表及其字段的注释(`comment`).开发者在增改库表及其字段时,请在 `migration` 时写明注释,以备后来者查阅.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;$mark&#125;</span></span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//html输出</span></span><br><span class="line">    <span class="variable">$marked_text</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$md_tplt</span>);</span><br><span class="line">    <span class="variable">$html_tplt</span> = <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;zh-CN&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;<span class="subst">&#123;$title&#125;</span> - Powered By Markdown Viewer&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://s1.ystatic.cn/41345695beaa9b2e/css/github-markdown.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;http://s1.ystatic.cn/lib/marked/marked.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;http://s1.ystatic.cn/lib/highlight.js/highlight.pack.js?v=9.6.0&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;link href=&quot;http://s1.ystatic.cn/lib/highlight.js/styles/github.css?v=9.6.0&quot; rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;markdown-body&quot; id=&quot;content&quot; style=&quot;margin:auto; width: 1024px;&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;marked_text&quot; style=&quot;display:none;&quot;&gt;</span></span><br><span class="line"><span class="string"><span class="subst">&#123;$marked_text&#125;</span></span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">var marked_text = document.getElementById(&#x27;marked_text&#x27;).innerText;</span></span><br><span class="line"><span class="string">var renderer = new marked.Renderer();</span></span><br><span class="line"><span class="string">renderer.table = function(header, body) &#123;</span></span><br><span class="line"><span class="string">    return &#x27;&lt;table class=&quot;table table-bordered table-striped&quot;&gt;\\n&#x27;</span></span><br><span class="line"><span class="string">            + &#x27;&lt;thead&gt;\\n&#x27;</span></span><br><span class="line"><span class="string">            + header</span></span><br><span class="line"><span class="string">            + &#x27;&lt;/thead&gt;\\n&#x27;</span></span><br><span class="line"><span class="string">            + &#x27;&lt;tbody&gt;\\n&#x27;</span></span><br><span class="line"><span class="string">            + body</span></span><br><span class="line"><span class="string">            + &#x27;&lt;/tbody&gt;\\n&#x27;</span></span><br><span class="line"><span class="string">            + &#x27;&lt;/table&gt;\\n&#x27;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">marked.setOptions(&#123;</span></span><br><span class="line"><span class="string">    renderer: renderer,</span></span><br><span class="line"><span class="string">    gfm: true,</span></span><br><span class="line"><span class="string">    tables: true,</span></span><br><span class="line"><span class="string">    breaks: false,</span></span><br><span class="line"><span class="string">    pedantic: false,</span></span><br><span class="line"><span class="string">    sanitize: true,</span></span><br><span class="line"><span class="string">    smartLists: true,</span></span><br><span class="line"><span class="string">    smartypants: false,</span></span><br><span class="line"><span class="string">    langPrefix: &#x27;language-&#x27;,</span></span><br><span class="line"><span class="string">    //这里使用了highlight对代码进行高亮显示</span></span><br><span class="line"><span class="string">    highlight: function (code) &#123;</span></span><br><span class="line"><span class="string">        return hljs.highlightAuto(code).value;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">document.getElementById(&#x27;content&#x27;).innerHTML = marked(marked_text);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$dbname</span>.<span class="string">&#x27;.md&#x27;</span>, <span class="variable">$md_tplt</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$dbname</span>.<span class="string">&#x27;.html&#x27;</span>, <span class="variable">$html_tplt</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dbs</span> = [<span class="string">&#x27;databases&#x27;</span>];<span class="comment">//库名</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$dbs</span> <span class="keyword">as</span> <span class="variable">$db</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">export_dict</span>(<span class="variable">$db</span>, <span class="variable">$config</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>转载</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 数据库字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-select-repeat</title>
      <link href="/mysql-select-repeat/"/>
      <url>/mysql-select-repeat/</url>
      
        <content type="html"><![CDATA[<p>MYSQL数据库经常会遇到有重复记录的问题，需要查看哪些重复了。这里有几个方法，记录一下方便以后查看。</p><span id="more"></span><h3 id="查找全部重复记录"><a href="#查找全部重复记录" class="headerlink" title="查找全部重复记录"></a>查找全部重复记录</h3><ul><li><p>查找全部重复记录(可查询多个重复字段，用<code>distinct</code>的话就不可以)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表 WHERE 重复字段 IN (SELECT 重复字段 FROM表 GROUP BY 重复字段 HAVING COUNT(id)&gt;1) ORDER BY 重复字段</span><br></pre></td></tr></table></figure></li><li><p>过滤重复记录(只显示一条 id最大的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表 WHERE id IN (SELECT MAX(id) FROM 表 GROUP BY 重复字段)</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除重复记录"><a href="#删除重复记录" class="headerlink" title="删除重复记录"></a>删除重复记录</h3><ul><li><p>删除全部重复记录（慎用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE 表 WHERE 重复字段 IN (SELECT 重复字段 FROM 表 GROUP BY 重复字段 HAVING COUNT(id)&gt;1)</span><br></pre></td></tr></table></figure></li><li><p>保留一条(保留id最大的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE 表 WHERE id NOT IN (SELECT MAX(id) FROM 表 GROUP BY 重复字段)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 重复记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artisan 控制台</title>
      <link href="/laravel-artisan/"/>
      <url>/laravel-artisan/</url>
      
        <content type="html"><![CDATA[<p>Artisan 是 Laravel 自带的命令行接口，它提供了许多实用的命令来帮助你构建 Laravel 应用。要查看所有可用的 Artisan 命令的列表，可以使用 list 命令<br><code>php artisan list</code></p><span id="more"></span><ul><li><p>Laravel 的 artisan 可用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">php artisan list</span><br><span class="line">Laravel Framework 5.5.42</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  command [options] [arguments]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help            Display this help message</span><br><span class="line">  -q, --quiet           Do not output any message</span><br><span class="line">  -V, --version         Display this application version</span><br><span class="line">      --ansi            Force ANSI output</span><br><span class="line">      --no-ansi         Disable ANSI output</span><br><span class="line">  -n, --no-interaction  Do not ask any interactive question</span><br><span class="line">      --env[=ENV]       The environment the command should run under</span><br><span class="line">  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  clear-compiled                 Remove the compiled class file</span><br><span class="line">  down                           Put the application into maintenance mode</span><br><span class="line">  env                            Display the current framework environment</span><br><span class="line">  help                           Displays help for a command</span><br><span class="line">  inspire                        Display an inspiring quote</span><br><span class="line">  list                           Lists commands</span><br><span class="line">  migrate                        Run the database migrations</span><br><span class="line">  optimize                       Optimize the framework for better performance (deprecated)</span><br><span class="line">  preset                         Swap the front-end scaffolding for the application</span><br><span class="line">  serve                          Serve the application on the PHP development server</span><br><span class="line">  tinker                         Interact with your application</span><br><span class="line">  up                             Bring the application out of maintenance mode</span><br><span class="line"> app</span><br><span class="line">  app:name                       Set the application namespace</span><br><span class="line"> auth</span><br><span class="line">  auth:clear-resets              Flush expired password reset tokens</span><br><span class="line"> cache</span><br><span class="line">  cache:clear                    Flush the application cache</span><br><span class="line">  cache:forget                   Remove an item from the cache</span><br><span class="line">  cache:table                    Create a migration for the cache database table</span><br><span class="line"> config</span><br><span class="line">  config:cache                   Create a cache file for faster configuration loading</span><br><span class="line">  config:clear                   Remove the configuration cache file</span><br><span class="line"> db</span><br><span class="line">  db:seed                        Seed the database with records</span><br><span class="line"> debugbar</span><br><span class="line">  debugbar:clear                 Clear the Debugbar Storage</span><br><span class="line"> event</span><br><span class="line">  event:generate                 Generate the missing events and listeners based on registration</span><br><span class="line"> ide-helper</span><br><span class="line">  ide-helper:eloquent            Add \Eloquent helper to \Eloquent\Model</span><br><span class="line">  ide-helper:generate            Generate a new IDE Helper file.</span><br><span class="line">  ide-helper:meta                Generate metadata for PhpStorm</span><br><span class="line">  ide-helper:models              Generate autocompletion for models</span><br><span class="line"> key</span><br><span class="line">  key:generate                   Set the application key</span><br><span class="line"> make</span><br><span class="line">  make:auth                      Scaffold basic login and registration views and routes</span><br><span class="line">  make:command                   Create a new Artisan command</span><br><span class="line">  make:controller                Create a new controller class</span><br><span class="line">  make:event                     Create a new event class</span><br><span class="line">  make:exception                 Create a new custom exception class</span><br><span class="line">  make:factory                   Create a new model factory</span><br><span class="line">  make:historyToday              create history today</span><br><span class="line">  make:job                       Create a new job class</span><br><span class="line">  make:listener                  Create a new event listener class</span><br><span class="line">  make:mail                      Create a new email class</span><br><span class="line">  make:middleware                Create a new middleware class</span><br><span class="line">  make:migration                 Create a new migration file</span><br><span class="line">  make:model                     Create a new Eloquent model class</span><br><span class="line">  make:news                      CSDN latest 5 article</span><br><span class="line">  make:notification              Create a new notification class</span><br><span class="line">  make:policy                    Create a new policy class</span><br><span class="line">  make:provider                  Create a new service provider class</span><br><span class="line">  make:request                   Create a new form request class</span><br><span class="line">  make:resource                  Create a new resource</span><br><span class="line">  make:rule                      Create a new validation rule</span><br><span class="line">  make:seeder                    Create a new seeder class</span><br><span class="line">  make:test                      Create a new test class</span><br><span class="line"> migrate</span><br><span class="line">  migrate:fresh                  Drop all tables and re-run all migrations</span><br><span class="line">  migrate:install                Create the migration repository</span><br><span class="line">  migrate:refresh                Reset and re-run all migrations</span><br><span class="line">  migrate:reset                  Rollback all database migrations</span><br><span class="line">  migrate:rollback               Rollback the last database migration</span><br><span class="line">  migrate:status                 Show the status of each migration</span><br><span class="line"> migration</span><br><span class="line">  migration:fromThinkPHPBjyBlog  Command description</span><br><span class="line"> notifications</span><br><span class="line">  notifications:table            Create a migration for the notifications table</span><br><span class="line"> opcache</span><br><span class="line">  opcache:clear                  Clear the opcode cache</span><br><span class="line">  opcache:config                 Show your opcode cache configuration</span><br><span class="line">  opcache:optimize               Pre-compile your application code</span><br><span class="line">  opcache:status                 Show state information, memory usage, etc..</span><br><span class="line"> package</span><br><span class="line">  package:discover               Rebuild the cached package manifest</span><br><span class="line"> queue</span><br><span class="line">  queue:failed                   List all of the failed queue jobs</span><br><span class="line">  queue:failed-table             Create a migration for the failed queue jobs database table</span><br><span class="line">  queue:flush                    Flush all of the failed queue jobs</span><br><span class="line">  queue:forget                   Delete a failed queue job</span><br><span class="line">  queue:listen                   Listen to a given queue</span><br><span class="line">  queue:restart                  Restart queue worker daemons after their current job</span><br><span class="line">  queue:retry                    Retry a failed queue job</span><br><span class="line">  queue:table                    Create a migration for the queue jobs database table</span><br><span class="line">  queue:work                     Start processing jobs on the queue as a daemon</span><br><span class="line"> route</span><br><span class="line">  route:cache                    Create a route cache file for faster route registration</span><br><span class="line">  route:clear                    Remove the route cache file</span><br><span class="line">  route:list                     List all registered routes</span><br><span class="line"> schedule</span><br><span class="line">  schedule:run                   Run the scheduled commands</span><br><span class="line"> seeder</span><br><span class="line">  seeder:clear                   Clear seeder data</span><br><span class="line"> session</span><br><span class="line">  session:table                  Create a migration for the session database table</span><br><span class="line"> storage</span><br><span class="line">  storage:link                   Create a symbolic link from &quot;public/storage&quot; to &quot;storage/app/public&quot;</span><br><span class="line"></span><br><span class="line"> vendor</span><br><span class="line">  vendor:publish                 Publish any publishable assets from vendor packages</span><br><span class="line"> view</span><br><span class="line">  view:clear                     Clear all compiled view files</span><br></pre></td></tr></table></figure></li><li><p>这是 Lumen 的 artisan 可用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">php artisan list</span><br><span class="line">Laravel Framework Lumen (5.6.4) (Laravel Components 5.6.*)</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  command [options] [arguments]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help            Display this help message</span><br><span class="line">  -q, --quiet           Do not output any message</span><br><span class="line">  -V, --version         Display this application version</span><br><span class="line">      --ansi            Force ANSI output</span><br><span class="line">      --no-ansi         Disable ANSI output</span><br><span class="line">  -n, --no-interaction  Do not ask any interactive question</span><br><span class="line">      --env[=ENV]       The environment the command should run under</span><br><span class="line">  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  help                Displays help for a command</span><br><span class="line">  list                Lists commands</span><br><span class="line">  migrate             Run the database migrations</span><br><span class="line"> auth</span><br><span class="line">  auth:clear-resets   Flush expired password reset tokens</span><br><span class="line"> cache</span><br><span class="line">  cache:clear         Flush the application cache</span><br><span class="line">  cache:forget        Remove an item from the cache</span><br><span class="line">  cache:table         Create a migration for the cache database table</span><br><span class="line"> db</span><br><span class="line">  db:seed             Seed the database with records</span><br><span class="line"> make</span><br><span class="line">  make:migration      Create a new migration file</span><br><span class="line">  make:seeder         Create a new seeder class</span><br><span class="line"> migrate</span><br><span class="line">  migrate:fresh       Drop all tables and re-run all migrations</span><br><span class="line">  migrate:install     Create the migration repository</span><br><span class="line">  migrate:refresh     Reset and re-run all migrations</span><br><span class="line">  migrate:reset       Rollback all database migrations</span><br><span class="line">  migrate:rollback    Rollback the last database migration</span><br><span class="line">  migrate:status      Show the status of each migration</span><br><span class="line"> queue</span><br><span class="line">  queue:failed        List all of the failed queue jobs</span><br><span class="line">  queue:failed-table  Create a migration for the failed queue jobs database table</span><br><span class="line">  queue:flush         Flush all of the failed queue jobs</span><br><span class="line">  queue:forget        Delete a failed queue job</span><br><span class="line">  queue:listen        Listen to a given queue</span><br><span class="line">  queue:restart       Restart queue worker daemons after their current job</span><br><span class="line">  queue:retry         Retry a failed queue job</span><br><span class="line">  queue:table         Create a migration for the queue jobs database table</span><br><span class="line">  queue:work          Start processing jobs on the queue as a daemon</span><br><span class="line"> schedule</span><br><span class="line">  schedule:run        Run the scheduled commands</span><br></pre></td></tr></table></figure></li></ul><p>Lumen 下的 Artisan 命令比 Laravel 的少很多。通过对比就知道<br>但是，有些命令没有也不影响原有功能的使用，毕竟 Artisan 命令工具只是起到辅助开发和提高效率的作用。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> lunem </tag>
            
            <tag> artisan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33个PHP代码样例</title>
      <link href="/php-example/"/>
      <url>/php-example/</url>
      
        <content type="html"><![CDATA[<p>在PHP的流行普及中，网上总结出了很多实用的PHP代码片段，这些代码片段在当你遇到类似的问题时，粘贴过去就可以使用，非常的高效，非常的省时省力。</p><span id="more"></span><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间：2015-8-6</span></span><br><span class="line"><span class="comment"> * 作者：River</span></span><br><span class="line"><span class="comment"> * 超级有用、必须收藏的PHP代码样例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 友好显示var_dump</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params"><span class="variable">$var</span>, <span class="variable">$echo</span> = <span class="literal">true</span>, <span class="variable">$label</span> = <span class="literal">null</span>, <span class="variable">$strict</span> = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$label</span> = ( <span class="variable">$label</span> === <span class="literal">null</span> ) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">rtrim</span>(<span class="variable">$label</span>) . <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$strict</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;html_errors&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$output</span> = <span class="title function_ invoke__">print_r</span>(<span class="variable">$var</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="variable">$output</span> = <span class="string">&quot;&lt;pre&gt;&quot;</span> . <span class="variable">$label</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$output</span>, ENT_QUOTES) . <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$output</span> = <span class="variable">$label</span> . <span class="title function_ invoke__">print_r</span>(<span class="variable">$var</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$var</span>);</span><br><span class="line">            <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_clean</span>();</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;xdebug&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$output</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/\]\=\&gt;\n(\s+)/m&quot;</span>, <span class="string">&quot;] =&gt; &quot;</span>, <span class="variable">$output</span>);</span><br><span class="line">                <span class="variable">$output</span> = <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . <span class="variable">$label</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$output</span>, ENT_QUOTES) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$echo</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户端IP地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClientIP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$ip</span> = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$ip</span> !== <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">            <span class="variable">$pos</span> = <span class="title function_ invoke__">array_search</span>(<span class="string">&#x27;unknown&#x27;</span>, <span class="variable">$arr</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$pos</span>)</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable">$arr</span>[<span class="variable">$pos</span>]);</span><br><span class="line">            <span class="variable">$ip</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$arr</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IP地址合法验证</span></span><br><span class="line">        <span class="variable">$ip</span> = ( <span class="literal">false</span> !== <span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>) ) ? <span class="variable">$ip</span> : <span class="string">&#x27;0.0.0.0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ip</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环创建目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mkdir</span>(<span class="params"><span class="variable">$dir</span>, <span class="variable">$mode</span> = <span class="number">0777</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>) || @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>, <span class="variable">$mode</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">mk_dir</span>(<span class="title function_ invoke__">dirname</span>(<span class="variable">$dir</span>), <span class="variable">$mode</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>, <span class="variable">$mode</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">byteFormat</span>(<span class="params"><span class="variable">$size</span>, <span class="variable">$dec</span> = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;KB&quot;</span>, <span class="string">&quot;MB&quot;</span>, <span class="string">&quot;GB&quot;</span>, <span class="string">&quot;TB&quot;</span>, <span class="string">&quot;PB&quot;</span>);</span><br><span class="line">        <span class="variable">$pos</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$size</span> &gt;= <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="variable">$size</span> /= <span class="number">1024</span>;</span><br><span class="line">            <span class="variable">$pos</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">round</span>(<span class="variable">$size</span>, <span class="variable">$dec</span>) . <span class="string">&quot; &quot;</span> . <span class="variable">$a</span>[<span class="variable">$pos</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下拉框，单选按钮 自动选择</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $string 输入字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $param  条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $type   类型</span></span><br><span class="line"><span class="comment">     *            selected checked</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">selected</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$param</span> = <span class="number">1</span>, <span class="variable">$type</span> = <span class="string">&#x27;select&#x27;</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$param</span>)) &#123;</span><br><span class="line">            <span class="variable">$true</span> = <span class="title function_ invoke__">in_array</span>(<span class="variable">$string</span>, <span class="variable">$param</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="variable">$string</span> == <span class="variable">$param</span>) &#123;</span><br><span class="line">            <span class="variable">$true</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$true</span>)</span><br><span class="line">            <span class="variable">$return</span> = <span class="variable">$type</span> == <span class="string">&#x27;select&#x27;</span> ? <span class="string">&#x27;selected=&quot;selected&quot;&#x27;</span> : <span class="string">&#x27;checked=&quot;checked&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得来源类型 post get</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> unknown</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>]) ? <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] : <span class="string">&#x27;GET&#x27;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params"><span class="variable">$action</span> = <span class="string">&#x27;success&#x27;</span>, <span class="variable">$content</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$redirect</span> = <span class="string">&#x27;javascript:history.back(-1);&#x27;</span>, <span class="variable">$timeout</span> = <span class="number">4</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$action</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">                <span class="variable">$titler</span> = <span class="string">&#x27;操作完成&#x27;</span>;</span><br><span class="line">                <span class="variable">$class</span> = <span class="string">&#x27;message_success&#x27;</span>;</span><br><span class="line">                <span class="variable">$images</span> = <span class="string">&#x27;message_success.png&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">                <span class="variable">$titler</span> = <span class="string">&#x27;操作未完成&#x27;</span>;</span><br><span class="line">                <span class="variable">$class</span> = <span class="string">&#x27;message_error&#x27;</span>;</span><br><span class="line">                <span class="variable">$images</span> = <span class="string">&#x27;message_error.png&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;errorBack&#x27;</span>:</span><br><span class="line">                <span class="variable">$titler</span> = <span class="string">&#x27;操作未完成&#x27;</span>;</span><br><span class="line">                <span class="variable">$class</span> = <span class="string">&#x27;message_error&#x27;</span>;</span><br><span class="line">                <span class="variable">$images</span> = <span class="string">&#x27;message_error.png&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;redirect&#x27;</span>:</span><br><span class="line">                <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:<span class="subst">$redirect</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;script&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$redirect</span>)) &#123;</span><br><span class="line">                    <span class="keyword">exit</span>(<span class="string">&#x27;&lt;script language=&quot;javascript&quot;&gt;alert(&quot;&#x27;</span> . <span class="variable">$content</span> . <span class="string">&#x27;&quot;);window.history.back(-1)&lt;/script&gt;&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">exit</span>(<span class="string">&#x27;&lt;script language=&quot;javascript&quot;&gt;alert(&quot;&#x27;</span> . <span class="variable">$content</span> . <span class="string">&#x27;&quot;);window.location=&quot; &#x27;</span> . <span class="variable">$redirect</span> . <span class="string">&#x27;   &quot;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 信息头部</span></span><br><span class="line">        <span class="variable">$header</span> = <span class="string">&#x27;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;操作提示&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="string">body&#123;font:12px/1.7 &quot;\5b8b\4f53&quot;,Tahoma;&#125;</span></span><br><span class="line"><span class="string">html,body,div,p,a,h3&#123;margin:0;padding:0;&#125;</span></span><br><span class="line"><span class="string">.tips_wrap&#123; background:#F7FBFE;border:1px solid #DEEDF6;width:780px;padding:50px;margin:50px auto 0;&#125;</span></span><br><span class="line"><span class="string">.tips_inner&#123;zoom:1;&#125;</span></span><br><span class="line"><span class="string">.tips_inner:after&#123;visibility:hidden;display:block;font-size:0;content:&quot; &quot;;clear:both;height:0;&#125;</span></span><br><span class="line"><span class="string">.tips_inner .tips_img&#123;width:80px;float:left;&#125;</span></span><br><span class="line"><span class="string">.tips_info&#123;float:left;line-height:35px;width:650px&#125;</span></span><br><span class="line"><span class="string">.tips_info h3&#123;font-weight:bold;color:#1A90C1;font-size:16px;&#125;</span></span><br><span class="line"><span class="string">.tips_info p&#123;font-size:14px;color:#999;&#125;</span></span><br><span class="line"><span class="string">.tips_info p.message_error&#123;font-weight:bold;color:#F00;font-size:16px; line-height:22px&#125;</span></span><br><span class="line"><span class="string">.tips_info p.message_success&#123;font-weight:bold;color:#1a90c1;font-size:16px; line-height:22px&#125;</span></span><br><span class="line"><span class="string">.tips_info p.return&#123;font-size:12px&#125;</span></span><br><span class="line"><span class="string">.tips_info .time&#123;color:#f00; font-size:14px; font-weight:bold&#125;</span></span><br><span class="line"><span class="string">.tips_info p a&#123;color:#1A90C1;text-decoration:none;&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;body&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 信息底部</span></span><br><span class="line">        <span class="variable">$footer</span> = <span class="string">&#x27;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$body</span> = <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string">        function delayURL(url) &#123;</span></span><br><span class="line"><span class="string">        var delay = document.getElementById(&quot;time&quot;).innerHTML;</span></span><br><span class="line"><span class="string">        //alert(delay);</span></span><br><span class="line"><span class="string">        if(delay &gt; 0)&#123;</span></span><br><span class="line"><span class="string">        delay--;</span></span><br><span class="line"><span class="string">        document.getElementById(&quot;time&quot;).innerHTML = delay;</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">    window.location.href = url;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    setTimeout(&quot;delayURL(\&#x27;&quot; + url + &quot;\&#x27;)&quot;, 1000);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;&lt;div class=&quot;tips_wrap&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;tips_inner&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;tips_img&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;img src=&quot;&#x27;</span> . <span class="title class_">Yii</span>::<span class="title function_ invoke__">app</span>()-&gt;baseUrl . <span class="string">&#x27;/static/images/&#x27;</span> . <span class="variable">$images</span> . <span class="string">&#x27;&quot;/&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;tips_info&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;p class=&quot;&#x27;</span> . <span class="variable">$class</span> . <span class="string">&#x27;&quot;&gt;&#x27;</span> . <span class="variable">$content</span> . <span class="string">&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p class=&quot;return&quot;&gt;系统自动跳转在  &lt;span class=&quot;time&quot; id=&quot;time&quot;&gt;&#x27;</span> . <span class="variable">$timeout</span> . <span class="string">&#x27; &lt;/span&gt;  秒后，如果不想等待，&lt;a href=&quot;&#x27;</span> . <span class="variable">$redirect</span> . <span class="string">&#x27;&quot;&gt;点击这里跳转&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;</span></span><br><span class="line"><span class="string">    delayURL(&quot;&#x27;</span> . <span class="variable">$redirect</span> . <span class="string">&#x27;&quot;);</span></span><br><span class="line"><span class="string">    &lt;/script&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$header</span> . <span class="variable">$body</span> . <span class="variable">$footer</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询字符生成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">buildCondition</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$getArray</span>, <span class="keyword">array</span> <span class="variable">$keys</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$getArray</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$getArray</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$key</span>, <span class="variable">$keys</span>) &amp;&amp; <span class="variable">$value</span>) &#123;</span><br><span class="line">                    <span class="variable">$arr</span>[<span class="variable">$key</span>] = <span class="title class_">CHtml</span>::<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">strip_tags</span>(<span class="variable">$value</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base64_encode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">b64encode</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$string</span>);</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;=&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base64_decode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">b64decode</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>), <span class="variable">$string</span>);</span><br><span class="line">        <span class="variable">$mod4</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$mod4</span>) &#123;</span><br><span class="line">            <span class="variable">$data</span> .= <span class="title function_ invoke__">substr</span>(<span class="string">&#x27;====&#x27;</span>, <span class="variable">$mod4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">email</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$chars</span> = <span class="string">&quot;/^([a-z0-9+_]|\\-|\\.)+@(([a-z0-9_]|\\-)+\\.)+[a-z]&#123;2,6&#125;\$/i&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="string">&#x27;@&#x27;</span>) !== <span class="literal">false</span> &amp;&amp; <span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>, <span class="string">&#x27;.&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$chars</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证手机号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">mobile</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;#^13[\d]&#123;9&#125;$|14^[0-9]\d&#123;8&#125;|^15[0-9]\d&#123;8&#125;$|^18[0-9]\d&#123;8&#125;$#&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证固定电话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tel</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?(\(0\d&#123;2,3&#125;\)|0\d&#123;2,3&#125;-)?[1-9]\d&#123;6,7&#125;(\-\d&#123;1,4&#125;)?$/&#x27;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证qq号码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">qq</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[1-9]\d&#123;4,12&#125;$/&#x27;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证邮政编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">zipCode</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[1-9]\d&#123;5&#125;$/&#x27;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证ip</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">ip</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;#^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;$#&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ip_array</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//真实的ip地址每个数字不能大于255（0-255）</span></span><br><span class="line">        <span class="keyword">return</span> ( <span class="variable">$ip_array</span>[<span class="number">0</span>] &lt;= <span class="number">255</span> &amp;&amp; <span class="variable">$ip_array</span>[<span class="number">1</span>] &lt;= <span class="number">255</span> &amp;&amp; <span class="variable">$ip_array</span>[<span class="number">2</span>] &lt;= <span class="number">255</span> &amp;&amp; <span class="variable">$ip_array</span>[<span class="number">3</span>] &lt;= <span class="number">255</span> ) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证身份证(中国)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">idCard</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^([0-9]&#123;15&#125;|[0-9]&#123;17&#125;[0-9a-z])$/i&quot;</span>, <span class="variable">$str</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证网址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">url</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$str</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;#(http|https|ftp|ftps)://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?#i&#x27;</span>, <span class="variable">$str</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ip获取地理位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $ip</span></span><br><span class="line"><span class="comment">     * return :ip,beginip,endip,country,area</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getlocation</span>(<span class="params"><span class="variable">$ip</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$ip</span> = <span class="keyword">new</span> <span class="title class_">XIp</span>();</span><br><span class="line">        <span class="variable">$ipArr</span> = <span class="variable">$ip</span>-&gt;<span class="title function_ invoke__">getlocation</span>(<span class="variable">$ip</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ipArr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文转换为拼音</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">pinyin</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$ip</span> = <span class="keyword">new</span> <span class="title class_">XPinyin</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ip</span>-&gt;<span class="title function_ invoke__">output</span>(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拆分sql</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">splitsql</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/TYPE=(InnoDB|MyISAM|MEMORY)( DEFAULT CHARSET=[^; ]+)?/&quot;</span>, <span class="string">&quot;ENGINE=\\1 DEFAULT CHARSET=&quot;</span> . <span class="title class_">Yii</span>::<span class="title function_ invoke__">app</span>()-&gt;db-&gt;charset, <span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$sql</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>, <span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$num</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$queriesarray</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;;\n&quot;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$sql</span>));</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$queriesarray</span> <span class="keyword">as</span> <span class="variable">$query</span>) &#123;</span><br><span class="line">            <span class="variable">$ret</span>[<span class="variable">$num</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable">$queries</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;\n&quot;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$query</span>));</span><br><span class="line">            <span class="variable">$queries</span> = <span class="title function_ invoke__">array_filter</span>(<span class="variable">$queries</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$queries</span> <span class="keyword">as</span> <span class="variable">$query</span>) &#123;</span><br><span class="line">                <span class="variable">$str1</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$query</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$str1</span> != <span class="string">&#x27;#&#x27;</span> &amp;&amp; <span class="variable">$str1</span> != <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                    <span class="variable">$ret</span>[<span class="variable">$num</span>] .= <span class="variable">$query</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$num</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable">$ret</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符截取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $dot</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$length</span>, <span class="variable">$dot</span> = <span class="string">&#x27;...&#x27;</span>, <span class="variable">$charset</span> = <span class="string">&#x27;utf-8&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) &lt;= <span class="variable">$length</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$pre</span> = <span class="title function_ invoke__">chr</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$end</span> = <span class="title function_ invoke__">chr</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>), <span class="keyword">array</span>(<span class="variable">$pre</span> . <span class="string">&#x27;&amp;&#x27;</span> . <span class="variable">$end</span>, <span class="variable">$pre</span> . <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$end</span>, <span class="variable">$pre</span> . <span class="string">&#x27;&lt;&#x27;</span> . <span class="variable">$end</span>, <span class="variable">$pre</span> . <span class="string">&#x27;&gt;&#x27;</span> . <span class="variable">$end</span>), <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$strcut</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strtolower</span>(<span class="variable">$charset</span>) == <span class="string">&#x27;utf-8&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$n</span> = <span class="variable">$tn</span> = <span class="variable">$noc</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$n</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$t</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$string</span>[<span class="variable">$n</span>]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$t</span> == <span class="number">9</span> || <span class="variable">$t</span> == <span class="number">10</span> || ( <span class="number">32</span> &lt;= <span class="variable">$t</span> &amp;&amp; <span class="variable">$t</span> &lt;= <span class="number">126</span> )) &#123;</span><br><span class="line">                    <span class="variable">$tn</span> = <span class="number">1</span>;</span><br><span class="line">                    <span class="variable">$n</span>++;</span><br><span class="line">                    <span class="variable">$noc</span>++;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="number">194</span> &lt;= <span class="variable">$t</span> &amp;&amp; <span class="variable">$t</span> &lt;= <span class="number">223</span>) &#123;</span><br><span class="line">                    <span class="variable">$tn</span> = <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$n</span> += <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$noc</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="number">224</span> &lt;= <span class="variable">$t</span> &amp;&amp; <span class="variable">$t</span> &lt;= <span class="number">239</span>) &#123;</span><br><span class="line">                    <span class="variable">$tn</span> = <span class="number">3</span>;</span><br><span class="line">                    <span class="variable">$n</span> += <span class="number">3</span>;</span><br><span class="line">                    <span class="variable">$noc</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="number">240</span> &lt;= <span class="variable">$t</span> &amp;&amp; <span class="variable">$t</span> &lt;= <span class="number">247</span>) &#123;</span><br><span class="line">                    <span class="variable">$tn</span> = <span class="number">4</span>;</span><br><span class="line">                    <span class="variable">$n</span> += <span class="number">4</span>;</span><br><span class="line">                    <span class="variable">$noc</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="number">248</span> &lt;= <span class="variable">$t</span> &amp;&amp; <span class="variable">$t</span> &lt;= <span class="number">251</span>) &#123;</span><br><span class="line">                    <span class="variable">$tn</span> = <span class="number">5</span>;</span><br><span class="line">                    <span class="variable">$n</span> += <span class="number">5</span>;</span><br><span class="line">                    <span class="variable">$noc</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$t</span> == <span class="number">252</span> || <span class="variable">$t</span> == <span class="number">253</span>) &#123;</span><br><span class="line">                    <span class="variable">$tn</span> = <span class="number">6</span>;</span><br><span class="line">                    <span class="variable">$n</span> += <span class="number">6</span>;</span><br><span class="line">                    <span class="variable">$noc</span> += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$n</span>++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$noc</span> &gt;= <span class="variable">$length</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$noc</span> &gt; <span class="variable">$length</span>) &#123;</span><br><span class="line">                <span class="variable">$n</span> -= <span class="variable">$tn</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$strcut</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">0</span>, <span class="variable">$n</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">                <span class="variable">$strcut</span> .= <span class="title function_ invoke__">ord</span>(<span class="variable">$string</span>[<span class="variable">$i</span>]) &gt; <span class="number">127</span> ? <span class="variable">$string</span>[<span class="variable">$i</span>] . <span class="variable">$string</span>[++<span class="variable">$i</span>] : <span class="variable">$string</span>[<span class="variable">$i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$strcut</span> = <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="variable">$pre</span> . <span class="string">&#x27;&amp;&#x27;</span> . <span class="variable">$end</span>, <span class="variable">$pre</span> . <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$end</span>, <span class="variable">$pre</span> . <span class="string">&#x27;&lt;&#x27;</span> . <span class="variable">$end</span>, <span class="variable">$pre</span> . <span class="string">&#x27;&gt;&#x27;</span> . <span class="variable">$end</span>), <span class="keyword">array</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>), <span class="variable">$strcut</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strrpos</span>(<span class="variable">$strcut</span>, <span class="title function_ invoke__">chr</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pos</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable">$strcut</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$strcut</span>, <span class="number">0</span>, <span class="variable">$pos</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$strcut</span> . <span class="variable">$dot</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述格式化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  $subject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clearCutstr</span>(<span class="params"><span class="variable">$subject</span>, <span class="variable">$length</span> = <span class="number">0</span>, <span class="variable">$dot</span> = <span class="string">&#x27;...&#x27;</span>, <span class="variable">$charset</span> = <span class="string">&#x27;utf-8&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">XUtils</span>::<span class="title function_ invoke__">cutstr</span>(<span class="title function_ invoke__">strip_tags</span>(<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>), <span class="string">&#x27;&#x27;</span>, <span class="variable">$subject</span>)), <span class="variable">$length</span>, <span class="variable">$dot</span>, <span class="variable">$charset</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">strip_tags</span>(<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>), <span class="string">&#x27;&#x27;</span>, <span class="variable">$subject</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测是否为英文或英文数字的组合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> unknown</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">isEnglist</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">eregi</span>(<span class="string">&quot;^[A-Z0-9]&#123;1,26&#125;$&quot;</span>, <span class="variable">$param</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将自动判断网址是否加http://</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">convertHttp</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$url</span> == <span class="string">&#x27;http://&#x27;</span> || <span class="variable">$url</span> == <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$url</span>, <span class="number">0</span>, <span class="number">7</span>) != <span class="string">&#x27;http://&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$url</span>, <span class="number">0</span>, <span class="number">8</span>) != <span class="string">&#x27;https://&#x27;</span>)</span><br><span class="line">            <span class="variable">$str</span> = <span class="string">&#x27;http://&#x27;</span> . <span class="variable">$url</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="variable">$str</span> = <span class="variable">$url</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      标题样式格式化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">titleStyle</span>(<span class="params"><span class="variable">$style</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$style</span>[<span class="string">&#x27;bold&#x27;</span>] == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$text</span> .=<span class="string">&#x27;font-weight:bold;&#x27;</span>;</span><br><span class="line">            <span class="variable">$serialize</span>[<span class="string">&#x27;bold&#x27;</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$style</span>[<span class="string">&#x27;underline&#x27;</span>] == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable">$text</span> .=<span class="string">&#x27;text-decoration:underline;&#x27;</span>;</span><br><span class="line">            <span class="variable">$serialize</span>[<span class="string">&#x27;underline&#x27;</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$style</span>[<span class="string">&#x27;color&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$text</span> .=<span class="string">&#x27;color:#&#x27;</span> . <span class="variable">$style</span>[<span class="string">&#x27;color&#x27;</span>] . <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">            <span class="variable">$serialize</span>[<span class="string">&#x27;color&#x27;</span>] = <span class="variable">$style</span>[<span class="string">&#x27;color&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;text&#x27;</span> =&gt; <span class="variable">$text</span>, <span class="string">&#x27;serialize&#x27;</span> =&gt; <span class="keyword">empty</span>(<span class="variable">$serialize</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">serialize</span>(<span class="variable">$serialize</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动转换字符集 支持数组转换</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">autoCharset</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$from</span> = <span class="string">&#x27;gbk&#x27;</span>, <span class="variable">$to</span> = <span class="string">&#x27;utf-8&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$from</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$from</span>) == <span class="string">&#x27;UTF8&#x27;</span> ? <span class="string">&#x27;utf-8&#x27;</span> : <span class="variable">$from</span>;</span><br><span class="line">        <span class="variable">$to</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$to</span>) == <span class="string">&#x27;UTF8&#x27;</span> ? <span class="string">&#x27;utf-8&#x27;</span> : <span class="variable">$to</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strtoupper</span>(<span class="variable">$from</span>) === <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$to</span>) || <span class="keyword">empty</span>(<span class="variable">$string</span>) || (<span class="title function_ invoke__">is_scalar</span>(<span class="variable">$string</span>) &amp;&amp; !<span class="title function_ invoke__">is_string</span>(<span class="variable">$string</span>))) &#123;</span><br><span class="line">            <span class="comment">//如果编码相同或者非字符串标量则不转换</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;mb_convert_encoding&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">mb_convert_encoding</span>(<span class="variable">$string</span>, <span class="variable">$to</span>, <span class="variable">$from</span>);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;iconv&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">iconv</span>(<span class="variable">$from</span>, <span class="variable">$to</span>, <span class="variable">$string</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="variable">$_key</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">autoCharset</span>(<span class="variable">$key</span>, <span class="variable">$from</span>, <span class="variable">$to</span>);</span><br><span class="line">                <span class="variable">$string</span>[<span class="variable">$_key</span>] = <span class="built_in">self</span>::<span class="title function_ invoke__">autoCharset</span>(<span class="variable">$val</span>, <span class="variable">$from</span>, <span class="variable">$to</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$key</span> != <span class="variable">$_key</span>)</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="variable">$string</span>[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      标题样式恢复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">titleStyleRestore</span>(<span class="params"><span class="variable">$serialize</span>, <span class="variable">$scope</span> = <span class="string">&#x27;bold&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$unserialize</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$unserialize</span>[<span class="string">&#x27;bold&#x27;</span>] == <span class="string">&#x27;Y&#x27;</span> &amp;&amp; <span class="variable">$scope</span> == <span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$unserialize</span>[<span class="string">&#x27;underline&#x27;</span>] == <span class="string">&#x27;Y&#x27;</span> &amp;&amp; <span class="variable">$scope</span> == <span class="string">&#x27;underline&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$unserialize</span>[<span class="string">&#x27;color&#x27;</span>] &amp;&amp; <span class="variable">$scope</span> == <span class="string">&#x27;color&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$unserialize</span>[<span class="string">&#x27;color&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出文件夹列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $dirname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> unknown</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDir</span>(<span class="params"><span class="variable">$dirname</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$files</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dirname</span>)) &#123;</span><br><span class="line">            <span class="variable">$fileHander</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dirname</span>);</span><br><span class="line">            <span class="keyword">while</span> (( <span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$fileHander</span>) ) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable">$filepath</span> = <span class="variable">$dirname</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$file</span>, <span class="string">&#x27;.&#x27;</span>) == <span class="number">0</span> || <span class="title function_ invoke__">strcmp</span>(<span class="variable">$file</span>, <span class="string">&#x27;..&#x27;</span>) == <span class="number">0</span> || <span class="title function_ invoke__">is_file</span>(<span class="variable">$filepath</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$files</span>[] = <span class="built_in">self</span>::<span class="title function_ invoke__">autoCharset</span>(<span class="variable">$file</span>, <span class="string">&#x27;GBK&#x27;</span>, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">closedir</span>(<span class="variable">$fileHander</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$files</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$files</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出文件列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $dirname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> unknown</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFile</span>(<span class="params"><span class="variable">$dirname</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$files</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dirname</span>)) &#123;</span><br><span class="line">            <span class="variable">$fileHander</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dirname</span>);</span><br><span class="line">            <span class="keyword">while</span> (( <span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$fileHander</span>) ) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="variable">$filepath</span> = <span class="variable">$dirname</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strcmp</span>(<span class="variable">$file</span>, <span class="string">&#x27;.&#x27;</span>) == <span class="number">0</span> || <span class="title function_ invoke__">strcmp</span>(<span class="variable">$file</span>, <span class="string">&#x27;..&#x27;</span>) == <span class="number">0</span> || <span class="title function_ invoke__">is_dir</span>(<span class="variable">$filepath</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$files</span>[] = <span class="built_in">self</span>::<span class="title function_ invoke__">autoCharset</span>(<span class="variable">$file</span>, <span class="string">&#x27;GBK&#x27;</span>, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">closedir</span>(<span class="variable">$fileHander</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$files</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$files</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [格式化图片列表数据]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">imageListSerialize</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ((<span class="keyword">array</span>) <span class="variable">$data</span>[<span class="string">&#x27;file&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">                <span class="variable">$var</span>[<span class="variable">$key</span>][<span class="string">&#x27;fileId&#x27;</span>] = <span class="variable">$data</span>[<span class="string">&#x27;fileId&#x27;</span>][<span class="variable">$key</span>];</span><br><span class="line">                <span class="variable">$var</span>[<span class="variable">$key</span>][<span class="string">&#x27;file&#x27;</span>] = <span class="variable">$row</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$var</span>, <span class="string">&#x27;dataSerialize&#x27;</span> =&gt; <span class="keyword">empty</span>(<span class="variable">$var</span>) ? <span class="string">&#x27;&#x27;</span> : <span class="title function_ invoke__">serialize</span>(<span class="variable">$var</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反引用一个引用字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  $string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">stripslashes</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="variable">$string</span>[<span class="variable">$key</span>] = <span class="built_in">self</span>::<span class="title function_ invoke__">stripslashes</span>(<span class="variable">$val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$string</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$string</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  $string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  $force</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addslashes</span>(<span class="params"><span class="variable">$string</span>, <span class="variable">$force</span> = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$string</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$string</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                <span class="variable">$string</span>[<span class="variable">$key</span>] = <span class="built_in">self</span>::<span class="title function_ invoke__">addslashes</span>(<span class="variable">$val</span>, <span class="variable">$force</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$string</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$string</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">formatHtml</span>(<span class="params"><span class="variable">$content</span>, <span class="variable">$options</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$purifier</span> = <span class="keyword">new</span> <span class="title class_">CHtmlPurifier</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$options</span> != <span class="literal">false</span>)</span><br><span class="line">            <span class="variable">$purifier</span>-&gt;options = <span class="variable">$options</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$purifier</span>-&gt;<span class="title function_ invoke__">purify</span>(<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>原文：<a href="http://www.phpxs.com/post/4116/">http://www.phpxs.com/post/4116/</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决git报ssh variant &#39;simple&#39; does not support setting port</title>
      <link href="/git-ssh/"/>
      <url>/git-ssh/</url>
      
        <content type="html"><![CDATA[<p>使用 ssh 方式拉取代码的时候，使用的命令带有端口号。而在 git 2.16.x 版本上 ssh variant 需要手动设置为 ssh。</p><ul><li>解决办法<br>在git bash中输入命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global ssh.variant ssh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红包的随机算法基础实现</title>
      <link href="/random-algorithm/"/>
      <url>/random-algorithm/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>假设有 n 个人领红包；</li><li>每个人领到红包总和为 m 元；</li><li>每个人至少领到 0.01 元红包；</li><li>每个人领到红包额度相差范围小。<span id="more"></span></li></ul><h3 id="思维逻辑"><a href="#思维逻辑" class="headerlink" title="思维逻辑"></a>思维逻辑</h3><p>当 n 为1时：n1 &#x3D; m</p><p>当 n 为2时：n1 &#x3D; 0.01 ~ m       n2 &#x3D; m - n1</p><p>当 n 为3时：n1 &#x3D; 0.01 ~ m       n2 &#x3D; 0.01 ~ ( m - n1 )       n3 &#x3D; m - n1 - n2<br>…</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$m</span>=m;      <span class="comment">//M元红包</span></span><br><span class="line"><span class="variable">$n</span>=n;      <span class="comment">//N个人领取</span></span><br><span class="line"><span class="variable">$min</span>=<span class="number">0.01</span>; <span class="comment">//每个人最少能收到0.01元</span></span><br><span class="line"><span class="variable">$moneyArr</span> = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;<span class="variable">$n</span>;<span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="variable">$avg</span> = (<span class="variable">$m</span>-(<span class="variable">$n</span>-<span class="variable">$i</span>)*<span class="variable">$min</span>)/(<span class="variable">$n</span>-<span class="variable">$i</span>);</span><br><span class="line">   <span class="variable">$money</span> = <span class="title function_ invoke__">mt_rand</span>(<span class="variable">$min</span>*<span class="number">100</span>,<span class="variable">$avg</span>*<span class="number">100</span>)/<span class="number">100</span>;</span><br><span class="line">   <span class="variable">$m</span> -= <span class="variable">$money</span>;</span><br><span class="line">   <span class="variable">$moneyArr</span>[<span class="variable">$i</span>] = <span class="variable">$money</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;第&#x27;</span> . <span class="variable">$i</span> . <span class="string">&#x27;个红包：&#x27;</span> . <span class="variable">$money</span> . <span class="string">&#x27;元，余额：&#x27;</span> . <span class="variable">$m</span> . <span class="string">&#x27;元&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$moneyArr</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 红包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL免安装版，遇到MSVCR120.dll文件丢失错误</title>
      <link href="/missed-MSVCR120-dll/"/>
      <url>/missed-MSVCR120-dll/</url>
      
        <content type="html"><![CDATA[<p>在进行mysql zip版本的安装时，遇到<code>无法启动此程序，因为计算机中丢失MSVCR120.dll。尝试重新安装该程序已解决问题</code><br>在网上找了相关的文件拷贝到相应目录下，但还是不行。 <br>后来终于找到解决方法：下载 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784">VC redist packages for x64</a>，下载完成，点击运行即可。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> MSVCR120.dll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js禁止网页复制、查看源代码</title>
      <link href="/ban-cp/"/>
      <url>/ban-cp/</url>
      
        <content type="html"><![CDATA[<p>网页禁止右键、禁止查看源代码、禁止复制的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">oncontextmenu</span>=<span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;event.returnValue=false;&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onselectstart</span>=<span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;event.returnValue=false;&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5模型belongsTo和hasOne的区别</title>
      <link href="/hasOnebelongsTo/"/>
      <url>/hasOnebelongsTo/</url>
      
        <content type="html"><![CDATA[<p>在使用tp5模型的ORM的时候出现belongsTo和hasOne都有表示一对一的关系，但是二者并不相同。</p><span id="more"></span><p>以下举例说明两者的区别：<br>首先有user表 字段 id name password字段<br>然后有user_address表 id user_id city字段</p><ul><li><p>在User模型中关联user_address表的时候使用<code>hasOne</code>，因为在user表中没有关联两个表的外键</p></li><li><p>在UserAddress模型中关联user表的时候使用<code>belongsTo</code>，因为在user_address表中有关联两个表的外键user_id</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tp5 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql创建用户并授权</title>
      <link href="/mysql-new-user/"/>
      <url>/mysql-new-user/</url>
      
        <content type="html"><![CDATA[<p>MySQL5.7 mysql.user表没有password字段改 authentication_string；</p><span id="more"></span><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ul><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;username&#x27;@&#x27;host&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>PS </p><ul><li><code>username</code> - 你将创建的用户名</li><li><code>host</code> - 指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;</li><li><code>password</code> - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。</li></ul></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;test&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">CREATE USER &#x27;test1&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><ul><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT privileges ON db_name.tablename TO &#x27;username&#x27;@&#x27;host&#x27;</span><br><span class="line"></span><br><span class="line">GRANT ALL privileges on db_name.* to username@&#x27;%&#x27; with grant option; #授权(MySQL8.0版本)</span><br></pre></td></tr></table></figure></li><li><p>PS:</p><ul><li><code>privileges</code> - 用户的操作权限,如<code>SELECT , INSERT , UPDATE </code>等.如果要授予所的权限则使用ALL.; </li><li><code>db_name</code> - 数据库名,<code>tablename</code>-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用* 表示, 如*</li><li><code>host</code> - 指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;</li></ul></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT, INSERT ON demo.* TO &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="刷新系统权限表"><a href="#刷新系统权限表" class="headerlink" title="刷新系统权限表"></a>刷新系统权限表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="查看用户的授权"><a href="#查看用户的授权" class="headerlink" title="查看用户的授权"></a>查看用户的授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for dog@localhost;</span><br></pre></td></tr></table></figure><ul><li>PS<br>GRANT USAGE:mysql usage权限就是空权限，默认create user的权限，只能连库，啥也不能干.</li></ul><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP USER &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中常用的加密解密方法</title>
      <link href="/php-encryp/"/>
      <url>/php-encryp/</url>
      
        <content type="html"><![CDATA[<p>php加密解密:php加密和解密函数通常可以用来加密一些有用的字符串存放在数据库里或作为各个子系统间同步登陆的令牌，并且通过解密算法解密字符串，该函数使用了base64和MD5加密和解密。</p><span id="more"></span><h3 id="第一种加密解密算法"><a href="#第一种加密解密算法" class="headerlink" title="第一种加密解密算法"></a>第一种加密解密算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function encryptDecrypt($key, $string, $decrypt)&#123;   </span><br><span class="line">    if($decrypt)&#123;   </span><br><span class="line">        $decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($key), base64_decode($string), MCRYPT_MODE_CBC, md5(md5($key))), &quot;12&quot;);   </span><br><span class="line">        return $decrypted;   </span><br><span class="line">    &#125;else&#123;   </span><br><span class="line">        $encrypted = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($key), $string, MCRYPT_MODE_CBC, md5(md5($key))));   </span><br><span class="line">        return $encrypted;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="第二种加密解密算法："><a href="#第二种加密解密算法：" class="headerlink" title="第二种加密解密算法："></a>第二种加密解密算法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//加密函数  </span><br><span class="line">function lock_url($txt,$key=&#x27;hahaha&#x27;)&#123;  </span><br><span class="line">    $txt = $txt.$key;  </span><br><span class="line">    $chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-=+&quot;;  </span><br><span class="line">    $nh = rand(0,64);  </span><br><span class="line">    $ch = $chars[$nh];  </span><br><span class="line">    $mdKey = md5($key.$ch);  </span><br><span class="line">    $mdKey = substr($mdKey,$nh%8, $nh%8+7);  </span><br><span class="line">    $txt = base64_encode($txt);  </span><br><span class="line">    $tmp = &#x27;&#x27;;  </span><br><span class="line">    $i=0;$j=0;$k = 0;  </span><br><span class="line">    for ($i=0; $i&lt;strlen($txt); $i++) &#123;  </span><br><span class="line">        $k = $k == strlen($mdKey) ? 0 : $k;  </span><br><span class="line">        $j = ($nh+strpos($chars,$txt[$i])+ord($mdKey[$k++]))%64;  </span><br><span class="line">        $tmp .= $chars[$j];  </span><br><span class="line">    &#125;  </span><br><span class="line">    return urlencode(base64_encode($ch.$tmp));  </span><br><span class="line">&#125;  </span><br><span class="line">//解密函数  </span><br><span class="line">function unlock_url($txt,$key=&#x27;hahaha&#x27;)&#123;  </span><br><span class="line">    $txt = base64_decode(urldecode($txt));  </span><br><span class="line">    $chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-=+&quot;;  </span><br><span class="line">    $ch = $txt[0];  </span><br><span class="line">    $nh = strpos($chars,$ch);  </span><br><span class="line">    $mdKey = md5($key.$ch);  </span><br><span class="line">    $mdKey = substr($mdKey,$nh%8, $nh%8+7);  </span><br><span class="line">    $txt = substr($txt,1);  </span><br><span class="line">    $tmp = &#x27;&#x27;;  </span><br><span class="line">    $i=0;$j=0; $k = 0;  </span><br><span class="line">    for ($i=0; $i&lt;strlen($txt); $i++) &#123;  </span><br><span class="line">        $k = $k == strlen($mdKey) ? 0 : $k;  </span><br><span class="line">        $j = strpos($chars,$txt[$i])-$nh - ord($mdKey[$k++]);  </span><br><span class="line">        while ($j&lt;0) $j+=64;  </span><br><span class="line">        $tmp .= $chars[$j];  </span><br><span class="line">    &#125;  </span><br><span class="line">    return trim(base64_decode($tmp),$key);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="第三种加密解密算法："><a href="#第三种加密解密算法：" class="headerlink" title="第三种加密解密算法："></a>第三种加密解密算法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">function passport_encrypt($txt, $key = &#x27;hahaha&#x27;) &#123;   </span><br><span class="line">    srand((double)microtime() * 1000000);   </span><br><span class="line">    $encrypt_key = md5(rand(0, 32000));   </span><br><span class="line">    $ctr = 0;   </span><br><span class="line">    $tmp = &#x27;&#x27;;   </span><br><span class="line">    for($i = 0;$i &lt; strlen($txt); $i++) &#123;   </span><br><span class="line">    $ctr = $ctr == strlen($encrypt_key) ? 0 : $ctr;   </span><br><span class="line">    $tmp .= $encrypt_key[$ctr].($txt[$i] ^ $encrypt_key[$ctr++]);   </span><br><span class="line">    &#125;   </span><br><span class="line">    return urlencode(base64_encode(passport_key($tmp, $key)));   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">function passport_decrypt($txt, $key = &#x27;hahaha&#x27;) &#123;   </span><br><span class="line">    $txt = passport_key(base64_decode(urldecode($txt)), $key);   </span><br><span class="line">    $tmp = &#x27;&#x27;;   </span><br><span class="line">    for($i = 0;$i &lt; strlen($txt); $i++) &#123;   </span><br><span class="line">    $md5 = $txt[$i];   </span><br><span class="line">    $tmp .= $txt[++$i] ^ $md5;   </span><br><span class="line">    &#125;   </span><br><span class="line">    return $tmp;   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">function passport_key($txt, $encrypt_key) &#123;   </span><br><span class="line">    $encrypt_key = md5($encrypt_key);   </span><br><span class="line">    $ctr = 0;   </span><br><span class="line">    $tmp = &#x27;&#x27;;   </span><br><span class="line">    for($i = 0; $i &lt; strlen($txt); $i++) &#123;   </span><br><span class="line">    $ctr = $ctr == strlen($encrypt_key) ? 0 : $ctr;   </span><br><span class="line">    $tmp .= $txt[$i] ^ $encrypt_key[$ctr++];   </span><br><span class="line">    &#125;   </span><br><span class="line">    return $tmp;   </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="第四种加密解密算法："><a href="#第四种加密解密算法：" class="headerlink" title="第四种加密解密算法："></a>第四种加密解密算法：</h3><p>discuz中使用的加密解密算法<br>项目中有时我们需要使用PHP将特定的信息进行加密，也就是通过加密算法生成一个加密字符串，这个加密后的字符串可以通过解密算法进行解密，便于程序对解密后的信息进行处理。最常见的应用在用户登录以及一些API数据交换的场景。最常见的应用在用户登录以及一些API数据交换的场景。加密解密原理一般都是通过一定的加密解密算法，将密钥加入到算法中，最终得到加密解密结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">//函数authcode($string, $operation, $key, $expiry)中的$string：字符串，明文或密文；$operation：DECODE表示解密，其它表示加密；$key：密匙；$expiry：密文有效期。  </span><br><span class="line">function authcode($string, $operation = &#x27;DECODE&#x27;, $key = &#x27;&#x27;, $expiry = 0) &#123;     </span><br><span class="line">    // 动态密匙长度，相同的明文会生成不同密文就是依靠动态密匙     </span><br><span class="line">    $ckey_length = 4;     </span><br><span class="line">         </span><br><span class="line">    // 密匙     </span><br><span class="line">    $key = md5($key ? $key : $GLOBALS[&#x27;discuz_auth_key&#x27;]);     </span><br><span class="line">         </span><br><span class="line">    // 密匙a会参与加解密     </span><br><span class="line">    $keya = md5(substr($key, 0, 16));     </span><br><span class="line">    // 密匙b会用来做数据完整性验证     </span><br><span class="line">    $keyb = md5(substr($key, 16, 16));     </span><br><span class="line">    // 密匙c用于变化生成的密文     </span><br><span class="line">    $keyc = $ckey_length ? ($operation == &#x27;DECODE&#x27; ? substr($string, 0, $ckey_length): substr(md5(microtime()), -$ckey_length)) : &#x27;&#x27;;     </span><br><span class="line">    // 参与运算的密匙     </span><br><span class="line">    $cryptkey = $keya.md5($keya.$keyc);     </span><br><span class="line">    $key_length = strlen($cryptkey);     </span><br><span class="line">    // 明文，前10位用来保存时间戳，解密时验证数据有效性，10到26位用来保存$keyb(密匙b)，   </span><br><span class="line">    //解密时会通过这个密匙验证数据完整性     </span><br><span class="line">    // 如果是解码的话，会从第$ckey_length位开始，因为密文前$ckey_length位保存 动态密匙，以保证解密正确     </span><br><span class="line">    $string = $operation == &#x27;DECODE&#x27; ? base64_decode(substr($string, $ckey_length)) :  sprintf(&#x27;%010d&#x27;, $expiry ? $expiry + time() : 0).substr(md5($string.$keyb), 0, 16).$string;     </span><br><span class="line">    $string_length = strlen($string);     </span><br><span class="line">    $result = &#x27;&#x27;;     </span><br><span class="line">    $box = range(0, 255);     </span><br><span class="line">    $rndkey = array();     </span><br><span class="line">    // 产生密匙簿     </span><br><span class="line">    for($i = 0; $i &lt;= 255; $i++) &#123;     </span><br><span class="line">        $rndkey[$i] = ord($cryptkey[$i % $key_length]);     </span><br><span class="line">    &#125;     </span><br><span class="line">    // 用固定的算法，打乱密匙簿，增加随机性，好像很复杂，实际上对并不会增加密文的强度     </span><br><span class="line">    for($j = $i = 0; $i &lt; 256; $i++) &#123;     </span><br><span class="line">        $j = ($j + $box[$i] + $rndkey[$i]) % 256;     </span><br><span class="line">        $tmp = $box[$i];     </span><br><span class="line">        $box[$i] = $box[$j];     </span><br><span class="line">        $box[$j] = $tmp;     </span><br><span class="line">    &#125;     </span><br><span class="line">    // 核心加解密部分     </span><br><span class="line">    for($a = $j = $i = 0; $i &lt; $string_length; $i++) &#123;     </span><br><span class="line">        $a = ($a + 1) % 256;     </span><br><span class="line">        $j = ($j + $box[$a]) % 256;     </span><br><span class="line">        $tmp = $box[$a];     </span><br><span class="line">        $box[$a] = $box[$j];     </span><br><span class="line">        $box[$j] = $tmp;     </span><br><span class="line">        // 从密匙簿得出密匙进行异或，再转成字符     </span><br><span class="line">        $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));     </span><br><span class="line">    &#125;     </span><br><span class="line">    if($operation == &#x27;DECODE&#x27;) &#123;    </span><br><span class="line">        // 验证数据有效性，请看未加密明文的格式     </span><br><span class="line">        if((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() &gt; 0) &amp;&amp;  substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16)) &#123;     </span><br><span class="line">            return substr($result, 26);     </span><br><span class="line">        &#125; else &#123;     </span><br><span class="line">            return &#x27;&#x27;;     </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125; else &#123;     </span><br><span class="line">        // 把动态密匙保存在密文里，这也是为什么同样的明文，生产不同密文后能解密的原因     </span><br><span class="line">        // 因为加密后的密文可能是一些特殊字符，复制过程可能会丢失，所以用base64编码     </span><br><span class="line">        return $keyc.str_replace(&#x27;=&#x27;, &#x27;&#x27;, base64_encode($result));     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="第五种加密解密算法："><a href="#第五种加密解密算法：" class="headerlink" title="第五种加密解密算法："></a>第五种加密解密算法：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//函数encrypt($string,$operation,$key)中$string：需要加密解密的字符串；$operation：判断是加密还是解密，E表示加密，D表示解密；$key：密匙。  </span><br><span class="line">function encrypt($string,$operation,$key=&#x27;&#x27;)&#123;   </span><br><span class="line">    $key=md5($key);   </span><br><span class="line">    $key_length=strlen($key);   </span><br><span class="line">      $string=$operation==&#x27;D&#x27;?base64_decode($string):substr(md5($string.$key),0,8).$string;   </span><br><span class="line">    $string_length=strlen($string);   </span><br><span class="line">    $rndkey=$box=array();   </span><br><span class="line">    $result=&#x27;&#x27;;   </span><br><span class="line">    for($i=0;$i&lt;=255;$i++)&#123;   </span><br><span class="line">           $rndkey[$i]=ord($key[$i%$key_length]);   </span><br><span class="line">        $box[$i]=$i;   </span><br><span class="line">    &#125;   </span><br><span class="line">    for($j=$i=0;$i&lt;256;$i++)&#123;   </span><br><span class="line">        $j=($j+$box[$i]+$rndkey[$i])%256;   </span><br><span class="line">        $tmp=$box[$i];   </span><br><span class="line">        $box[$i]=$box[$j];   </span><br><span class="line">        $box[$j]=$tmp;   </span><br><span class="line">    &#125;   </span><br><span class="line">    for($a=$j=$i=0;$i&lt;$string_length;$i++)&#123;   </span><br><span class="line">        $a=($a+1)%256;   </span><br><span class="line">        $j=($j+$box[$a])%256;   </span><br><span class="line">        $tmp=$box[$a];   </span><br><span class="line">        $box[$a]=$box[$j];   </span><br><span class="line">        $box[$j]=$tmp;   </span><br><span class="line">        $result.=chr(ord($string[$i])^($box[($box[$a]+$box[$j])%256]));   </span><br><span class="line">    &#125;   </span><br><span class="line">    if($operation==&#x27;D&#x27;)&#123;   </span><br><span class="line">        if(substr($result,0,8)==substr(md5(substr($result,8).$key),0,8))&#123;   </span><br><span class="line">            return substr($result,8);   </span><br><span class="line">        &#125;else&#123;   </span><br><span class="line">            return&#x27;&#x27;;   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;else&#123;   </span><br><span class="line">        return str_replace(&#x27;=&#x27;,&#x27;&#x27;,base64_encode($result));   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 解密 </tag>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trim 中文乱码</title>
      <link href="/trim-cn/"/>
      <url>/trim-cn/</url>
      
        <content type="html"><![CDATA[<p>trim 中文乱码 ,问题来了，没有 mb_trim这样的函数 没有可以封装一个</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">echo rawurlencode(&#x27;河北省&#x27;);//%E6%B2%B3%E5%8C%97%E7%9C%81</span><br><span class="line">echo rawurlencode(&#x27;广东省&#x27;);//%E5%B9%BF%E4%B8%9C%E7%9C%81</span><br><span class="line">echo rtrim(&#x27;河北省&#x27;, &#x27;省&#x27;);//河北</span><br><span class="line">echo rtrim(&#x27;广东省&#x27;, &#x27;省&#x27;);//广��</span><br><span class="line">//省的十六制作表示是e7 9c 81，而东的十六进制表示是e4 b8 9c，都出现了9c，哦~正因为是rtrim，所以rtrim(&#x27;广东省&#x27;, &#x27;省&#x27;)的时候把“东”的十六进制表示的最后一位也被trim掉了。同理rtrim(&#x27;河北省&#x27;, &#x27;省&#x27;)不存在此问题</span><br><span class="line"></span><br><span class="line">echo trim_cn(&#x27;广东省&#x27;,&#x27;省&#x27;);//广东</span><br><span class="line"></span><br><span class="line">function trim_cn($str, $trim, $charset = &#x27;UTF-8&#x27;) &#123;</span><br><span class="line">    $len = mb_strlen($str, $charset);</span><br><span class="line">    if (!$len)</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    $t1 = $t2 = false;$o=$l=0;</span><br><span class="line">    for($i=0;$i&lt;$len;$i++)</span><br><span class="line">    &#123;</span><br><span class="line">        $str1 = mb_substr($str, $i, 1, $charset);</span><br><span class="line">        $str2 = mb_substr($str, $len-$i-1, 1, $charset);</span><br><span class="line">        if($str1 == $trim &amp;&amp; !$t1) $o++; else $t1 = true;</span><br><span class="line">        if($str2 == $trim &amp;&amp; !$t2) $l++; else $t2 = true;</span><br><span class="line">    &#125;</span><br><span class="line">    return mb_substr($str, $o, ($len-$l-$o), $charset);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trim </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注释</title>
      <link href="/fun-code/"/>
      <url>/fun-code/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F;就是注释</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">*                 .-~~~~~~~~~-._       _.-~~~~~~~~~-.</span><br><span class="line">*             __.&#x27;              ~.   .~              `.__</span><br><span class="line">*           .&#x27;//                  \./                  \\`.</span><br><span class="line">*         .&#x27;//                     |                     \\`.</span><br><span class="line">*       .&#x27;// .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._     |     _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\`.</span><br><span class="line">*     .&#x27;//.-&quot;                 `-.  |  .-&#x27;                 &quot;-.\\`.</span><br><span class="line">*   .&#x27;//______.============-..   \ | /   ..-============.______\\`.</span><br><span class="line">* .&#x27;______________________________\|/______________________________`.</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="line"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span><br><span class="line"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="line"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="line"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span><br><span class="line"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="line"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="line"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="line"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#x27;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="line"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="line"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="line"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="line"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="line"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*                    .::::.</span><br><span class="line">*                  .::::::::.</span><br><span class="line">*                 :::::::::::  FUCK YOU</span><br><span class="line">*             ..:::::::::::&#x27;</span><br><span class="line">*           &#x27;::::::::::::&#x27;</span><br><span class="line">*             .::::::::::</span><br><span class="line">*        &#x27;::::::::::::::..</span><br><span class="line">*             ..::::::::::::.</span><br><span class="line">*           ``::::::::::::::::</span><br><span class="line">*            ::::``:::::::::&#x27;        .:::.</span><br><span class="line">*           ::::&#x27;   &#x27;:::::&#x27;       .::::::::.</span><br><span class="line">*         .::::&#x27;      ::::     .:::::::&#x27;::::.</span><br><span class="line">*        .:::&#x27;       :::::  .:::::::::&#x27; &#x27;:::::.</span><br><span class="line">*       .::&#x27;        :::::.:::::::::&#x27;      &#x27;:::::.</span><br><span class="line">*      .::&#x27;         ::::::::::::::&#x27;         ``::::.</span><br><span class="line">*  ...:::           ::::::::::::&#x27;              ``::.</span><br><span class="line">* ```` &#x27;:.          &#x27;:::::::::&#x27;                  ::::..</span><br><span class="line">*                    &#x27;.:::::&#x27;                    &#x27;:&#x27;````..</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-rank</title>
      <link href="/mysql-rank/"/>
      <url>/mysql-rank/</url>
      
        <content type="html"><![CDATA[<p>MySQL中没有Rank排名函数，当我们需要查询排名时，只能使用MySQL数据库中的基本查询语句来查询普通排名。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from score;</span><br><span class="line">+----+-------+             </span><br><span class="line">| id | score |             </span><br><span class="line">+----+-------+             </span><br><span class="line">|  1 |    66 |             </span><br><span class="line">|  2 |    80 |             </span><br><span class="line">|  3 |    90 |             </span><br><span class="line">|  4 |    88 |             </span><br><span class="line">|  5 |    89 |             </span><br><span class="line">|  6 |    60 |             </span><br><span class="line">|  7 |    90 |             </span><br><span class="line">|  8 |    99 |             </span><br><span class="line">|  9 |    98 |             </span><br><span class="line">+----+-------+             </span><br><span class="line">9 rows in set (0.00 sec)   </span><br></pre></td></tr></table></figure><p>排序后的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">|    99 |    1 |</span><br><span class="line">|    98 |    2 |</span><br><span class="line">|    90 |    3 |</span><br><span class="line">|    90 |    3 |</span><br><span class="line">|    89 |    4 |</span><br><span class="line">|    88 |    5 |</span><br><span class="line">|    80 |    6 |</span><br><span class="line">|    66 |    7 |</span><br><span class="line">|    60 |    8 |</span><br><span class="line">+-------+------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  Score,</span><br><span class="line">  @rank := @rank + (@prev &lt;&gt; (@prev := Score)) Rank</span><br><span class="line">FROM</span><br><span class="line">  Scores,</span><br><span class="line">  (SELECT @rank := 0, @prev := -1) init</span><br><span class="line">ORDER BY Score desc</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  Score,</span><br><span class="line">  (SELECT count(distinct Score) FROM Scores WHERE Score &gt;= s.Score) Rank</span><br><span class="line">FROM Scores s</span><br><span class="line">ORDER BY Score desc</span><br></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  Score,</span><br><span class="line">  (SELECT count(*) FROM (SELECT distinct Score s FROM Scores) tmp WHERE s &gt;= Score) Rank</span><br><span class="line">FROM Scores</span><br><span class="line">ORDER BY Score desc</span><br></pre></td></tr></table></figure><h3 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.Score, count(distinct t.score) Rank</span><br><span class="line">FROM Scores s JOIN Scores t ON s.Score &lt;= t.score</span><br><span class="line">GROUP BY s.Id</span><br><span class="line">ORDER BY s.Score desc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 排名 </tag>
            
            <tag> 名次 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘记mysql密码</title>
      <link href="/mysql-reset-password/"/>
      <url>/mysql-reset-password/</url>
      
        <content type="html"><![CDATA[<p>MySQL下创建新用户、新数据库、设定访问权限控制都需要用到root密码。万一把root密码忘了，该怎么办？</p><span id="more"></span><h3 id="安全模式重置法"><a href="#安全模式重置法" class="headerlink" title="安全模式重置法"></a>安全模式重置法</h3><p>基本的思路是，以安全模式启动mysql，这样不需要密码可以直接以root身份登录，然后重设密码。<br>先，我们停掉MySQL服务：<code>sudo service mysql stop</code><br>以上命令适用于Ubuntu和Debian。CentOS、Fedora和RHEL下使用mysqld替换mysql。<br>以安全模式启动MySQL：<br><code>sudo mysqld_safe --skip-grant-tables --skip-networking &amp;</code><br>注意我们加了<code>--skip-networking</code>，避免远程无密码登录 MySQL。<br>这样我们就可以直接用root登录，无需密码：<br><code>mysql -u root</code><br>接下来重设密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql; </span><br><span class="line">mysql&gt; update user set password=PASSWORD(&quot;mynewpassword&quot;) where User=&#x27;root&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p><code>flush privileges;</code>是刷新权限</p><p>注意，命令后需要加分号。<br>重设完毕后，退出<br><code>mysql &gt; quit</code><br>然后重启 MySQL 服务：<br><code>service mysql restart</code><br>同样，以上命令适用于Ubuntu和Debian，Centos、Fedora和RHEL需要用<code>mysqld</code>替换<code>mysql</code>。</p><p>现在可以尝试用新密码登录了：<br><code>mysql -u root -p</code><br>再提示输入密码就可以了</p><h3 id="修改MySQL的登录设置"><a href="#修改MySQL的登录设置" class="headerlink" title="修改MySQL的登录设置"></a>修改MySQL的登录设置</h3><p>这是在centos下的<br><code>vim /etc/my.cnf</code><br>在[mysqld]的段中加上一句：<br><code>skip-grant-tables</code><br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br></pre></td></tr></table></figure><p>保存并且退出(ESC后输入<code>:wq</code>，表示保存并退出)。<br>重新启动mysqld:<code>service mysqld restart</code><br>登录并修改MySQL的root密码<br><code>mysql -u root</code></p><p>接下来重设密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql; </span><br><span class="line">mysql&gt; update user set password=PASSWORD(&quot;mynewpassword&quot;) where User=&#x27;root&#x27;; </span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>退出<br>记得将MySQL的登录设置修改回来<br>将刚才在[mysqld]的段中加上的<code>skip-grant-tables</code>删除<br>保存并且退出<br>重启MySql：<code>service mysqld restart</code></p><p>这里有个坑：由于mysql版本不同，可能user表的字段也是不相同的，比如在5.7版本中，验证密码字段不是叫<code>password</code> 而是 <code>authentication_string</code>，在修改密码的时候就需要修改字段了。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> password </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎InnoDB与Myisam的区别</title>
      <link href="/mysql-storageengine/"/>
      <url>/mysql-storageengine/</url>
      
        <content type="html"><![CDATA[<p>MySQL有多种存储引擎，每种存储引擎有各自的优缺点，可以择优选择使用：MyISAM、InnoDB、MERGE、MEMORY(HEAP)、BDB(BerkeleyDB)、EXAMPLE、FEDERATED、ARCHIVE、CSV、BLACKHOLE。</p><span id="more"></span><p>MySQL有多种存储引擎，每种存储引擎有各自的优缺点，可以择优选择使用：</p><p>MyISAM、InnoDB、MERGE、MEMORY(HEAP)、BDB(BerkeleyDB)、EXAMPLE、FEDERATED、ARCHIVE、CSV、BLACKHOLE。</p><p>MySQL支持数个存储引擎作为对不同表的类型的处理器。MySQL存储引擎包括处理事务安全表的引擎和处理非事务安全表的引擎：</p><ul><li><p>MyISAM管理非事务表。它提供高速存储和检索，以及全文搜索能力。MyISAM在所有MySQL配置里被支持，它是默认的存储引擎，除非你配置MySQL默认使用另外一个引擎。</p></li><li><p>MEMORY存储引擎提供“内存中”表。MERGE存储引擎允许集合将被处理同样的MyISAM表作为一个单独的表。就像MyISAM一样，MEMORY和MERGE存储引擎处理非事务表，这两个引擎也都被默认包含在MySQL中。</p></li></ul><p> 注释：MEMORY存储引擎正式地被确定为HEAP引擎。</p><ul><li><p>InnoDB和BDB存储引擎提供事务安全表。BDB被包含在为支持它的操作系统发布的MySQL-Max二进制分发版里。InnoDB也默认被包括在所 有MySQL 5.1二进制分发版里，你可以按照喜好通过配置MySQL来允许或禁止任一引擎。</p></li><li><p>EXAMPLE存储引擎是一个“存根”引擎，它不做什么。你可以用这个引擎创建表，但没有数据被存储于其中或从其中检索。这个引擎的目的是服务，在 MySQL源代码中的一个例子，它演示说明如何开始编写新存储引擎。同样，它的主要兴趣是对开发者。</p></li><li><p>NDB Cluster是被MySQL Cluster用来实现分割到多台计算机上的表的存储引擎。它在MySQL-Max 5.1二进制分发版里提供。这个存储引擎当前只被Linux, Solaris, 和Mac OS X 支持。在未来的MySQL分发版中，我们想要添加其它平台对这个引擎的支持，包括Windows。</p></li><li><p>ARCHIVE存储引擎被用来无索引地，非常小地覆盖存储的大量数据。</p></li><li><p>CSV存储引擎把数据以逗号分隔的格式存储在文本文件中。</p></li><li><p>BLACKHOLE存储引擎接受但不存储数据，并且检索总是返回一个空集。</p></li><li><p>FEDERATED存储引擎把数据存在远程数据库中。在MySQL 5.1中，它只和MySQL一起工作，使用MySQL C Client API。在未来的分发版中，我们想要让它使用其它驱动器或客户端连接方法连接到另外的数据源。</p></li></ul><p><strong>比较常用的是MyISAM和InnoBD</strong></p><table><thead><tr><th></th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>构成上的区别</td><td>每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。  .frm文件存储表定义。 数据文件的扩展名为.MYD (MYData)。  索引文件的扩展名是.MYI (MYIndex)。</td><td>基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</td></tr><tr><td>事务处理上方面</td><td>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持</td><td>InnoDB提供事务支持事务，外部键（foreign key）等高级数据库功能</td></tr><tr><td>SELECT,UPDATE,INSERT,Delete操作</td><td>如果执行大量的SELECT，MyISAM是更好的选择</td><td>1.如果你的数据执行大量的<code>INSERT</code>或<code>UPDATE</code>，出于性能方面的考虑，应该使用InnoDB表。 2.<code>DELETE   FROM table</code>时，InnoDB不会重新建立表，而是一行一行的删除。3.<code>LOAD TABLE FROM MASTER</code>操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性（例如外键）的表不适用</td></tr><tr><td>对<code>AUTO_INCREMENT</code>的操作</td><td>每表一个AUTO_INCREMEN列的内部处理。MyISAM为<code>INSERT</code>和<code>UPDATE</code>操作自动更新这一列。这使得AUTO_INCREMENT列更快（至少10%）。在序列顶的值被删除之后就不能再利用。(当AUTO_INCREMENT列被定义为多列索引的最后一列，可以出现重使用从序列顶部删除的值的情况）。 AUTO_INCREMENT值可用ALTER TABLE或myisamch来重置.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引.更好和更快的auto_increment处理</td><td>如果你为一个表指定AUTO_INCREMENT列，在数据词典里的InnoDB表句柄包含一个名为自动增长计数器的计数器，它被用在为该列赋新值。自动增长计数器仅被存储在主内存中，而不是存在磁盘上.关于该计算器的算法实现，请参考AUTO_INCREMENT列在InnoDB里如何工作</td></tr><tr><td>表的具体行数</td><td><code>select count(*) from table</code>,MyISAM只要简单的读出保存好的行数，注意的是，当<code>count(*)</code>语句包含   <code>where</code>条件时，两种表的操作是一样的</td><td>InnoDB 中不保存表的具体行数，也就是说，执行<code>select count(*) from table</code>时，InnoDB要扫描一遍整个表来计算有多少行</td></tr><tr><td>锁</td><td>表锁</td><td>提供行锁(locking on row level)，提供与 Oracle 类型一致的不加锁读取(non-locking read in SELECTs)，另外，InnoDB表的行锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表， 例如<code>update table set num=1 where name like &quot;%aaa%&quot;</code></td></tr><tr><td>**MySQL存储引擎MyISAM与InnoDB如何选择？ **</td><td></td><td></td></tr><tr><td>虽然MySQL里的存储引擎不只是MyISAM与InnoDB这两个，但常用的就是它俩了。可能有站长并未注意过MySQL的存储引擎，其实存储引擎也是数据库设计里的一大重要点，那么博客系统应该使用哪种存储引擎呢？</td><td></td><td></td></tr><tr><td>下面我们分别来看两种存储引擎的区别。</td><td></td><td></td></tr></tbody></table><p>一、InnoDB支持事务，MyISAM不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。</p><p>二、MyISAM适合查询以及插入为主的应用，InnoDB适合频繁修改以及涉及到安全性较高的应用</p><p>三、InnoDB支持外键，MyISAM不支持</p><p>四、MyISAM是默认引擎，InnoDB需要指定</p><p>五、InnoDB不支持FULLTEXT类型的索引</p><p>六、InnoDB中不保存表的行数，如<code>select count(*) from table</code>时，InnoDB需要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含where条件时MyISAM也需要扫描整个表</p><p>七、对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引</p><p>八、清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表</p><p>九、InnoDB支持行锁（某些情况下还是锁整表，如 <code>update table set a=1 where user like &#39;%lee%&#39;</code>)</p><p><strong>MyISAM：</strong></p><p>每个MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm文件存储表定义。数据文件的扩展名为.MYD (MYData)。</p><p>MyISAM表格可以被压缩，而且它们支持全文搜索。不支持事务，而且也不支持外键。如果事物回滚将造成不完全回滚，不具有原子性。在进行updata时进行表锁，并发量相对较小。如果执行大量的SELECT，MyISAM是更好的选择。</p><p>MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小</p><p>MyISAM缓存在内存的是索引，不是数据。而InnoDB缓存在内存的是数据，相对来说，服务器内存越大，InnoDB发挥的优势越大。</p><p>优点：查询数据相对较快，适合大量的select，可以全文索引。</p><p>缺点：不支持事务，不支持外键，并发量较小，不适合大量update</p><p><strong>InnoDB：</strong></p><p>这种类型是事务安全的。.它与BDB类型具有相同的特性,它们还支持外键。InnoDB表格速度很快。具有比BDB还丰富的特性,因此如果需要一个事务安全的存储引擎，建议使用它。在update时表进行行锁，并发量相对较大。如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表。</p><p>优点：支持事务，支持外键，并发量较大，适合大量update</p><p>缺点：查询数据相对较快，不适合大量的select</p><p>对于支持事物的InnoDB类型的表，影响速度的主要原因是AUTOCOMMIT默认设置是打开的，而且程序没有显式调用BEGIN 开始事务，导致每插入一条都自动Commit，严重影响了速度。可以在执行sql前调用begin，多条sql形成一个事物（即使autocommit打开也可以），将大大提高性能。</p><p>基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。</p><p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能。</p><p>说InnoDB不适合做count是不对的，MyISAM也是一样的慢，只不过MyISAM将正表的行数缓存起来，所以count整表很快，如果有查询条件，并且不是主键查询，那就没有什么区别，主键count慢的原因是innodb是按照主键组织的，按照主键count的时候，会加载数据</p><p>InnoDB的页式存储会使得InnoDB更容易做整表缓存和热备份<br>如果表索引很多，那么InnoDB的更新速度要大于MyISAM，因为InnoDB的辅助索引关联的是表的主键，是一个逻辑的值，而MyISAM的所有索引关联的是数据的物理位置，更新时有可能数据的物理位置发生变化，如果发生变化，那么所有的索引都要做更新</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 存储引擎 </tag>
            
            <tag> InnoDB </tag>
            
            <tag> Myisam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git与Github常用命令汇总</title>
      <link href="/git-github-command/"/>
      <url>/git-github-command/</url>
      
        <content type="html"><![CDATA[<p>Git 是由 Linux kernel创立者 Linux Torvalds 开发的（因为 BitKeeper 的问题），属于 DVCS（分布式版本控制</p><p>Github 是一个开源项目社区，始于2007（08上线），GitHub 里面的项目可以通过标准的 Git 命令进行访问和操作</p><span id="more"></span><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name crperlin  //git的用户名</span><br><span class="line">git config --global user.email crper@outlook.com  //git的登录账号</span><br><span class="line">git config --global core.editor vim  //设置默认编辑器</span><br><span class="line">git config --global merge.tool vimdiff //设置默认的对比文件差异工具</span><br><span class="line">git config --global color.status auto //显示颜色信息</span><br><span class="line">git config --global color.branch auto //显示颜色信息</span><br><span class="line">git config --global color.interactive auto //显示颜色信息</span><br><span class="line">git config --global color.diff auto //显示颜色信息</span><br><span class="line">git config --global push.default simple //简化提交</span><br><span class="line">git config --list //查看配置的信息</span><br><span class="line"></span><br><span class="line">git help config //获取帮助信息</span><br></pre></td></tr></table></figure><h3 id="配置SSHKEY"><a href="#配置SSHKEY" class="headerlink" title="配置SSHKEY"></a>配置SSHKEY</h3><p>配置这货的好处就是可以省去提交的时候每次都输入账号密码；减少重复工作！</p><p>不管是github还是一些基于gitlab的托管社区，配置这个都是大同小异，在个人账户那里找到<code>SSH-KEYGEN</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C crper@outlook.com //生成密钥，也可以通过图形工具生成，看个人喜好</span><br><span class="line"></span><br><span class="line">ssh -T git@github.com //测试链接github是否成功，其他社区域名不同罢了</span><br></pre></td></tr></table></figure><h3 id="初始化本地仓库-提交-链接远程仓库"><a href="#初始化本地仓库-提交-链接远程仓库" class="headerlink" title="初始化本地仓库&#x2F;提交&#x2F;链接远程仓库"></a>初始化本地仓库&#x2F;提交&#x2F;链接远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init    //初始化</span><br><span class="line">git status  //获取状态,很实用的一个功能，对文件做了操作都能看到各种提示信息</span><br><span class="line">git add &lt;file&gt;  //. 或 * 代表全部添加</span><br><span class="line">git commit -m &quot;注释文本&quot;    //添加注释</span><br><span class="line">git remote add origin git@github.com:crperlin/S-NEXT.git //本地链接远程仓库</span><br><span class="line">git push -u origin master  //推送到主分支</span><br></pre></td></tr></table></figure><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>一般的git托管社区都提供两种，一种是基于https，一种是基于ssh</p><p>前者需要账号密码提交，后者可以配置<code>SSH-KEYGEN</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:crperlin/S-NEXT.git    //克隆到本地，仓库名就是文件夹的名字</span><br><span class="line">git clone xx.git &lt;自定义文件夹名字&gt; //不需要带括号，只是区别</span><br></pre></td></tr></table></figure><h3 id="git仓库操作"><a href="#git仓库操作" class="headerlink" title="git仓库操作"></a>git仓库操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git add * //跟踪新文件</span><br><span class="line">git rm -f * //强制删除所有文件</span><br><span class="line">git rm --cached *   //取消跟踪</span><br><span class="line">git mv file_from file_to    //重命名跟踪文件，与linux一致</span><br><span class="line">git log //查看提交记录</span><br><span class="line">git commit //提交更新</span><br><span class="line">git commit -m &quot;注释文本&quot;    //添加注释</span><br><span class="line">git commit -a   //跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交</span><br><span class="line">git commit --amend  //修改最后一次提交</span><br><span class="line">git reset HEAD * //取消已经暂存的文件</span><br><span class="line">git checkout -- file //取消对文件的修改（从暂存区去除file）</span><br><span class="line">git checkout branch|tag|commit -- file_name //从仓库取出file覆盖当前分支</span><br><span class="line">git checkout -- .  //从暂存区去除文件覆盖工作区</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git branch  //列出本地分支</span><br><span class="line">git branch -r   //列出远端分支</span><br><span class="line">git branch -a   //列出所有分支</span><br><span class="line">git branch -v   //查看各个分支最后一个提交对象的信息</span><br><span class="line">git branch --merge  //查看已经合并到当前分支的分支</span><br><span class="line">git branch --no-merge   //查看为合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git branch test //新建test分支</span><br><span class="line">git checkout test   //切换到test分支</span><br><span class="line">git checkout -b test    //新建+切换到test分支</span><br><span class="line">git checkout -b test dev//基于dev新建test分支，并切换</span><br><span class="line"></span><br><span class="line">git branch -d test  //删除test分支</span><br><span class="line">git branch -D test  //强制删除test分支</span><br><span class="line"></span><br><span class="line">git merge test  //将test分支合并到当前分支</span><br><span class="line">git rebase master   //将master分之上超前的提交，变基到当前分支</span><br></pre></td></tr></table></figure><h3 id="分支数据推送更新"><a href="#分支数据推送更新" class="headerlink" title="分支数据推送更新"></a>分支数据推送更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin branch //获取远端上指定分支</span><br><span class="line">git merge origin branch //合并远端上指定分支</span><br><span class="line">git push origin branch  //推送到远端上指定分支</span><br><span class="line">git push origin localbranch:serverbranch    //推送到远端上指定分支</span><br><span class="line"></span><br><span class="line">git checkout -b test origin/dev //基于远端dev新建test分支</span><br><span class="line"></span><br><span class="line">git push origin :server//删除远端分支[推送空分支，目前等同于删除]</span><br></pre></td></tr></table></figure><h3 id="标签版本管理"><a href="#标签版本管理" class="headerlink" title="标签版本管理"></a>标签版本管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git tag//列出现有标签  </span><br><span class="line"></span><br><span class="line">git tag v1.0.0  //新建标签</span><br><span class="line">git tag -a v0.1 -m &#x27;注释文本&#x27;   //新建带注释标签</span><br><span class="line">git tag v2.0 9fceb02    //给指定的指向添加版本</span><br><span class="line">git show &lt;version&gt; //显示指定版本的详细信息</span><br><span class="line"></span><br><span class="line">git checkout tagname //切换到标签</span><br><span class="line"></span><br><span class="line">git push origin v1.5 //推送分支到源上</span><br><span class="line">git push origin --tags //一次性推送所有分支</span><br><span class="line"></span><br><span class="line">git tag -d v0.1 //删除标签</span><br><span class="line">git push origin :refs/tags/v0.1 //删除远程标签</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//放弃工作目录下的所有修改：</span><br><span class="line">git reset --hard HEAD</span><br><span class="line"></span><br><span class="line">//移除缓存区的所有文件（i.e. 撤销上次git add）:</span><br><span class="line">git reset HEAD</span><br><span class="line"></span><br><span class="line">//放弃某个文件的所有本地修改：</span><br><span class="line">git checkout HEAD &lt;file&gt;</span><br><span class="line"></span><br><span class="line">//重置一个提交（通过创建一个截然不同的新提交）</span><br><span class="line">git revert &lt;commit&gt;</span><br><span class="line"></span><br><span class="line">//将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</span><br><span class="line">git reset --hard &lt;commit&gt;</span><br><span class="line"></span><br><span class="line">//将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</span><br><span class="line">git reset &lt;commit&gt;</span><br><span class="line"></span><br><span class="line">//将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</span><br><span class="line">git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure><h3 id="文本搜索"><a href="#文本搜索" class="headerlink" title="文本搜索"></a>文本搜索</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git grep &#x27;查询文本&#x27; //对全局的字符串查询</span><br><span class="line">git grep &#x27;查询文本&#x27; v1.0.0 //针对版本的字符串查询</span><br></pre></td></tr></table></figure><h3 id="文件修改详情跟踪"><a href="#文件修改详情跟踪" class="headerlink" title="文件修改详情跟踪"></a>文件修改详情跟踪</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;file&gt; //谁，在什么时间，修改了文件的什么内容</span><br></pre></td></tr></table></figure><p><strong><a href="http://git-scm.com/book/zh/v2">Pro Git V2书本传送门</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Hexo置顶问题</title>
      <link href="/hexoTop/"/>
      <url>/hexoTop/</url>
      
        <content type="html"><![CDATA[<p>今天发现置顶功能不起作用了，找了半天才想着起来。是在另一台电脑写的博客，重新安装（<code>nmp install</code>）过了，以前置顶功能的实现是直接替换<code>node_modules/hexo-generator-index/lib/generator.js</code>的内容，generator.js的内容被覆盖掉了，又要修改代码。这样太麻烦了，网上找到方法。<br>为了防止每次更新、安装都要修改代码，直接从仓库里安装就可以了，不用每次都修改了。</p><span id="more"></span><p>把原来的删除了，换一个就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>置顶功能还是和以前的一样<br>在需要置顶的文章的front-matter中添加top值，值越大越置顶。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标题 </span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">top: 1000</span><br></pre></td></tr></table></figure><p>源文链接：<a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/">解决Hexo置顶问题</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Top </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多终端编辑hexo博客</title>
      <link href="/hexo-mutil-sync/"/>
      <url>/hexo-mutil-sync/</url>
      
        <content type="html"><![CDATA[<p>如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以需要把源文件也上传到github上，然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。</p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>同步思路与Github推拉源码思路相同，使用git指令，保持本地的博客文件与Github上的博客文件相同即可<br>仓库分两个分支：hexo和master。hexo作为默认分支，存放博客源代码，master分支存放博客生成页面。</p><h3 id="创建hexo分支"><a href="#创建hexo分支" class="headerlink" title="创建hexo分支"></a>创建hexo分支</h3><p>默认已经有 master 分支了，创建 hexo 就可以了（名字不一定要hexo），并将hexo设置为默认分支（<strong>Default branch</strong>）</p><ul><li>这个hexo分支就是存放我们源文件的分支，我们只需要更新hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的</li></ul><h3 id="配置gitignore文件"><a href="#配置gitignore文件" class="headerlink" title="配置gitignore文件"></a>配置gitignore文件</h3><p>为了筛选出配置文件、主题目录、博文等重要信息，作为需要GItHub管理的文件<br>public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多<br>即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_config.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="初始化仓库及提交"><a href="#初始化仓库及提交" class="headerlink" title="初始化仓库及提交"></a>初始化仓库及提交</h3><p>然后我们再初始化仓库，重新对我们的代码进行版本控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init  //初始化本地仓库</span><br><span class="line">git add -A //添加本地所有文件到仓库</span><br><span class="line">git commit -m &quot;blog源文件&quot; //添加commit</span><br><span class="line">git branch hexo //添加本地仓库分支hexo</span><br><span class="line">git remote add origin &lt;server&gt;//添加远程仓库 &lt;server&gt; 是指在线仓库的地址 origin是本地分支,remote add操作会将本地仓库映射到云端</span><br><span class="line">git push origin hexo //将本地仓库的源文件推送到远程仓库hexo分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候博客的源文件就同步到github的hexo分支上了。</p><blockquote class="blockquote-center">注意这里有个坑！！！如果你用的是第三方的主题theme，是使用git clone下来的话，要把主题文件夹下面把.git文件夹删除掉，不然主题无法push到远程仓库，导致你发布的博客是一片空白。</blockquote><h3 id="另一台电脑的操作"><a href="#另一台电脑的操作" class="headerlink" title="另一台电脑的操作"></a>另一台电脑的操作</h3><ul><li><p>首先需要搭建环境（Node，Git）</p></li><li><p>直接clone下来，修改发布后提交本地修改到远程master分支就ok.</p></li></ul><p>将hexo分支clone到本地，再进入目录安装npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;server&gt; hexo //&lt;server&gt; 是指在线仓库的地址</span><br><span class="line">cd hexo </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><code>npm install</code>的时候会根据package.json中的插件列表自动加载相应插件。<br>本机的同步完成。</p><blockquote class="blockquote-center">因为在上传博客源文件的时候忽略了配置文件（`_config.yml`这是站点的配置文件）的上传，也就是没有上传配置文件的，在克隆下来的时候记得把配置文件拿过来，不然会报错。主题里面的配置文件也要（`themes/next/_config.yml`这是主题配置文件）</blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 多终端 </tag>
            
            <tag> 同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 基础使用</title>
      <link href="/useVim/"/>
      <url>/useVim/</url>
      
        <content type="html"><![CDATA[<p>虽然现在linux有比较多的图形界面系统，但是在功能上还是不如命令行强大，很多需要管理员权限的动作都不能在图形界面下使用.<br>** Vim 是什么？**</p><ul><li>Vim 是从 vi 发展出来的一个高效率的文本编辑器，在程序员中被广泛使用，有很多支持程序员们更快更好写代码的强大功能。<span id="more"></span></li></ul><p>** 为什么要学习使用 Vim？**</p><ul><li>作为一个程序员，不管是前端还是后端，工作中基本上都要跟服务器打交道，而现在服务器里面运行的操作系统基本上都是 Linux。</li><li>当你远程跟服务器通信的时候，基本上都要通过终端来跟服务器建立连接。</li><li>当你要修改服务器的某个配置文件的时候，在一个黑漆漆的终端里，你能用的几乎只有 Vim。不会使用 Vim，就没办法工作。</li></ul><p>** 如何学习使用 Vim？**</p><ul><li>学习任何东西都要循序渐进，不要想一口吃成个胖子。现在很多教程上来就列一堆快捷键，基本上看几眼就放弃了。</li><li>刚开始只需要学习一些最基本的操作，后面随着代码写的越来越多，进阶的操作每次练一两个，慢慢也就会了，很简单。</li><li>工具是拿来用的，不要让它成为一个负担！</li></ul><p>** 新手最大的问题**</p><ul><li>大小写看错</li><li>空格写漏</li><li>把多个命令当成一个命令</li></ul><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="1-Vim-的两种模式：编辑模式-命令模式"><a href="#1-Vim-的两种模式：编辑模式-命令模式" class="headerlink" title="1. Vim 的两种模式：编辑模式&amp;命令模式"></a>1. Vim 的两种模式：编辑模式&amp;命令模式</h3><ul><li>输入<code>vim a.md</code> 初始进入编辑器命令模式（注意 <code>vim</code> 和 <code>a.txt</code> 之间有一个空格）</li><li><code>i</code> 进入编辑模式</li><li>键盘左上角 <code>esc</code> 进入命令模式</li><li><code>:wq</code> 保存退出</li><li><code>:q!</code> 不保存强制退出</li></ul><h3 id="2-常见的文本操作"><a href="#2-常见的文本操作" class="headerlink" title="2. 常见的文本操作"></a>2. 常见的文本操作</h3><h4 id="一、-打开文件、保存、关闭文件-vi命令模式下使用"><a href="#一、-打开文件、保存、关闭文件-vi命令模式下使用" class="headerlink" title="一、 打开文件、保存、关闭文件(vi命令模式下使用)"></a>一、 打开文件、保存、关闭文件(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:w       //保存文件</span><br><span class="line">:w vpser.net //保存至vpser.net文件</span><br><span class="line">:q          //退出编辑器，如果文件已修改请使用下面的命令</span><br><span class="line">:q!        //退出编辑器，且不保存</span><br><span class="line">:wq         //退出编辑器，且保存文件</span><br></pre></td></tr></table></figure><h4 id="二、-插入文本或行-vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式"><a href="#二、-插入文本或行-vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式" class="headerlink" title="二、 插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)"></a>二、 插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)</h4><p>一般使用i</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a     //在当前光标位置的右边添加文本</span><br><span class="line">i     //在当前光标位置的左边添加文本</span><br><span class="line">A     //在当前行的末尾位置添加文本</span><br><span class="line">I     //在当前行的开始处添加文本(非空字符的行首)</span><br><span class="line">O     //在当前行的上面新建一行</span><br><span class="line">o     //在当前行的下面新建一行</span><br><span class="line">R     //替换(覆盖)当前光标位置及后面的若干文本</span><br><span class="line">J     //合并光标所在行及下一行为一行(依然在命令模式)</span><br></pre></td></tr></table></figure><h4 id="三、-移动光标-vi命令模式下使用"><a href="#三、-移动光标-vi命令模式下使用" class="headerlink" title="三、  移动光标(vi命令模式下使用)"></a>三、  移动光标(vi命令模式下使用)</h4><p>1、使用上下左右方向键</p><p>2、命令模式下：h   向左、j   向下 、k   向上、l  向右。<br>空格键 向右、Backspace  向左、Enter  移动到下一行首、-  移动到上一行首。</p><h4 id="四、-删除、恢复字符或行-vi命令模式下使用"><a href="#四、-删除、恢复字符或行-vi命令模式下使用" class="headerlink" title="四、 删除、恢复字符或行(vi命令模式下使用)"></a>四、 删除、恢复字符或行(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x      //删除当前字符</span><br><span class="line">nx     //删除从光标开始的n个字符</span><br><span class="line">dd     //删除当前行</span><br><span class="line">ndd    //向下删除当前行在内的n行</span><br><span class="line">u      //撤销上一步操作</span><br><span class="line">U      //撤销对当前行的所有操作</span><br></pre></td></tr></table></figure><h4 id="五、-搜索-vi命令模式下使用"><a href="#五、-搜索-vi命令模式下使用" class="headerlink" title="五、 搜索(vi命令模式下使用)"></a>五、 搜索(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/vpser    //向光标下搜索vpser字符串，vpser可以是正则表达式</span><br><span class="line">?vpser    //向光标上搜索vpser字符串</span><br><span class="line">n         //向下搜索前一个搜素动作</span><br><span class="line">N         //向上搜索前一个搜索动作</span><br><span class="line">*(#)      //当光标停留在某个单词上时, 输入这条命令表示查找与该单词匹配的下(上)一个单词. 同样, 再输入 n 查找下一个匹配处, 输入 N 反方向查找.</span><br><span class="line"></span><br><span class="line">g*(g#)    //此命令与上条命令相似, 只不过它不完全匹配光标所在处的单词, 而是匹配包含该单词的所有字符串.</span><br></pre></td></tr></table></figure><h4 id="六、-跳至指定行-vi命令模式下使用"><a href="#六、-跳至指定行-vi命令模式下使用" class="headerlink" title="六、 跳至指定行(vi命令模式下使用)"></a>六、 跳至指定行(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n+        //向下跳n行</span><br><span class="line">n-        //向上跳n行</span><br><span class="line">nG        //跳到行号为n的行</span><br><span class="line">G         //跳至文件的底部</span><br></pre></td></tr></table></figure><h4 id="七、-设置行号-vi命令模式下使用"><a href="#七、-设置行号-vi命令模式下使用" class="headerlink" title="七、 设置行号(vi命令模式下使用)"></a>七、 设置行号(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set  nu     //显示行号</span><br><span class="line">:set nonu    //取消显示行号</span><br></pre></td></tr></table></figure><h4 id="八、-复制、粘贴-vi命令模式下使用"><a href="#八、-复制、粘贴-vi命令模式下使用" class="headerlink" title="八、 复制、粘贴(vi命令模式下使用)"></a>八、 复制、粘贴(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yy    //将当前行复制到缓存区，也可以用 &quot;ayy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</span><br><span class="line">nyy   //将当前行向下n行复制到缓冲区，也可以用 &quot;anyy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。</span><br><span class="line">yw    //复制从光标开始到词尾的字符。</span><br><span class="line">nyw   //复制从光标开始的n个单词。</span><br><span class="line">y^    //复制从光标到行首的内容。  [VPS侦探](http://www.vpser.net/)</span><br><span class="line">y$    //复制从光标到行尾的内容。</span><br><span class="line">p     //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用&quot;ap 进行粘贴。</span><br><span class="line">P     //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用&quot;aP 进行粘贴。</span><br></pre></td></tr></table></figure><h4 id="九、-替换-vi命令模式下使用"><a href="#九、-替换-vi命令模式下使用" class="headerlink" title="九、 替换(vi命令模式下使用)"></a>九、 替换(vi命令模式下使用)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:s/old/new           //用new替换行中首次出现的old</span><br><span class="line">:s/old/new/g         //用new替换行中所有的old</span><br><span class="line">:n,m s/old/new/g     //用new替换从n到m行里所有的old</span><br><span class="line">:%s/old/new/g        //用new替换当前文件里所有的old</span><br></pre></td></tr></table></figure><h4 id="十、-编辑其他文件"><a href="#十、-编辑其他文件" class="headerlink" title="十、 编辑其他文件"></a>十、 编辑其他文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:e otherfilename    //编辑文件名为otherfilename的文件。</span><br></pre></td></tr></table></figure><h4 id="十一、修改文件格式"><a href="#十一、修改文件格式" class="headerlink" title="十一、修改文件格式"></a>十一、修改文件格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:set fileformat=unix   //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。</span><br></pre></td></tr></table></figure><h4 id="十二、查找帮助"><a href="#十二、查找帮助" class="headerlink" title="十二、查找帮助"></a>十二、查找帮助</h4><p>当你不知道怎么处理时，直接输入help可以看到帮助文档的起点，ZZ是退出或者：q，不建议使用查找关于某个字母的命令 ：help x   查找关于x的命令。</p><hr><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>h或←</td><td>光标左移</td></tr><tr><td>l或→</td><td>光标右移</td></tr><tr><td>k或↑</td><td>光标上移</td></tr><tr><td>j或↓</td><td>光标下移</td></tr><tr><td>gg</td><td>快速定位到文本开头</td></tr><tr><td>G（shift+g）</td><td>快速定位到文本最后一段</td></tr><tr><td>0或home</td><td>快速定位到当前段首</td></tr><tr><td>$或end</td><td>快速定位到当前段首</td></tr><tr><td>Ctrl+f</td><td>向下翻一页</td></tr><tr><td>Ctrl+b</td><td>向上翻一页</td></tr><tr><td>Ctrl+d</td><td>向下翻半页</td></tr><tr><td>Ctrl+u</td><td>向上翻一页</td></tr><tr><td>&#x2F;string</td><td>查找文本中光标位置下方的string字符串，如要查找kabc则直接输入&#x2F;kabc即可</td></tr><tr><td>?string</td><td>查找文本中光标位置上方的string字符串，如要查找kabc则直接输入?kabc即可</td></tr><tr><td>yy</td><td>复制光标所在的段落</td></tr><tr><td>y0</td><td>复制光标位置到段首的所有字符</td></tr><tr><td>y$</td><td>复制光标位置到段尾的所有字符</td></tr><tr><td>nyy</td><td>从光标位置向下复制n段，包含光标所在的段落</td></tr><tr><td>ygg</td><td>复制光标位置所在段落到文本开头的所有内容</td></tr><tr><td>yG</td><td>复制光标位置所在段落到文本结尾的所有内容</td></tr><tr><td>p</td><td>将复制的内容粘贴为光标所在段落的下一段</td></tr><tr><td>P</td><td>将复制的内容粘贴为光标所在段落的上一段</td></tr><tr><td>dd</td><td>删除光标所在的段落</td></tr><tr><td>d0</td><td>删除光标位置到段首的所有字符</td></tr><tr><td>d$</td><td>删除光标位置到段尾的所有字符</td></tr><tr><td>dgg</td><td>删除光标位置所在段落到文本开头的所有内容</td></tr><tr><td>dG</td><td>删除光标位置所在段落到文本结尾的所有内容</td></tr><tr><td>ndd</td><td>从光标位置向下删除n段，包含光标所在的段落</td></tr><tr><td>u</td><td>撤销上一个操作</td></tr><tr><td>Ctrl+r</td><td>重复上一个操作</td></tr><tr><td>:w</td><td>保存数据</td></tr><tr><td>:w!</td><td>保存时强制写入数据，不管文件是否为只读文件</td></tr><tr><td>)</td><td>移至下一个句子（sentence）首 （sentence 是以 . ! ? 为区格）</td></tr><tr><td>(</td><td>移至上一个句子（sentence）首</td></tr><tr><td>}</td><td>移至下一个段落（paragraph）首 （paragraph 是以空白行为区格）</td></tr><tr><td>{</td><td>移至上一个段落（paragraph）首</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下启动、关闭Nginx命令</title>
      <link href="/winNginx/"/>
      <url>/winNginx/</url>
      
        <content type="html"><![CDATA[<p><strong>启动</strong></p><p>直接点击Nginx目录下的nginx.exe    或者    cmd运行<code>start nginx</code></p><p><strong>关闭</strong></p><p><code>nginx -s stop</code>    或者    <code>nginx -s quit</code></p><ul><li><p>stop 表示立即停止nginx,不保存相关信息</p></li><li><p>quit 表示正常退出nginx,并保存相关信息</p></li></ul><p><strong>重启</strong><br>因为改变了配置,需要重启</p><p><code>nginx -s reload</code></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Windows </tag>
            
            <tag> 启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护眼的绿豆沙参数</title>
      <link href="/eyeColor/"/>
      <url>/eyeColor/</url>
      
        <content type="html"><![CDATA[<p>绿豆沙色能有效的减轻长时间用电脑的用眼疲劳！</p><span id="more"></span><p>记录下，备用</p><p>** 豆沙绿的参数为**</p><ul><li>RGB颜色：199；237；204</li><li>十六位颜色代码：C7EDCC </li><li>色调：85；饱和度：123；亮度：205</li></ul>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RGB </tag>
            
            <tag> 护眼 </tag>
            
            <tag> 颜色 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax无刷新页面切换,历史记录后退前进解决方案</title>
      <link href="/ajaxHistory/"/>
      <url>/ajaxHistory/</url>
      
        <content type="html"><![CDATA[<p>我们在工作中常常遇到需要用ajax来显示下一页和上一页，ajax无刷新页面，因此，假如你想通过浏览器的历史记录返回上一页和下一页。那这就问题来了！一般需求要历史返回的时候，我们通常不使用ajax。但是呢，假如一个页面中，只有一个地方是动态的，其他地方都是固定的，除了使用模板之外，那么就是使用ajax来操作显得格外方便！那么如何解决ajax历史记录的返回和前进呢？</p><span id="more"></span><h2 id="js中history相关API普及"><a href="#js中history相关API普及" class="headerlink" title="js中history相关API普及"></a>js中history相关API普及</h2><h3 id="history-state"><a href="#history-state" class="headerlink" title="history.state"></a>history.state</h3><p>当前URL下对应的状态信息。如果当前URL不是通过pushState或者replaceState产生的，那么history.state是null。</p><h3 id="history-pushState-state-title-url"><a href="#history-pushState-state-title-url" class="headerlink" title="history.pushState(state, title, url)"></a>history.pushState(state, title, url)</h3><p>将当前URL和history.state加入到history中，并用新的state和URL替换当前。不会造成页面刷新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state：与要跳转到的URL对应的状态信息。</span><br><span class="line"></span><br><span class="line">title：页面的题目,假如没有就穿空字符串就可以。</span><br><span class="line"></span><br><span class="line">url：要跳转到的URL地址，不能跨域。</span><br></pre></td></tr></table></figure><h3 id="history-replaceState-state-title-url"><a href="#history-replaceState-state-title-url" class="headerlink" title="history.replaceState(state, title, url)"></a>history.replaceState(state, title, url)</h3><p>用新的state和URL替换当前。不会造成页面刷新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state：与要跳转到的URL对应的状态信息。</span><br><span class="line"></span><br><span class="line">title：页面的题目,假如没有就穿空字符串就可以。</span><br><span class="line"></span><br><span class="line">url：要跳转到的URL地址，不能跨域。</span><br></pre></td></tr></table></figure><h3 id="window-onpopstate"><a href="#window-onpopstate" class="headerlink" title="window.onpopstate"></a>window.onpopstate</h3><p>history.go和history.back（包括用户按浏览器历史前进后退按钮）触发，并且页面无刷的时候（由于使用pushState修改了history）会触发popstate事件，事件发生时浏览器会从history中取出URL和对应的state对象替换当前的URL和history.state。通过event.state也可以获取history.state。</p><h3 id="支持性判断"><a href="#支持性判断" class="headerlink" title="支持性判断"></a>支持性判断</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (&#x27;pushState&#x27; in history) &#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><p>假如我们动态的html代码id是MyDiv。<br>定义如下函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function processAjaxData(obj, url)&#123;</span><br><span class="line">     document.getElementById(&quot;MyDiv&quot;).innerHTML = obj.html;</span><br><span class="line">     document.title = obj.pageTitle;</span><br><span class="line"> window.history.pushState(&#123;&quot;html&quot;:obj.html,&quot;pageTitle&quot;:obj.pageTitle&#125;,&quot;&quot;, url);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>obj是后台ajax返回来的数据,obj.html来替换动态haorooms下面的内容，页面标题是返回的pageTitle标题。</p><p>而当有浏览者点击浏览器“后退”或“前进”按钮时，我们用下面的代码来响应用户的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window.onpopstate = function(event)&#123;</span><br><span class="line">    if(event.state)&#123;</span><br><span class="line">        document.getElementById(&quot;haorooms&quot;).innerHTML = event.state.html;</span><br><span class="line">        document.title = event.state.pageTitle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>谷歌浏览器，火狐浏览器，Safafi浏览器、IE10+等现代浏览器都支持这种技术。假如你感兴趣，可以试试！</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 历史记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql批量执行sql文件</title>
      <link href="/batchSql/"/>
      <url>/batchSql/</url>
      
        <content type="html"><![CDATA[<p>最近在做数据库迁移工作，需要批量执行MySQL的脚本文件，手工执行太麻烦<br>网上找了一下，还真有</p><span id="more"></span><p>1、待执行的sql文件为1.sql、2.sql、3.sql、4.sql等<br>2、写一个batch.sql文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source 1.sql;</span><br><span class="line">source 2.sql;</span><br><span class="line">source 3.sql;</span><br><span class="line">source 4.sql;</span><br></pre></td></tr></table></figure><p>3、在mysql下执行source batch.sql;</p><p>注意路径问题。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 批量执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中find_in_set()函数的使用</title>
      <link href="/find-in-set/"/>
      <url>/find-in-set/</url>
      
        <content type="html"><![CDATA[<p>首先举个例子来说：<br>有个文章表里面有个type字段，它存储的是文章类型，有 1头条、2推荐、3热点、4图文等等 。<br>现在有篇文章他既是头条，又是热点，还是图文，type中以 1,3,4 的格式存储。那我们如何用sql查找所有type中有4的图文类型的文章呢？？<br>这就要我们的 find_in_set 出马的时候到了<br><code>select * from article where FIND_IN_SET(&#39;4&#39;,type)</code></p><span id="more"></span><h2 id="MySQL手册中find-in-set函数的语法"><a href="#MySQL手册中find-in-set函数的语法" class="headerlink" title="MySQL手册中find_in_set函数的语法"></a>MySQL手册中find_in_set函数的语法</h2><p>FIND_IN_SET(str,strlist)</p><p>str 要查询的字符串<br>strlist 字段名 参数以”,”分隔 如 (1,2,6,8)<br>查询字段(strlist)中包含(str)的结果，返回结果为null或记录<br>假如字符串str在由N个子链组成的字符串列表strlist 中，则返回值的范围在 1 到 N 之间。 一个字符串列表就是一个由一些被 ‘,’ 符号分开的子链组成的字符串。如果第一个参数是一个常数字符串，而第二个是type SET列，则FIND_IN_SET() 函数被优化，使用比特计算。 如果str不在strlist 或strlist 为空字符串，则返回值为 0 。如任意一个参数为NULL，则返回值为 NULL。这个函数在第一个参数包含一个逗号(‘,’)时将无法正常运行。</p><p> 例子：<br><code>mysql&gt; SELECT FIND_IN_SET(&#39;b&#39;, &#39;a,b,c,d&#39;);</code><br>返回 2 因为b 在strlist集合中放在2的位置 从1开始</p><p><code>select FIND_IN_SET(&#39;1&#39;, &#39;1&#39;);</code><br>返回 就是1 这时候的strlist集合有点特殊 只有一个字符串 其实就是要求前一个字符串 一定要在后一个字符串集合中才返回大于0的数<br><code>select FIND_IN_SET(&#39;2&#39;, &#39;1，2&#39;);</code> 返回2<br><code>select FIND_IN_SET(&#39;6&#39;, &#39;1&#39;); </code>返回0</p><p>注意：<br><code>select * from treenodes where FIND_IN_SET(id, &#39;1,2,3,4,5&#39;); </code><br>使用find_in_set函数一次返回多条记录<br>id 是一个表的字段，然后每条记录分别是id等于1，2，3，4，5的时候<br>有点类似in （集合）<br><code>select * from treenodes where id in (1,2,3,4,5);</code></p><h2 id="find-in-set-和in的区别："><a href="#find-in-set-和in的区别：" class="headerlink" title="find_in_set()和in的区别："></a>find_in_set()和in的区别：</h2><p>搞个测试表来说明两者的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `tb_test` (</span><br><span class="line">  `id` int(8) NOT NULL auto_increment,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `list` varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY  (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `tb_test` VALUES (1, &#x27;name&#x27;, &#x27;daodao,xiaohu,xiaoqin&#x27;);</span><br><span class="line">INSERT INTO `tb_test` VALUES (2, &#x27;name2&#x27;, &#x27;xiaohu,daodao,xiaoqin&#x27;);</span><br><span class="line">INSERT INTO `tb_test` VALUES (3, &#x27;name3&#x27;, &#x27;xiaoqin,daodao,xiaohu&#x27;);</span><br></pre></td></tr></table></figure><p>原来以为mysql可以进行这样的查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- (一) </span><br><span class="line">SELECT id,name,list from tb_test WHERE &#x27;daodao&#x27; IN(list);</span><br></pre></td></tr></table></figure><p>实际上这样是不行的，这样只有当list字段的值等于’daodao’时（和IN前面的字符串完全匹配），查询才有效，否则都得不到结果，即使’daodao’真的在list中。</p><p>再来看看这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- (二)</span><br><span class="line">SELECT id,name,list from tb_test WHERE &#x27;daodao&#x27; IN (&#x27;libk&#x27;, &#x27;zyfon&#x27;, &#x27;daodao&#x27;);</span><br></pre></td></tr></table></figure><p>这样是可以的。</p><p>这两条到底有什么区别呢？为什么第一条不能取得正确的结果，而第二条却能取得结果。原因其实是（一）中 (list) list是变量， 而（二）中 (‘libk’, ‘zyfon’, ‘daodao’)是常量。<br>所以如果要让（一）能正确工作，需要用find_in_set():</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- (一)的改进版</span><br><span class="line">SELECT id,name,list from tb_test WHERE FIND_IN_SET(&#x27;daodao&#x27;,list);</span><br></pre></td></tr></table></figure><p>所以如果list是常量，则可以直接用IN， 否则要用find_in_set()函数。</p><h2 id="find-in-set-和like的区别"><a href="#find-in-set-和like的区别" class="headerlink" title="find_in_set()和like的区别"></a>find_in_set()和like的区别</h2><p>在mysql中，有时我们在做数据库查询时，需要得到某字段中包含某个值的记录，但是它也不是用like能解决的，使用like可能查到我们不想要的记录，它比like更精准，这时候mysql的FIND_IN_SET函数就派上用场了，下面来看一个例子。</p><p>创建表并插入语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">    id int(6) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    limits VARCHAR(50) NOT NULL, -- 权限</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO users(name, limits) VALUES(&#x27;小张&#x27;,&#x27;1,2,12&#x27;); </span><br><span class="line">INSERT INTO users(name, limits) VALUES(&#x27;小王&#x27;,&#x27;11,22,32&#x27;);</span><br></pre></td></tr></table></figure><p>其中limits表示用户所拥有的权限（以逗号分隔），现在想查询拥有权限编号为2的用户，如果用like关键字的话，则查询结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE limits LIKE &#x27;%2%&#x27;;</span><br></pre></td></tr></table></figure><p>这样第二条数据不具有权限’2’的用户也查出来了，不符合预期。下面利用mysql 函数find_in_set()来解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE FIND_IN_SET(2,limits);</span><br></pre></td></tr></table></figure><p>这样就能达到我们预期的效果，问题就解决了！</p><p>注意：mysql字符串函数 <code>find_in_set(str1,str2)</code>函数是返回str2中str1所在的位置索引，str2必须以”,”分割开。</p><p><strong>总结：</strong>like是广泛的模糊匹配，字符串中没有分隔符，Find_IN_SET 是精确匹配，字段值以英文”,”分隔，Find_IN_SET查询的结果要小于like查询的结果。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> find_in_set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去掉和恢复Win10快捷方式上小箭头的方法</title>
      <link href="/shortcut/"/>
      <url>/shortcut/</url>
      
        <content type="html"><![CDATA[<p>系统快捷方式上小箭头，看的很不爽？那就把他们去掉吧！<br>可还原回来，亲测可行。</p><span id="more"></span><p>据说此方法是此方法并不是删除了小箭头，而是将小箭头变成了透明，实际上小箭头是以透明状态存在的。</p><h2 id="去掉小箭头"><a href="#去掉小箭头" class="headerlink" title="去掉小箭头"></a>去掉小箭头</h2><p>复制下面的代码。新建一个文本文件。粘贴后另存为.bat文件，然后以管理员身份打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot; /v 29 /d &quot;%systemroot%\system32\imageres.dll,197&quot; /t reg_sz /f</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line">attrib -s -r -h &quot;%userprofile%\AppData\Local\iconcache.db&quot;</span><br><span class="line">del &quot;%userprofile%\AppData\Local\iconcache.db&quot; /f /q</span><br><span class="line">start explorer</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="恢复小箭头"><a href="#恢复小箭头" class="headerlink" title="恢复小箭头"></a>恢复小箭头</h2><p>复制下面的代码。新建一个文本文件。粘贴后另存为.bat文件，然后以管理员身份打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg delete &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons&quot; /v 29 /f</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line">attrib -s -r -h &quot;%userprofile%\AppData\Local\iconcache.db&quot;</span><br><span class="line">del &quot;%userprofile%\AppData\Local\iconcache.db&quot; /f /q</span><br><span class="line">start explorer</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>XP系统的有区别，不适用<br>Win7的没试过，应该是通用的</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> 快捷方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 gulp 压缩代码</title>
      <link href="/gulp/"/>
      <url>/gulp/</url>
      
        <content type="html"><![CDATA[<p>右键查看网页源代码发现有大量留白，咋整？<br>实用的<code>Gulp</code>插件，帮助你的博客更加精简，快速。</p><span id="more"></span><ul><li>易于使用<blockquote><p>通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。</p></blockquote></li><li>构建快速<blockquote><p>利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。</p></blockquote></li><li>插件高质<blockquote><p>Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</p></blockquote></li><li>易于学习<blockquote><p>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p></blockquote></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先拷贝&#x2F;创建如下文件 <code>package.json</code> (和站点配置文件同级，即根目录)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;3.4.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;browser-sync&quot;: &quot;^2.18.13&quot;,</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^0.3.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-index2&quot;: &quot;0.0.1&quot;,</span><br><span class="line">    &quot;hexo-generator-searchdb&quot;: &quot;^1.0.7&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.2.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;gulp-asset-rev&quot;: &quot;^0.0.15&quot;,</span><br><span class="line">    &quot;gulp-clean-css&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">    &quot;gulp-concat&quot;: &quot;^2.6.1&quot;,</span><br><span class="line">    &quot;gulp-debug&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;gulp-htmlclean&quot;: &quot;^2.7.15&quot;,</span><br><span class="line">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;gulp-if&quot;: &quot;^2.0.2&quot;,</span><br><span class="line">    &quot;gulp-changed&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;gulp-make-css-url-version&quot;: &quot;^0.0.13&quot;,</span><br><span class="line">    &quot;gulp-modify-css-urls&quot;: &quot;^0.2.2&quot;,</span><br><span class="line">    &quot;gulp-plumber&quot;: &quot;^1.1.0&quot;,</span><br><span class="line">    &quot;gulp-uglify&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;gulp-useref&quot;: &quot;^3.1.2&quot;,</span><br><span class="line">    &quot;gulp-util&quot;: &quot;^3.0.8&quot;,</span><br><span class="line">    </span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-encrypt&quot;: &quot;^0.5.1&quot;,</span><br><span class="line">    &quot;hexo-generator-json-content&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;hexo-generator-search&quot;: &quot;^2.1.1&quot;,</span><br><span class="line">    &quot;hexo-generator-searchdb&quot;: &quot;^1.0.8&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.2.2&quot;,</span><br><span class="line">    &quot;run-sequence&quot;: &quot;^2.2.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>会直接安装 <code>package.json</code> 文件中的插件，或者可以手动一个一个安装，方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-concat</span><br><span class="line">npm install --save-dev gulp-clean-css</span><br><span class="line">npm install --save-dev gulp-uglify</span><br><span class="line">npm install --save-dev gulp-htmlmin</span><br><span class="line">npm install --save-dev gulp-htmlclean</span><br><span class="line">npm install --save-dev gulp-imagemin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>gulp-concat</code>–合并javascript文件，减少网络请求<a href="https://github.com/wearefractal/gulp-concat">文档</a></li><li><code>gulp-clean-css</code>–压缩css文件，减小文件大小，并给引用url添加版本号避免缓存<a href="https://github.com/scniro/gulp-clean-css">文档</a></li><li><code>gulp-uglify</code>–压缩javascript文件，减小文件大小<a href="https://github.com/terinjokes/gulp-uglify">文档</a></li><li><code>gulp-htmlmin</code>–压缩html，可以压缩页面javascript、css，去除页面空格、注释，删除多余属性等操作<a href="https://github.com/jonschlinkert/gulp-htmlmin">文档</a></li><li><code>gulp-htmlclean</code>–清理html中的部分内容</li><li><code>gulp-imagemin</code>–压缩 png&#x2F;jpg&#x2F;git&#x2F;svg 格式图片文件<a href="https://github.com/sindresorhus/gulp-imagemin">文档</a></li><li><code>browser-sync</code>–保持多浏览器、多设备同步、在前端开发是非常有用，可谓是必备组件。<a href="http://www.browsersync.io/">文档</a></li><li><code>hexo-encrypt</code>– 加密网页内容，输入密码可查看<a href="http://edolphin.site/2016/05/31/encrypt-post/#comments">文档</a> <a href="https://github.com/edolphin-ydf/hexo-encrypt">github</a></li></ul><p>如果在安装的过程中有报类似错误，npm ERR！ errno -4048 npm ERR！ Error：EPERM：operation not permitted, scandir<br>看我之前写的 <a href="https://xqmgithub.github.io//npmERR.html">npm install 报错（npm ERR！ errno -4048 npm ERR！ Error：EPERM：operation not permitted, scandir） 解决方法</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>根目录下新建文件：<code>gulpfile.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&#x27;gulp&#x27;);</span><br><span class="line">var debug = require(&#x27;gulp-debug&#x27;);</span><br><span class="line">var cleancss = require(&#x27;gulp-clean-css&#x27;);   //css压缩组件</span><br><span class="line">var cssversion = require(&#x27;gulp-make-css-url-version&#x27;);   //css资源添加版本号</span><br><span class="line">var uglify = require(&#x27;gulp-uglify&#x27;);        //js压缩组件</span><br><span class="line">var htmlmin = require(&#x27;gulp-htmlmin&#x27;);      //html压缩组件</span><br><span class="line">var htmlclean = require(&#x27;gulp-htmlclean&#x27;);  //html清理组件</span><br><span class="line">var assetRev = require(&#x27;gulp-asset-rev&#x27;);   //版本控制插件</span><br><span class="line">var runSequence = require(&#x27;run-sequence&#x27;);  //异步执行组件</span><br><span class="line">var changed = require(&#x27;gulp-changed&#x27;);      //文件更改校验组件</span><br><span class="line">var gulpif = require(&#x27;gulp-if&#x27;)             //任务 帮助调用组件</span><br><span class="line">var plumber = require(&#x27;gulp-plumber&#x27;);      //容错组件（发生错误不跳出任务，并报出错误内容）</span><br><span class="line">var isScriptAll = true;     //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><br><span class="line">var isDebug = true;         //是否调试显示 编译通过的文件</span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&#x27;compressJs&#x27;, function () &#123;</span><br><span class="line">    var option = &#123;</span><br><span class="line">        // preserveComments: &#x27;all&#x27;,//保留所有注释</span><br><span class="line">        mangle: true,           //类型：Boolean 默认：true 是否修改变量名</span><br><span class="line">        compress: true          //类型：Boolean 默认：true 是否完全压缩</span><br><span class="line">    &#125;</span><br><span class="line">    return gulp.src([&#x27;./public/**/*.js&#x27;,&#x27;!./public/**/*.min.js&#x27;])  //排除的js</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(&#x27;./public&#x27;)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;title: &#x27;Compress JS:&#x27;&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(uglify(option))                //调用压缩组件方法uglify(),对合并的文件进行压缩</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;));         //输出到目标目录</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&#x27;compressCss&#x27;, function () &#123;</span><br><span class="line">    return gulp.src(&#x27;./public/**/*.css&#x27;)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(&#x27;./public&#x27;)))</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;title: &#x27;Compress CSS:&#x27;&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(&#123;rebase: false&#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&#x27;compressHtml&#x27;, function () &#123;</span><br><span class="line">    var cleanOptions = &#123;</span><br><span class="line">        protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g,             //忽略处理</span><br><span class="line">        unprotect: /&lt;script [^&gt;]*\btype=&quot;text\/x-handlebars-template&quot;[\s\S]+?&lt;\/script&gt;/ig //特殊处理</span><br><span class="line">    &#125;</span><br><span class="line">    var minOption = &#123;</span><br><span class="line">        collapseWhitespace: true,           //压缩HTML</span><br><span class="line">        collapseBooleanAttributes: true,    //省略布尔属性的值  &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">        removeEmptyAttributes: true,        //删除所有空格作属性值    &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">        removeScriptTypeAttributes: true,   //删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br><span class="line">        removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span><br><span class="line">        removeComments: true,               //清除HTML注释</span><br><span class="line">        minifyJS: true,                     //压缩页面JS</span><br><span class="line">        minifyCSS: true,                    //压缩页面CSS</span><br><span class="line">        minifyURLs: true                    //替换页面URL</span><br><span class="line">    &#125;;</span><br><span class="line">    return gulp.src(&#x27;./public/**/*.html&#x27;)</span><br><span class="line">        .pipe(gulpif(isDebug,debug(&#123;title: &#x27;Compress HTML:&#x27;&#125;)))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&#x27;default&#x27;, function () &#123;</span><br><span class="line">    runSequence.options.ignoreUndefinedTasks = true;</span><br><span class="line">    runSequence(&#x27;compressHtml&#x27;,&#x27;compressCss&#x27;,&#x27;compressJs&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>准备工作都做好了，执行命令：</p><ol><li>编译工程<br><code>hexo -g</code></li><li>执行 构建工具<br><code>gulp或gulp default</code></li><li>上传工程<br><code>hexo -d</code></li></ol><p>这里的这段代码执行 gulp 后不支持 hexo s 本地调试，且必须 deploy 到 Github Pages 上才能查看到效果，具体为啥我也不知道，知道的小伙伴，请在下方评论说明。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gulp </tag>
            
            <tag> Hexo优化 </tag>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install 报错（npm ERR！ errno -4048 npm ERR！ Error：EPERM：operation not permitted, scandir） 解决方法</title>
      <link href="/npmERR/"/>
      <url>/npmERR/</url>
      
        <content type="html"><![CDATA[<p>今天在安装插件的时候，发现安装出错<br><code>npm ERR! errno -4048，Error: EPERM: operation not permitted</code><br>看到<code>npm ERR! Please try running this command again as root/Administrator.</code>这句<br>以为还真是权限不够，感觉有点奇怪，用管理员权限执行，有的还真有用，但是有个别还是报错，好气呀！！<br>后面查了下，开始看到是因为npm和node问题的版本<br>就看看版本是多少<br>*<code>npm -v</code> 是：5.3.0<br>*<code>node -v</code> 是：v8.6.0<br>结果发现并不是版本问题，而是缓存的问题，清理下缓存就行，不用管理员权限。</p><span id="more"></span><p><strong>方法1</strong></p><p>需要删除npmrc文件。</p><p>强调：不是nodejs安装目录npm模块下的那个npmrc文件</p><p>而是在C:\Users{账户}\下的.npmrc文件..</p><p><strong>方法2</strong></p><p>或者直接用命令清理就行，控制台输入：</p><p><code>npm cache clean --force</code></p><p>清除成功后，再安装插件，成功安装插件。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm ERR </tag>
            
            <tag> install </tag>
            
            <tag> EPERM </tag>
            
            <tag> 4048 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署到 Github Pages 文件夹大小写问题</title>
      <link href="/hexoignorecase/"/>
      <url>/hexoignorecase/</url>
      
        <content type="html"><![CDATA[<p>使用 Hexo 部署博客到 Github Pages 时经常会遇到文件夹大小写问题导致的 404问题。</p><p>比如 Hexo 生成了一个 <code>php</code> Category文件夹，但是我后来把它改成了<code>PHP</code>，即 改成大写了。Hexo会生成正确，但部署到 Github 上却老是不正确。</p><span id="more"></span><p><strong>原因</strong><br>那是因为 git 默认忽略文件名大小写，所以即使文件夹大小写变更，git 也检测不到。</p><p> <strong>解决办法</strong></p><ul><li><p>进入到博客项目中 <code>.deploy_git</code>文件夹，修改 <code>.git</code> 下的 <code>config</code> 文件，将 <code>ignorecase=true</code> 改为 <code>ignorecase=false</code></p></li><li><p>使用 Hexo 再次生成及部署</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回车键搜索</title>
      <link href="/keycodesearch/"/>
      <url>/keycodesearch/</url>
      
        <content type="html"><![CDATA[<p>一般搜索的习惯是输入关键字后就敲个回车键搜索，刚好做个CMS的时候有个搜索功能需要输入关键，回车就可以搜索。</p><span id="more"></span><p>可以用JQ实现这个功能<br>这个是PC端的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.keyword&quot;).keydown(function (e) &#123;</span><br><span class="line">    if (e.keyCode == 13) &#123;</span><br><span class="line">        alert(&#x27;回车搜索&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>移动端的要想手机输入法的显示“搜索”或者“前往”，就需要修改搜索的input标签的属性<br>type&#x3D;”search”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;search&quot; class=&quot;keyword&quot;&gt;</span><br><span class="line">$(&quot;.keyword&quot;).bind(&quot;search&quot;, function() &#123;</span><br><span class="line">    alert(&#x27;回车搜索&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用手机打开，就会发现输入法的上的搜索就出来了</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> 回车键搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>checkall</title>
      <link href="/checkall/"/>
      <url>/checkall/</url>
      
        <content type="html"><![CDATA[<p>让复选框全部选中和全部取消是比较常用的</p><span id="more"></span><p><strong>JavaScript部分：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function checkAll(obj)&#123;</span><br><span class="line">    $(&quot;#box input[type=&#x27;checkbox&#x27;]&quot;).prop(&#x27;checked&#x27;, $(obj).prop(&#x27;checked&#x27;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>html部分：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; onclick=&quot;checkAll(this)&quot;&gt;全选&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github上PHP资源汇总大全，php学习的好资料</title>
      <link href="/phpdoc/"/>
      <url>/phpdoc/</url>
      
        <content type="html"><![CDATA[<p><strong>国外程序员ziadoz 在Github上收集整理了PHP的各种资源，内容包括模板、框架、数据库、安全等方面的库和工具。汇总了各种PHP资源，供各位PHP学习者和程序员参考。</strong></p><span id="more"></span><p><strong>英文原文：<a href="https://github.com/ziadoz/awesome-php">https://github.com/ziadoz/awesome-php</a></strong></p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>——用于依赖管理的包和框架<br><a href="http://getcomposer.org/">Composer</a>&#x2F;<a href="http://packagist.org/">Packagist</a> : 一个包和依赖管理器<br><a href="https://github.com/composer/installers">Composer Installers</a>:  一个多框架Composer库安装器<br><a href="https://github.com/FriendsOfPHP/pickle">Pickle</a>: 可以在任意平台上安装PHP扩展包</p><h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2><p>——生成Web页面内容的预处理工具<br><a href="http://sculpin.io/">Sculpin</a>:  将Markdown和Twig转换为静态HTML的工具<br><a href="http://phrozn.info/">Phrozn</a>: 另一款将Textile、Markdown和Twig转为HTML的工具</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>——Web开发框架<br><a href="http://symfony.com/">Symfony2</a> : 由独立组件构成的框架<br><a href="http://framework.zend.com/">Zend Framework 2</a>: 同样是由独立组件构成的框架<br><a href="http://laravel.com/">Laravel 4</a>: 简洁优雅的PHP Web开发框架<br><a href="http://auraphp.com/">Aura PHP</a>:  独立组件的框架<br><a href="https://github.com/yiisoft/yii2/">Yii2</a> : 用于开发大型Web应用的高性能PHP框架<br><a href="http://nette.org/">Nette</a>:  同样是由独立组件构成的框架<br><a href="http://www.ppi.io/">PPI Framework 2</a>: 一个交互性的框架<br><a href="http://phalconphp.com/en/">Phalcon</a>: 一个作为C扩展的框架</p><h2 id="微型框架"><a href="#微型框架" class="headerlink" title="微型框架"></a>微型框架</h2><p>——微型框架和路由<br><a href="http://silex.sensiolabs.org/">Silex</a>: 基于Symphony2组件的微型框架<br><a href="http://www.slimframework.com/">Slim</a>:  另一个简单的微型框架<br><a href="http://bulletphp.com/">Bullet PHP</a>:  用于构建REST APIs的微型框架<br><a href="https://github.com/nikic/FastRoute">Fast Route</a>:  快速路由选择库<br><a href="https://github.com/c9s/Pux">Pux</a>: 另一个快速路由选择库</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>——模板和词法分析的库与工具<br><a href="http://twig.sensiolabs.org/">Twig</a>: 一种综合的模板语言<br><a href="https://github.com/asm89/twig-cache-extension">Twig Cache Extension</a>: 用于Twig的模板片段缓存库<br><a href="https://github.com/bobthecow/mustache.php">Mustache</a>: PHP实现的Mustache模板语言<br><a href="https://github.com/weierophinney/phly_mustache">Phly Mustache</a>: 另一个PHP实现的Mustache模板语言<br><a href="https://github.com/arnaud-lb/MtHaml">MtHaml</a> : PHP实现的HAML模板语言<br><a href="http://phptal.org/">PHPTAL</a>: PHP实现的TAL模板语言<br><a href="http://platesphp.com/">Plates</a>: 一个原始的PHP模板库<br><a href="https://github.com/pyrocms/lex">Lex</a>: 一个轻量级模板解析器</p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>——持续集成的库和应用<br><a href="https://travis-ci.org/">Travis CI</a>: 一个持续集成的平台<br><a href="http://www.phptesting.org/">PHPCI</a>: 一个PHP的开源持续集成平台<br><a href="http://sismo.sensiolabs.org/">Sismo</a>: 一个持续的测试服务器库<br><a href="http://jenkins-ci.org/">Jenkins</a>: PHP支持的持续集成平台<br><a href="https://github.com/jolicode/JoliCi">JoliCi</a>: PHP开发的由Docker支持的持续集成客户端</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>——关于文件处理和MIME类型检查<br><a href="https://github.com/KnpLabs/Gaufrette">Gaufrette</a>:  一个文件流的抽象层<br><a href="https://github.com/FrenkyNet/Flysystem">Flysystem</a>:  另一个文件流的抽象层<br><a href="https://github.com/dflydev/dflydev-canal">Canal</a>: 一个检查互联网媒体类型的库<br><a href="https://github.com/dflydev/dflydev-apache-mime-types">Apache MIME Types</a>: 一个解析Apache MIME类型的库<br><a href="https://github.com/versionable/Ferret">Ferret</a>:  一个MIME检测库<br><a href="https://github.com/hoaproject/Mime">Hoa Mime</a>: 另一个MIME检测库<br><a href="https://github.com/henrikbjorn/Lurker">Lurker</a>: 一个资源跟踪库<br><a href="https://github.com/herrera-io/php-file-locator">PHP File Locator</a>: 一个在大型项目中定位文件的库<br><a href="https://github.com/alchemy-fr/PHP-FFmpeg/">PHP FFmpeg</a>:  一个用于FFmpeg视频包装的库<br><a href="https://github.com/nyamsprod/Bakame.csv">CSV</a>: 一个CSV数据操作库</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>——测试代码库和生成测试数据的库<br><a href="https://github.com/sebastianbergmann/phpunit">PHPUnit</a>: 一个单元测试框架<br><a href="https://github.com/sebastianbergmann/dbunit">DBUnit</a>:  PHPUnit的代码测试库<br><a href="https://github.com/brianium/paratest">ParaTest</a>: PHPUnit的并行测试库<br><a href="https://github.com/phpspec/phpspec">PHPSpec</a>: 根据规范的单元测试库<br><a href="https://github.com/Codeception/Codeception">Codeception</a>: 一个全栈测试框架<br><a href="https://github.com/Codeception/AspectMock">AspectMock</a>: PHPUnit&#x2F;Codeception的模拟框架<br><a href="https://github.com/atoum/atoum">Atoum</a>: 一个简单的测试库<br><a href="https://github.com/padraic/mockery">Mockery</a>: 一个用于测试的模拟对象库<br><a href="https://github.com/mlively/Phake">Phake</a>: 另一个用于测试的模拟对象库<br><a href="https://github.com/phpspec/prophecy">Prophecy</a>: 一个强大的模拟框架<br><a href="https://github.com/fzaninotto/Faker">Faker</a>: 一个伪数据生成库<br><a href="https://github.com/mauris/samsui">Samsui</a>: 另一个伪数据生成库<br><a href="https://github.com/nelmio/alice">Alice</a>: 用于生成复杂数据的库<br><a href="http://behat.org/">Behat</a>: 一个行为驱动开发（BDD）的测试框架<br><a href="https://github.com/danielstjules/pho">Pho</a>: 另一个行为驱动开发的测试框架<br><a href="http://mink.behat.org/">Mink</a>: Web验收测试<br><a href="https://github.com/InterNations/http-mock">HTTP Mock</a>: 一个在单元测试中模拟HTTP请求的库<br><a href="https://github.com/mikey179/vfsStream">VFS Stream</a>: 一个用于测试的虚拟文件系统流包装<br><a href="https://github.com/adlawson/vfs.php">VFS</a>: 另一个用于测试的虚拟文件系统<br><a href="http://locust.io/">Locust</a>: 一个Python开发的现代负载测试库</p><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>——处理和存储密码的库和工具<br><a href="https://github.com/ircmaxell/password_compat">Password Compat</a>: 一个用于新的PHP5.5密码功能的兼容库<br><a href="http://www.openwall.com/phpass/">phpass</a>: 一个便携式密码哈希框架<br><a href="https://github.com/ircmaxell/PHP-PasswordLib">PHP Password Lib</a>: 一个用于生成和验证密码的库<br><a href="https://github.com/ircmaxell/password-policy">Password Policy</a>: 一个PHP和JavaScript的密码规则库<br><a href="https://github.com/jeremykendall/password-validator">Password Validator</a>: 验证和升级密码哈希的库<br><a href="https://github.com/bjeavons/zxcvbn-php">Zxcvbn PHP</a>: 一个基于Zxcvbn JS的PHP显示密码强度估计库</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>——用于分析、解析和操作代码库的工具<br><a href="https://github.com/nikic/PHP-Parser">PHP Parser</a>: 一个PHP编写的PHP解析器<br><a href="https://github.com/ircmaxell/PHPPHP">PHPPHP</a>: 一个PHP实现的PHP虚拟机<br><a href="https://github.com/fieryprophet/php-sandbox">PHPSandbox</a>: PHP的沙盒环境<br><a href="https://github.com/jakubledl/dissect">Dissect</a>: 词法和语法分析的工具集合<br><a href="http://phpmd.org/">PHP Mess Detector</a>: 一个扫描代码bug、次佳代码和未使用参数的库<br><a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP Code Sniffer</a>: 一个检测PHP、CSS和JS代码标准冲突的库<br><a href="https://github.com/sebastianbergmann/phpcpd">PHPCPD</a>: 一个检测复制和粘贴代码的库<br><a href="https://github.com/scrutinizer-ci/php-analyzer">PHP Analyser</a>: 一个分析PHP代码中错误的库<br><a href="https://github.com/fabpot/PHP-CS-Fixer">PHP CS Fixer</a>: 一个代码标准库<br><a href="https://github.com/schmittjoh/php-manipulator">PHP Manipulator</a>: 用于分析和修改PHP源代码的库<br><a href="https://github.com/Halleck45/PhpMetrics">PHP Metrics</a>: 一个静态测量库<br><a href="https://github.com/QafooLabs/php-refactoring-browser">PHP Refactoring Browser</a>: 一个用于重构PHP代码的命令行工具<br><a href="https://github.com/devster/ubench">UBench</a>: 一个简单的小型基准测试库<br><a href="https://github.com/polyfractal/athletic">Athletic</a>: 一个基于标注的基准测试库<br><a href="https://github.com/Trismegiste/Mondrian">Mondrian</a>: 使用图论的代码分析工具<br><a href="https://scrutinizer-ci.com/">Scrutinizer</a>: 检查PHP代码的Web工具<br><a href="https://github.com/sebastianbergmann/phploc">PHPLOC</a>: 一个快速评估PHP项目大小的工具<br><a href="https://github.com/phacility/xhprof">xHprof</a>: 另一个PHP性能评测工具<br><a href="https://github.com/jbrooksuk/phpcheckstyle">PHPCheckstyle</a>: 一个帮助遵守特定代码规则的工具</p><h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>——用于管理、压缩和最小化网站资源的工具<br><a href="https://github.com/kriswallsmith/assetic">Assetic</a>: 一个资源管理的管道库<br><a href="https://github.com/CHH/pipe">Pipe</a>: 另一个资源管理的管道库<br><a href="https://github.com/meenie/munee">Munee</a>: 一个资源优化库<br><a href="https://github.com/tedivm/JShrink">JShrink</a>: 一个JavaScript的最小化库<br><a href="https://github.com/webmozart/puli">Puli</a>: 一个检测资源绝对路径的库</p><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p>——使用经纬度编码地址的库<br><a href="http://geocoder-php.org/">GeoCoder</a>: 一个地理编码库</p><p><a href="https://github.com/php-loep/Geotools">GeoTools</a>: 一个地理工具相关的库</p><p><a href="https://github.com/mjaschen/phpgeo">PHPGeo</a>: 一个简单的地理库<br><a href="https://github.com/jmikola/geojson">GeoJSON</a>: 一个GeoJSON的实现</p><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>——处理日期和时间的库<br><a href="https://github.com/briannesbitt/Carbon">Carbon</a>: 一个简单的日期时间API扩展<br><a href="https://github.com/jasonlewis/expressive-date">ExpressiveDate</a>: 另一个日期时间API扩展<br><a href="http://yohan.giarel.li/CalendR">CalendR</a>: 一个日历管理的库</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>——事件驱动或非阻塞事件循环实现的库<br><a href="https://github.com/reactphp/react">React</a>: 一个事件驱动的非阻塞I&#x2F;O库<br><a href="https://github.com/asm89/Rx.PHP">Rx.PHP</a>: 一个反应扩展库<br><a href="https://github.com/cboden/Ratchet">Ratchet</a>: 一个Web套接字库<br><a href="https://github.com/hoaproject/Websocket">Hoa WebSocket</a>: 另一个Web套接字库<br><a href="https://github.com/hoaproject/Eventsource">Hoa EventSource</a>: 一个事件源库<br><a href="https://github.com/igorw/evenement">Evenement</a>: 一个事件调度库<br><a href="https://github.com/fuelphp/event">FuelPHP Event</a>: 另一个事件调度库</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>——用于管理数据库模式和迁移的库<br><a href="https://github.com/davedevelopment/phpmig">PHPMig</a>: 一个迁移管理库<br><a href="https://github.com/robmorgan/phinx">Phinx</a>: 一个数据库迁移管理库<br><a href="https://github.com/icomefromthenet/Migrations">Migrations</a>: 另一个迁移管理库<br><a href="http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html">Doctrine Migrations</a>: 用于Doctrine的迁移库</p><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><p>——处理NoSQL后端的库<br><a href="https://github.com/alexbilbie/MongoQB">MongoQB</a>: 一个MongoDB的查询构建库<br><a href="https://github.com/thephpleague/monga">Monga</a>: 一个MongoDB的抽象库<br><a href="https://github.com/nrk/predis">Predis</a>: 一个功能完全的Redis库</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>——处理事件和任务队列的库<br><a href="https://github.com/pda/pheanstalk">Pheanstalk</a>: 一个Beanstalkd客户端库<br><a href="https://github.com/videlalvaro/php-amqplib">PHP AMQP</a>: 一个纯PHP AMQP库<br><a href="https://github.com/videlalvaro/Thumper">Thumper</a>: 一个RabbitMQ模式库<br><a href="https://github.com/bernardphp/bernard">Bernard</a>: 一个多后端的抽象库</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>——在数据中建立索引和执行查询相关的库和软件<br><a href="https://github.com/elasticsearch/elasticsearch-php">ElasticSearch PHP</a>: 用于ElasticSearch的官方客户端库<br><a href="https://github.com/ruflin/Elastica">Elastica</a>: 另一个ElasticSearch的客户端库<br><a href="http://www.solarium-project.org/">Solarium</a>: Solr的客户端库<br><a href="http://foolcode.github.io/SphinxQL-Query-Builder/">SphinxQL query builder</a>: Sphinx搜索引擎的查询库</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>——构建命令行工具的库<br><a href="https://github.com/d11wtq/boris">Boris</a>: 一个微型的PHP REPL<br><a href="https://github.com/bobthecow/psysh">PsySH</a>: 另一个PHP REPL<br><a href="https://github.com/mcrumm/pecan">Pecan</a>: 一个事件驱动，非阻塞内核<br><a href="https://github.com/ulrichsg/getopt-php">GetOpt</a>: 一个命令行选择解析器<br><a href="https://github.com/CHH/optparse">OptParse</a>: 另一个命令行选择解析器<br><a href="https://github.com/nategood/commando">Commando</a>: 一个简单的命令行选择解析器<br><a href="https://github.com/c9s/php-GetOptionKit">GetOptionKit</a>: 同样还是一个命令行选择解析器<br><a href="https://github.com/mtdowling/cron-expression">Cron Expression</a>: 计算cron运行日期的库<br><a href="https://github.com/MrRio/shellwrap">ShellWrap</a>: 一个简单的命令行包装库<br><a href="https://github.com/hoaproject/Console">Hoa Console</a>: 另一个命令行库<br><a href="https://github.com/php-loep/shunt">Shunt</a>: 一个在多台远程机器上并行运行的命令行库<br><a href="https://github.com/Cilex/Cilex">Cilex</a>: 构建命令行工具的小型框架</p><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><p>——实现身份验证模式的库<br><a href="https://github.com/cartalyst/sentry">Sentry</a>: 一个身份验证和授权的框架<br><a href="http://docs.cartalyst.com/sentry-social-2/introduction">Sentry Social</a>: 一个用于社交网络身份验证的库<br><a href="https://github.com/opauth/opauth">Opauth</a>: 一个多供应的身份验证框架<br><a href="https://github.com/php-loep/oauth2-server">OAuth2</a>: 一个OAuth2身份验证服务器、资源服务器和客户端库<br><a href="http://bshaffer.github.io/oauth2-server-php-docs/">OAuth2 Server</a>: 一个OAuth2服务器实现<br><a href="https://github.com/Lusitanian/PHPoAuthLib">PHP oAuthLib</a>: 另一个OAuth库<br><a href="https://github.com/ruudk/twitteroauth">TwitterOAuth</a>: 同样是一个OAuth库<br><a href="https://github.com/lyrixx/twitter-sdk">TwitterSDK</a>: 一个经过完全测试的Twitter SDK<br><a href="https://github.com/dflydev/dflydev-hawk">Hawk</a>: 一个Hawk HTTP身份验证库<br><a href="https://github.com/hybridauth/hybridauth">HybridAuth</a>: 一个开源的社交登录库</p><h2 id="数据结构和存储"><a href="#数据结构和存储" class="headerlink" title="数据结构和存储"></a>数据结构和存储</h2><p>——实现数据结构和存储技术的库<br><a href="https://github.com/morrisonlevi/Ardent">Ardent</a>: 一个数据结构库<br><a href="https://github.com/schmittjoh/php-collection">PHP Collections</a>: 一个简单的集合库<br><a href="https://github.com/schmittjoh/serializer">Serializer</a>: 用于序列化和反序列化数据的库</p><p><a href="https://github.com/herrera-io/php-object-storage">PHP Object Storage</a>: 一个用于对象存储的库</p><p><a href="https://github.com/php-loep/fractal">Fractal</a>: 一个将复杂数据结构转换为JSON输出的库</p><p><a href="http://github.com/Wisembly/Totem">Totem</a>: 一个管理和创建数据修改集的库</p><p><a href="https://github.com/TimeToogo/Pinq">PINQ</a>: PHP实时Linq库<br><a href="https://github.com/netresearch/jsonmapper">JsonMapper</a>: 一个将内嵌JSON结构映射到PHP类上的库</p><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>——关于通知软件的库<br><a href="https://github.com/filp/nod">Nod</a>: 一个通知库<br><a href="https://github.com/wrep/notificato">Notificato</a>: 一个处理推送消息的库<br><a href="https://github.com/Ph3nol/NotificationPusher">Notification Pusher</a>: 设备推送通知的独立库<br><a href="https://github.com/namshi/notificator">Notificator</a>: 一个轻量级通知库</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>——用于项目部署的库<br><a href="https://github.com/tamagokun/pomander">Pomander</a>: 一个PHP应用的部署工具<br><a href="https://github.com/Anahkiasen/rocketeer">Rocketeer</a>: PHP的快速和简单部署器<br><a href="https://github.com/laravel/envoy">Envoy</a>: 使用PHP运行SSH任务的工具<br><a href="https://github.com/aerialls/Plum">Plum</a>: 一个部署库</p><h2 id="集成开发环境IDE"><a href="#集成开发环境IDE" class="headerlink" title="集成开发环境IDE"></a>集成开发环境IDE</h2><p>——支持PHP的集成开发环境<br><a href="https://netbeans.org/">Netbeans</a>: 支持PHP和HTML5的IDE环境<br><a href="https://www.eclipse.org/downloads/">Eclipse for PHP Developers</a> : 基于Eclipse平台的PHP IDE<br><a href="http://www.jetbrains.com/phpstorm/">PhpStorm</a> : 商业PHP IDE</p><h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><p>——基于Web的应用和工具<br><a href="http://3v4l.org/">3V4L</a>: 一个在线的PHP内核<br><a href="http://dbv.vizuina.com/">DBV</a>: 一个数据库版本控制应用<br><a href="https://github.com/CoderKungfu/php-queue">PHP Queue</a>: 一个管理队列后端的应用<br><a href="http://composer.borreli.com/">Composer as a Service</a>: 作为一个zip文件下载Composer包的工具<br><a href="https://github.com/sj26/mailcatcher">MailCatcher</a>: 一个抓取和浏览邮件的Web工具</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p><a href="http://www.vagrantup.com/">Vagrant</a>: 一个便携式的开发环境工具<br><a href="http://www.ansibleworks.com/">Ansible</a>: 一个非常简单的编制框架<br><a href="http://puppetlabs.com/">Puppet</a>: 一个服务器自动化框架和应用<br><a href="https://puphpet.com/">PuPHPet</a>: 用于构建PHP开发虚拟机的Web工具<br><a href="http://getprotobox.com/">Protobox</a>: 另一个用于构建PHP开发虚拟机的Web工具<br><a href="http://phansible.com/">Phansible</a>: 一个用Ansible构建PHP开发开发虚拟机的Web工具</p><h2 id="依赖管理的附加部分"><a href="#依赖管理的附加部分" class="headerlink" title="依赖管理的附加部分"></a>依赖管理的附加部分</h2><p>——其它依赖管理的相关工具<br><a href="https://github.com/composer/satis">Satis</a> : 静态的Composer库生成器<br><a href="https://github.com/bamarni/composition">Composition</a>: 一个运行时检查Composer环境的库<br><a href="https://github.com/herrera-io/php-version">Version</a> : 一个在语义上分析和比较的库<br><a href="https://github.com/ralphschindler/Namespacer">NameSpacer</a> : 将下划线转为命名空间的库<br><a href="https://github.com/goatherd/patch-installer">Patch Installer</a>: 使用Composer安装补丁的库<br><a href="https://github.com/silpion/composer-checker">Composer Checker</a>: 一个验证Composer配置的工具</p><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>——处理流的库<br><a href="https://github.com/fzaninotto/Streamer">Streamer</a>: 一个简单的面向对象流包装库</p><h2 id="框架的附加部分"><a href="#框架的附加部分" class="headerlink" title="框架的附加部分"></a>框架的附加部分</h2><p>——其它关于Web开发框架的相关工具<br><a href="https://github.com/symfony-cmf/symfony-cmf">Symfony CMF</a>: 一个创建自定义CMS的内容管理框架<br><a href="http://rad.knplabs.com/">Knp RAD Bundle</a>: Symfony2的快速应用程序包（RAD）</p><h2 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h2><p>——来自Web开发框架的组件<br><a href="http://symfony.com/doc/master/components/index.html">Symfony2 Components</a>: 关于Symphony2的组件<br><a href="https://packages.zendframework.com/">Zend Framework 2 Components</a>:  关于ZF2的组件<br><a href="http://auraphp.github.com/">Aura Components</a>:  一个PHP5.4的组件包<br><a href="http://hoa-project.net/En/">Hoa Project</a>:  另一个PHP组件包</p><h2 id="微型框架的附加部分"><a href="#微型框架的附加部分" class="headerlink" title="微型框架的附加部分"></a>微型框架的附加部分</h2><p>——其它相关的微型框架和路由<br><a href="https://github.com/fabpot/Silex-Skeleton">Silex Skeleton</a>: 用于Silex的项目框架<br><a href="https://github.com/silexphp/Silex-WebProfiler">Silex Web Profiler</a>:  用于Silex的Web调试工具条<br><a href="https://github.com/stackphp">Stack</a>: 用于Silex&#x2F;Symphony的可堆叠中间件库<br><a href="https://github.com/codeguy/Slim-Skeleton">Slim Skeleton</a>: 用于Slim的框架<br><a href="https://github.com/codeguy/Slim-Views">Slim View</a>: Slim的自定义视图集<br><a href="https://github.com/codeguy/Slim-Middleware">Slim Middleware</a>: Slim的自定义中间件集合</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>——用于HTTP和抓取网站的库<br><a href="https://github.com/guzzle/guzzle">Guzzle</a>: 一个完整的HTTP客户端<br><a href="https://github.com/kriswallsmith/Buzz">Buzz</a>: 另一个HTTP客户端<br><a href="https://github.com/rmccue/Requests">Requests</a>: 一个简单的HTTP库<br><a href="https://github.com/nategood/httpful">HTTPFul</a>:  一个链式HTTP客户端<br><a href="https://github.com/fabpot/Goutte">Goutte</a>: 一个简单的Web抓取器<br><a href="http://php-vcr.github.io/">PHP VCR</a>: 一个录制和回放HTTP请求的库</p><h2 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h2><p>——用于发送和解析Email的库<br><a href="http://swiftmailer.org/">SwiftMailer</a>: 一个邮件程序的解决方案<br><a href="https://github.com/PHPMailer/PHPMailer">PHPMailer</a>: 另一个邮件程序的解决方案<br><a href="https://github.com/tedivm/Fetch">Fetch</a>: 一个IMAP库<br><a href="https://github.com/willdurand/EmailReplyParser">Email Reply Parser</a>: 一个邮件回复解析器库<br><a href="https://github.com/henrikbjorn/Stampie">Stampie</a>: 关于邮件服务的库，比如SendGrid、PostMark、MailGun和Mandrill<br><a href="https://github.com/tijsverkoyen/CssToInlineStyles">CssToInlineStyles</a>: 邮件模板中一个内联的CSS库</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>——实现依赖注入设计模式的库<br><a href="http://pimple.sensiolabs.org/">Pimple</a>: 一个小的依赖注入容器<br><a href="https://github.com/rdlowrey/Auryn">Auryn</a>: 另一个小的依赖注入容器<br><a href="https://github.com/orno/di">Orno Di</a>: 一个易扩展的依赖注入容器<br><a href="http://mnapoli.github.com/PHP-DI/">PHP DI</a>: 一个使用标注实现的依赖注入<br><a href="https://github.com/jeremeamia/acclimate">Acclimate</a>:  依赖注入容器和服务定位器的通用接口</p><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>——处理图像的库<br><a href="http://imagine.readthedocs.org/en/latest/index.html">Imagine</a>: 一个图像处理库<br><a href="https://github.com/Sybio/ImageWorkshop">PHP Image Workshop</a>: 另一个图像处理库<br><a href="https://github.com/Intervention/image">Intervention Image</a>: 同样还是一个图像处理库<br><a href="https://github.com/Sybio/GifFrameExtractor">GIF Frame Extractor</a>: 一个提取GIF动画帧信息的库<br><a href="https://github.com/Sybio/GifCreator">GIF Creator</a>:  从多幅图片中创建GIF动画的库<br><a href="https://github.com/nmcteam/image-with-text">Image With Text</a>: 在图像中嵌入文本的库<br><a href="https://github.com/php-loep/color-extractor">Color Extractor</a>: 从图像中提取颜色的库</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>——用于生成安全的随机数、加密数据、扫描漏洞的库<br><a href="https://github.com/ezyang/htmlpurifier">HTML Purifier</a>: 一个标准的HTML过滤器<br><a href="https://github.com/ircmaxell/RandomLib">RandomLib</a>: 生成随机数和随机字符串的库<br><a href="https://github.com/pixeloution/true-random">True Random</a>: 使用<a href="http://www.random.org/">www.random.org</a>生成随机数的库<br><a href="https://github.com/padraic/SecurityMultiTool">SecurityMultiTool</a>: 一个PHP安全库<br><a href="http://phpseclib.sourceforge.net/">PHPSecLib</a>: 一个纯的PHP安全通信库<br><a href="https://github.com/timoh6/TCrypto">TCrypto</a>: 一个简单的键值加密存储库<br><a href="https://github.com/PHPIDS/PHPIDS">PHP IDS</a>: 一个结构化的PHP安全层<br><a href="https://github.com/Herzult/php-ssh">PHP SSH</a>: 面向对象的SSH包装库<br><a href="https://github.com/psecio/iniscan">IniScan</a>: 一个扫描PHP INI文件安全的工具<br><a href="https://security.sensiolabs.org/">SensioLabs Security Check</a>: 一个根据安全建议检查Composer依赖的Web工具<br><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">Zed</a>: 用于Web应用的集成渗透测试工具</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>——生成项目文档的库<br><a href="https://github.com/fabpot/Sami">Sami</a>: 一个API文档生成器<br><a href="https://github.com/apigen/apigen">APIGen</a>: 另一个API文档生成器<br><a href="https://github.com/phpDocumentor/phpDocumentor2">PHP Documentor 2</a>: 文档生成器<br><a href="http://phpdox.de/">phpDox</a>: 一个PHP项目的文档生成器（不仅仅是API文档）</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>——调试代码的库和工具<br><a href="https://github.com/xdebug/xdebug">xDebug</a>: 一个PHP的调试和分析工具<br><a href="http://phpdebugbar.com/">PHP Debug Bar</a>: 一个调试工具条<br><a href="https://github.com/Seldaek/php-console">PHP Console</a>: Web调试控制台<br><a href="https://github.com/barbushin/php-console">Barbushin PHP Console</a>: 一个使用Google Chrome的Web调试控制工具<br><a href="http://phpdbg.com/">PHPDBG</a>: 一个交互性的PHP调试器<br><a href="https://github.com/nette/tracy">Tracy</a>: 一个简单的错误检测、日志和时间测量库</p><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p>——项目构建和自动化工具<br><a href="https://github.com/herrera-io/php-go">Go</a>: 一个简单的PHP构建工具<br><a href="https://github.com/CHH/bob">Bob</a>: 一个简单的项目自动化工具<br><a href="https://github.com/jaz303/phake">Phake</a>: 一个PHP克隆库<br><a href="https://github.com/kherge/Box">Box</a>: 用来构建PHAR文件的工具<br><a href="http://www.phing.info/">Phing</a>: 依据Apache Ant的PHP项目构建系统</p><h2 id="任务运行器"><a href="#任务运行器" class="headerlink" title="任务运行器"></a>任务运行器</h2><p>——自动运行任务的库<br><a href="http://taskphp.github.io/">Task</a>: 依据Grunt和Gulp的纯PHP任务运行器<br><a href="https://github.com/Codegyre/Robo">Robo</a>: 面向对象的PHP任务运行器<br><a href="http://bldr.io/">Bldr</a>: 构建在Symphony组件上的PHP任务运行器</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>——构建导航结构的工具<br><a href="https://github.com/KnpLabs/KnpMenu">KnpMenu</a>: 一个菜单库<br><a href="https://github.com/tackk/cartographer">Cartographer</a>: 一个站点地图生成库</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>——用于生成和处理日志文件的库<br><a href="https://github.com/Seldaek/monolog">Monolog</a>: 一个完整的日志工具<br><a href="https://github.com/katzgrau/KLogger">KLogger</a>: 一个易于使用的PSR-3日志类</p><h2 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h2><p>——用于支付和构建在线电子商务商店的库和应用<br><a href="https://github.com/adrianmacneil/omnipay">OmniPay</a>: 一个多网关支付处理的框架<br><a href="https://github.com/payum/payum">Payum</a>: 一个用于支付的抽象库<br><a href="http://www.sylius.org/">Sylius</a>: 一个开源的电子商务解决方案<br><a href="http://thelia.net/v2/">Thelia</a>: 另一个开源的电子商务解决方案<br><a href="https://github.com/mathiasverraes/money">Money</a>: PHP实现的Fowler金钱模式<br><a href="https://github.com/sebastianbergmann/money">Sebastian Money</a>: 一个处理货币价值的库<br><a href="https://github.com/florianv/swap">Swap</a>: 一个汇率库</p><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p>——处理PDF文件的库和软件<br><a href="https://github.com/KnpLabs/snappy">Snappy</a>: 一个PDF和图像的生成库<br><a href="https://github.com/antialize/wkhtmltopdf">WKHTMLToPDF</a>: 一个将HTML转换为PDF的工具</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>——使用对象关系映射（ORM）或数据映射技术的数据库交互库<br><a href="http://www.doctrine-project.org/">Doctrine</a>: 一个完整的DBAL和ORM<br><a href="https://github.com/l3pp4rd/DoctrineExtensions">Doctrine Extensions</a>: 一个Doctrine行为的扩展集合<br><a href="http://www.propelorm.org/">Propel</a>: 一个快速的ORM，迁移和查询库<br><a href="https://github.com/illuminate/database">Eloquent</a>: Laravel 4 ORM<br><a href="https://github.com/etrepat/baum">Baum</a>: 一个Eloquent的嵌套集合<br><a href="https://github.com/vlucas/spot2">Spot2</a>: MySQL的ORM映射器<br><a href="http://redbeanphp.com/">RedBean</a>: 一个轻量级、易配置的ORM<br><a href="https://github.com/chanmix51/Pomm">Pomm</a>: 用于PostgreSQL的一个对象模型管理器<br><a href="https://github.com/Ocramius/ProxyManager">ProxyManager</a>: 用于数据映射生成代理对象的工具集合</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>——处理标记的库<br><a href="http://milesj.me/code/php/decoda">Decoda</a>: 一个轻量级的标记解析库<br><a href="https://github.com/michelf/php-markdown">PHP Markdown</a>: Markdown解析器<br><a href="https://github.com/thephpleague/commonmark">CommonMark PHP</a>: 一个支持CommonMark spec的Markdown解析器<br><a href="https://github.com/dflydev/dflydev-markdown">Dflydev Markdown</a>: 另一个Markdown解析器<br><a href="https://github.com/erusev/parsedown">Parsedown</a>: 同样是一个Markdown解析器<br><a href="https://github.com/kzykhys/Ciconia">Ciconia</a>: 一个支持Github风格的Markdown解析器<br><a href="https://github.com/cebe/markdown">Cebe Markdown</a>: 一个快速、可扩展的Markdown解析器<br><a href="https://github.com/Masterminds/html5-php">HTML5 PHP</a>: 一个HTML5解析和序列化的库</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>——解析和操纵字符串的库<br><a href="https://github.com/sensiolabs/ansi-to-html">ANSI to HTML5</a>: 一个将ANSI转换为HTML5的库<br><a href="https://github.com/nicolas-grekas/Patchwork-UTF8">Patchwork UTF-8</a>: 处理UTF-8格式字符串的便携库<br><a href="https://github.com/hoaproject/String">Hoa String</a>: 另一个UTF-8格式的字符串库<br><a href="https://github.com/danielstjules/Stringy">Stringy</a>: 一个多字节支持的字符串操纵库<br><a href="https://github.com/mikeemoo/ColorJizz-PHP">Color Jizz</a>: 一个处理和转换颜色的库<br><a href="https://github.com/ramsey/uuid">UUID</a>: 生成UUIDs的库<br><a href="https://github.com/cocur/slugify">Slugify</a>: 一个将字符串转换为slug格式的库<br><a href="https://github.com/jbroadway/urlify">Urlify</a>: 一个Django URLify.js的PHP端口<br><a href="https://github.com/kzykhys/Text">Text</a>: 一个文本处理库<br><a href="https://github.com/jdorn/sql-formatter/">SQL Formatter</a>: 一个用于格式化SQL语句的库<br><a href="https://github.com/tobie/ua-parser/tree/master/php">UA Parser</a>: 一个用于解析用户字符串的库</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>——处理数字的库<br><a href="https://github.com/powder96/numbers.php">Numbers PHP</a>: 一个处理数字的库<br><a href="https://github.com/moontoast/math">Math</a>: 处理较大数字的库<br><a href="https://github.com/gabrielelana/byte-units">ByteUnits</a>: 一个在二进制和测量系统中解析、格式化和转换字节单位的库<br><a href="https://github.com/triplepoint/php-units-of-measure">PHP Units of Measure</a>: 一个测量单位间转换的库<br><a href="https://github.com/Crisu83/php-conversion">PHP Conversion</a>: 另一个测量单位间转换的库<br><a href="https://github.com/giggsey/libphonenumber-for-php">LibPhoneNumber for PHP</a>: PHP实现的Google电话号码处理系统库</p><h2 id="过滤和验证"><a href="#过滤和验证" class="headerlink" title="过滤和验证"></a>过滤和验证</h2><p>——用于过滤和验证数据的库<br><a href="https://github.com/ircmaxell/filterus">Filterus</a>: 一个简单的PHP过滤库<br><a href="https://github.com/Respect/Validation">Respect Validate</a>: 一个简单的验证库<br><a href="https://github.com/vlucas/valitron">Valitron</a>: 另一个数据验证库<br><a href="https://github.com/codeguy/Upload">Upload</a>: 一个处理文件上传和验证的库<br><a href="https://github.com/rdohms/DMS-Filter">DMS Filter</a>: 一个基于标注的过滤库<br><a href="https://github.com/romaricdrigon/MetaYaml">MetaYaml</a>: 支持YAML、JSON和XML的一个模式验证库<br><a href="https://github.com/ronanguilloux/IsoCodes">ISO-codes</a>: 验证不同ISO和ZIP编码的库</p><h2 id="REST和API"><a href="#REST和API" class="headerlink" title="REST和API"></a>REST和API</h2><p>——用于开发REST-ful APIs的库和Web框架<br><a href="https://github.com/zfcampus/zf-apigility-skeleton">Apigility</a>: 一个使用Zend Framework2构建的API构建器<br><a href="https://github.com/willdurand/Hateoas">Hateoas</a>: 一个HATEOAS REST的web服务库<br><a href="https://github.com/blongden/hal">HAL</a>: 一个超文本应用语言（HAL）构建库<br><a href="https://github.com/willdurand/Negotiation">Negotiation</a>: 一个内容协商库<br><a href="https://github.com/leedavis81/drest">Drest</a>: 一个将Doctrine实体展现为REST资源结点的库<br><a href="https://github.com/Luracast/Restler">Restler</a>: 一个将PHP方法展现为RESTful web API的轻量级框架</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>——缓存数据的库<br><a href="http://www.php.net/manual/en/book.apc.php">Alternative PHP Cache (APC)</a>: PHP的开源操作码缓存<br><a href="https://github.com/doctrine/cache">Cache</a>: 一个缓存库<br><a href="https://github.com/tedivm/Stash">Stash</a>: 另一个缓存库</p><h2 id="第三方API"><a href="#第三方API" class="headerlink" title="第三方API"></a>第三方API</h2><p>——访问第三方API的库<br><a href="https://github.com/aws/aws-sdk-php">Amazon Web Service SDK</a>: PHP AWS SDK官方库<br><a href="https://github.com/gwkunze/S3StreamWrapper">S3 Stream Wrapper</a>: Amazon S3的流包装库<br><a href="https://github.com/stripe/stripe-php">Stripe</a>: 官方的Stripe PHP库<br><a href="http://campaignmonitor.github.com/createsend-php/">Campaign Monitor</a>: 官方的Campaign Monitor PHP库<br><a href="https://github.com/toin0u/DigitalOcean">Digital Ocean</a>: 一个与Digital Ocean API交互的库<br><a href="https://github.com/dsyph3r/github-api3-php">Github</a>: 一个与Github API交互的库<br><a href="https://github.com/KnpLabs/php-github-api">PHP Github API</a>: 另一个与Github API交互的库<br><a href="https://github.com/widop/twitter-oauth">Twitter OAuth</a>: 一个与Twitter’s OAuth工作流交互的库<br><a href="https://github.com/widop/twitter-rest">Twitter REST</a>: 一个与Twitter’s REST API交互的库<br><a href="https://github.com/dropbox/dropbox-sdk-php">Dropbox SDK</a>: 官方的PHP Dropbox SDK库<br><a href="https://github.com/twilio/twilio-php">Twilio</a>: 官方的Twilio PHP REST API<br><a href="https://github.com/mailgun/mailgun-php">Mailgun</a>: 官方的Mailgun PHP API</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>——帮助构建PHP扩展的库<br><a href="https://github.com/phalcon/zephir">Zephir</a>: 用于开发PHP扩展的一种在PHP和C++间的编译语言<br><a href="http://www.php-cpp.com/">PHP CPP</a>: 一个用于开发PHP扩展的C++库</p><h2 id="PHP安装"><a href="#PHP安装" class="headerlink" title="PHP安装"></a>PHP安装</h2><p><a href="http://mxcl.github.com/homebrew/">HomeBrew</a>: OSX的包管理器<br><a href="https://github.com/josegonzalez/homebrew-php">HomeBrew PHP</a>:一个HomeBrew的PHP接头<br><a href="http://php-osx.liip.ch/">PHP OSX</a>: 用于OSX的PHP安装器<br><a href="https://github.com/c9s/phpbrew">PHP Brew</a>: 一个PHP的版本管理和安装器<br><a href="https://github.com/CHH/phpenv">PHP Env</a>: 一个PHP的版本管理器<br><a href="https://github.com/jubianchi/phpswitch">PHP Switch</a>: 另一个PHP的版本管理器<br><a href="https://github.com/CHH/php-build">PHP Build</a>: 一个PHP的版本安装器<br><a href="http://virtphp.org/">VirtPHP</a>: 一个用来创建和管理独立PHP开发环境的工具</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>——解析URL的库<br><a href="https://github.com/jwage/purl">Purl</a>:  一个URL操作库<br><a href="https://github.com/jeremykendall/php-domain-parser">PHP Domain Parser</a>:  一个本地的后缀解析器</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php整理常用时间戳和日期</title>
      <link href="/datetime/"/>
      <url>/datetime/</url>
      
        <content type="html"><![CDATA[<p><strong>整理常用时间戳和日期，方便后期用到。</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">昨天0时时间戳</span><br><span class="line">$yesterday_zero = strtotime(date(&#x27;Y-m-d&#x27;)) - 3600 * 24;</span><br><span class="line">昨天此时时间戳</span><br><span class="line">$yesterday_now = strtotime(&#x27;-1 day&#x27;);</span><br><span class="line">本周一时间戳</span><br><span class="line">$week_this_monday = strtotime(&#x27;last Monday&#x27;);</span><br><span class="line">明天时间戳</span><br><span class="line">$tomorrow = strtotime(&quot;+1 day&quot;);</span><br><span class="line">上周一时间戳</span><br><span class="line">$week_last_monday = strtotime(&#x27;last Monday&#x27;) - 3600 * 24 * 7;</span><br><span class="line">上周日时间戳</span><br><span class="line">$week_last_sunday = strtotime(&#x27;last Monday&#x27;) - 3600 * 24;</span><br><span class="line">本月第一天时间戳</span><br><span class="line">$month_first = strtotime(date(&quot;Y&quot;) . &quot;-&quot; . date(&quot;m&quot;) . &quot;-1&quot;);</span><br><span class="line">本月最后一天时间戳</span><br><span class="line">$month_last = strtotime(date(&quot;Y&quot;) . &quot;-&quot; . date(&quot;m&quot;) . &quot;-&quot; . date(&quot;t&quot;));</span><br><span class="line">获取上个月第一天及最后一天</span><br><span class="line">echo date(&#x27;Y-m-01&#x27;, strtotime(&#x27;-1 month&#x27;)); </span><br><span class="line">echo &quot;&lt;br/&gt;&quot;; </span><br><span class="line">echo date(&#x27;Y-m-t&#x27;, strtotime(&#x27;-1 month&#x27;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datetime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloWorld</title>
      <link href="/helloWorld/"/>
      <url>/helloWorld/</url>
      
        <content type="html"><![CDATA[<p>Hello World！</p><blockquote class="blockquote-center">添加居中效果</blockquote>]]></content>
      
      
      <categories>
          
          <category> hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单保存下载 Windows 10 随机聚焦锁屏壁纸</title>
      <link href="/win10bg/"/>
      <url>/win10bg/</url>
      
        <content type="html"><![CDATA[<p>在 Windows 10 上新增了一项功能 Windows 聚焦 (Windows Spotlight)，它会自动随机下载并更换锁屏界面的壁纸 (Lockscreen)，让你每次打开电脑都有不一样的视觉享受。</p><span id="more"></span><p>这些聚焦锁屏壁纸也是会不断更新的，如果你遇到了非常喜欢的壁纸，先保存起来，但是又不知道在哪。</p><p>按下键盘的「Win+R」，调出“运行”窗口，然后输入下面的路径并点确定：</p><p><code>%localappdata%\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets</code></p><p>这时便会打开了 Win10 锁屏壁纸的隐藏文件夹，你会看到很多未知的文件，这些其实就是锁屏壁纸，但我们需要进一步处理。全选并复制这些文件到另外一个文件夹去，比如桌面或者其他盘（切勿修改原文件夹里的文件，会影响 Windows 聚焦功能）。</p><p>打开刚才复制文件夹所在的位置，按住键盘的 Shift 键同时右键点击该文件夹，然后选择「在此处打开命令行窗口」的选项启动命令行。</p><p>输入下边的命令 (注意保留空格)，并回车执行。这句命令是用来对文件进行批量重命名的。请务必注意此时命令行前面的路径是你正准备要操作的文件夹，如果是其他路径的话，该路径下的文件就全部被改名了！</p><p><code>ren *.* *.jpg</code></p><p>重命名也可以手动重命名，不过这个有的麻烦，如果安装 好压 ，就可以用好压来批量重命名文件了，全选文件（ctrl+a）然后右键鼠标，找到其 他压缩命令 –&gt; 批量文件改名，修改就可以了。</p><p>这时打开 复制的文件夹就可以看到那些未知的文件都已经变成图片了！不过，其中也会夹杂一些对我们没用的缓存文件，我们只管挑选其中的壁纸出来即可。这些锁屏壁纸中有横屏也有竖屏的，竖屏可以用于手机或平板，分辨率为 1920x1080 以及 1080x1920 全高清。</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改页面鼠标指针</title>
      <link href="/css-cursor/"/>
      <url>/css-cursor/</url>
      
        <content type="html"><![CDATA[<p>去逛博客的时候发现的发现，鼠标的指针就变了，变得很个性,于是学习了一下.</p><span id="more"></span><p>很简单，只要添加两个样式就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">   cursor: url(鼠标指针的图片链接),auto;</span><br><span class="line">&#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">   cursor: url(鼠标指针的图片链接), auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就可以看到你魔性的鼠标指针了。</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鼠标指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中将字符串转换成json的三种方式</title>
      <link href="/str2json/"/>
      <url>/str2json/</url>
      
        <content type="html"><![CDATA[<p>将字符串转换成json对象，IE不支持通过JSON.parse将字符串转换成JSON对象的方法。</p><p>让人不由得认为IE的基本核心是无法使用JSON.parse的所以只能退而求其次采用老版本的方法</p><span id="more"></span><p>1、<strong>eval方式解析</strong>，恐怕这是最早的解析方式了。如下：</p><p><code>function strToJson(str)&#123; var json = eval(&#39;(&#39; + str + &#39;)&#39;); return json; &#125; </code></p><p>2、<strong>new Function形式</strong>，比较怪异哦。如下</p><p><code>function strToJson(str)&#123; var json = (new Function(&quot;return &quot; + str))(); return json; &#125; </code></p><p>3、<strong>使用全局的JSON对象</strong>，如下：</p><p><code>function strToJson(str)&#123; return JSON.parse(str); &#125; </code></p><p>转：<a href="http://www.jb51.net/article/25987.htm">http://www.jb51.net/article/25987.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> json </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取图片名称、大小、类型、上次修改时间</title>
      <link href="/jsgetimginfo/"/>
      <url>/jsgetimginfo/</url>
      
        <content type="html"><![CDATA[<p>input[type&#x3D;’file’]上传图片时，获取图片的基本信息（名称、大小、类型和修改时间）</p><span id="more"></span><p>html代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;upload-img&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;input&quot;&gt;</span><br><span class="line">        &lt;label&gt;上传图片:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; id=&quot;input-file&quot; class=&quot;input-file&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;show-img&quot;&gt;</span><br><span class="line">        &lt;label&gt;图片预览:&lt;/label&gt;</span><br><span class="line">        &lt;img src=&quot;&quot; id=&quot;show-img&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;show-info&quot; id=&quot;show-info&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&#x27;input-file&#x27;).addEventListener(&#x27;change&#x27;,function () &#123;</span><br><span class="line">    var files=this.files, //FileList，类数组，不是数组哦</span><br><span class="line">        file=files[0],</span><br><span class="line">        fileName=file.name,//文件名</span><br><span class="line">        fileType=file.type,//文件类型</span><br><span class="line">        fileSize=file.size,//文件大小</span><br><span class="line">        modifiedDate=file.lastModifiedDate,//上次修改时间</span><br><span class="line">        html=&#x27;&#x27;;</span><br><span class="line">    getImageSize(file,function (imgWidth,imgHeight) &#123;</span><br><span class="line">        html=&#x27;文件名称：&#x27;+fileName+&#x27;</span><br><span class="line">            +&#x27;文件类型：&#x27;+fileType+&#x27;</span><br><span class="line">            +&#x27;文件大小：&#x27;+fileSize+&#x27;</span><br><span class="line">            +&#x27;上次修改时间：&#x27;+modifiedDate+&#x27;</span><br><span class="line">            +&#x27;文件宽高：&#x27;+imgWidth+&#x27;----&#x27;+imgHeight;</span><br><span class="line">        document.getElementById(&#x27;show-info&#x27;).innerHTML=html;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//获取选择图片的宽高</span><br><span class="line">function getImageSize(file,callback) &#123;</span><br><span class="line">    var render=new FileReader();</span><br><span class="line">    render.onload=function (e) &#123;</span><br><span class="line">        var data=e.target.result;//读取的结果</span><br><span class="line">        var image=new Image();</span><br><span class="line">        image.onload=function () &#123;</span><br><span class="line">            var width=image.width,</span><br><span class="line">                height=image.height;</span><br><span class="line">            callback(width,height);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.src=data;</span><br><span class="line">        //预览图片</span><br><span class="line">        document.getElementById(&#x27;show-img&#x27;).src=data;</span><br><span class="line">    &#125;;</span><br><span class="line">    render.readAsDataURL(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转：<a href="http://y.dobit.top/Detail/312.html">http://y.dobit.top/Detail/312.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐藏Nginx版本号</title>
      <link href="/hidenginxversion/"/>
      <url>/hidenginxversion/</url>
      
        <content type="html"><![CDATA[<p>隐藏Nginx版本号，Nginx的版本号主要在两个地方会有，</p><span id="more"></span><p>第一个是HTTP header，有个Server:nginx&#x2F;1.x.x类似会暴露Web服务器所用软件名称以及版本号，这个也是大多数Web服务器最容易暴露版本号的地方，如下：</p><figure class="highlight plaintext"><figcaption><span>~]# curl -I www.nginx.org</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/0.8.44</span><br><span class="line">Date: Tue, 13 Jul 2010 14:05:11 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 8284</span><br><span class="line">Last-Modified: Tue, 13 Jul 2010 12:00:13 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Keep-Alive: timeout=15</span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure><p>第二个地方是Nginx出错页面，比如404页面没有找到等，这是如果用户没有指定页面的话，那么Nginx自己的页面会有版本号。</p><p>但是可以修改配置文件来打达我们的目的</p><p>1.打开Nginx主配置文件：nginx.conf，取消注释或添加配置语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   # ...省略一些配置</span><br><span class="line">　　sendfile on;</span><br><span class="line">　　tcp_nopush on;</span><br><span class="line">　　keepalive_timeout 60;</span><br><span class="line">　　tcp_nodelay on;</span><br><span class="line">    server_tokens off; 　　#默认是注释掉的</span><br><span class="line">　　# ...省略一些配置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.编辑php-fpm配置文件，如fastcgi.conf或fcgi.conf（这个配置文件名也可以自定义的，根据具体文件名修改）</p><p>找到：<br><code>fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;</code></p><p>改为：<br><code>fastcgi_param SERVER_SOFTWARE nginx;</code></p><p>3.重启</p><p>这样就完全对外隐藏了nginx版本号了，就是出现404、501等页面也不会显示nginx版本。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery中html、append、appendTo、after、insertAfter、before、insertBefore、empty、remove系列方法的使用。</title>
      <link href="/jqhtmlappend/"/>
      <url>/jqhtmlappend/</url>
      
        <content type="html"><![CDATA[<p><strong>html</strong>方法，给元素添加html代码或者清空html代码（参数为空字符串）；<br><strong>append</strong>向元素的末尾添加html代码；<br><strong>appendTo</strong>这个方法跟append方法的很像，只是要添加的html代码的目标有所不一样；<br><strong>after</strong>向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入；<br><strong>before</strong>向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插入；<br><strong>insertAfter</strong>将JQuery封装好的元素插入到指定元素的后面，如果元素后面有元素了，那将后面的元素后移，然后将JQuery对象插入；<br><strong>insertBefore</strong>将JQuery封装好的元素插入到指定元素的前面，如果元素前面有元素了，那将前面的元素前移，然后将JQuery对象插入；<br><strong>empty</strong>清空元素内部的html代码，它只是清空内部的html代码，但是标记仍然留在DOM中；<br><strong>remove</strong>从DOM中移除整个元素；</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> append </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery中巧用Ajax的beforeSend方法</title>
      <link href="/ajaxbeforesend/"/>
      <url>/ajaxbeforesend/</url>
      
        <content type="html"><![CDATA[<p>jQuery是经常使用的一个开源js框架，其中的$.ajax请求中有一个<strong>beforeSend</strong>方法，用于在向服务器发送请求前执行一些动作。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeSend: function()&#123;</span><br><span class="line">// Handle the beforeSend event</span><br><span class="line">&#125;,</span><br><span class="line">complete: function()&#123;</span><br><span class="line">// Handle the complete event</span><br><span class="line">&#125;</span><br><span class="line">// ......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>防止重复数据</strong><br>在实际项目开发中，提交表单时常常由于网络或者其原因，用户点击提交按钮误认为自己没有操作成功，进而会重复提交按钮操作次数，如果页面前端代码没有做一些相应的处理，通常会导致多条同样的数据插入数据库，导致脏数据的增加。要避免这种现象，在$.ajax请求中的beforeSend方法中把提交按钮禁用掉，等到Ajax请求执行完毕，在恢复按钮的可用状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 提交表单数据到后台处理</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: &quot;post&quot;,</span><br><span class="line">data: studentInfo,</span><br><span class="line">contentType: &quot;application/json&quot;,</span><br><span class="line">url: &quot;/Home/Submit&quot;,</span><br><span class="line">beforeSend: function ()</span><br><span class="line">&#123;</span><br><span class="line">// 禁用按钮防止重复提交</span><br><span class="line">    $(&quot;#submit&quot;) . attr(&#123; disabled: &quot;disabled&quot; &#125;);</span><br><span class="line">&#125;, success: function (data) &#123;</span><br><span class="line">    if (data == &quot;Success&quot;) &#123;</span><br><span class="line">        //清空输入框</span><br><span class="line">        clearBox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,complete: function ()</span><br><span class="line">&#123;</span><br><span class="line">    $(&quot;#submit&quot;) . removeAttr(&quot;disabled&quot;);</span><br><span class="line">&#125;,error: function (data) &#123;</span><br><span class="line">    console . info(&quot;error: &quot; + data . responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ajax请求服务器加载数据列表时提示loading(“加载中，请稍后…”)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type: &quot;post&quot;,</span><br><span class="line">contentType: &quot;application/json&quot;,</span><br><span class="line">url: &quot;/Home/GetList&quot;,</span><br><span class="line">beforeSend: function ()</span><br><span class="line">&#123;</span><br><span class="line">    $(&quot;loading&quot;) . show();</span><br><span class="line">&#125;, success: function (data) &#123;</span><br><span class="line">    if (data == &quot;Success&quot;) &#123;</span><br><span class="line">// ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, complete: function ()</span><br><span class="line">&#123;</span><br><span class="line">    $(&quot;loading&quot;) . hide();</span><br><span class="line">&#125;, error: function (data) &#123;</span><br><span class="line">    console . info(&quot;error: &quot; + data . responseText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> beforeSend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360个人图书馆 轻松解除网页防复制</title>
      <link href="/360doccopy/"/>
      <url>/360doccopy/</url>
      
        <content type="html"><![CDATA[<p>360个人图书馆会自动采集一些比较好的文章，我的博客文章也被采集过几篇，用过360个人图书馆的人都知道要复制别人的文章需要先收藏到自己的图书馆才可以复制，没有账号右键复制它会直接弹出一个提示登录框。不过如果你不经常使用360个人图书馆，你也会懒得专门去注册一个帐号吧？</p><span id="more"></span><p>chrome浏览器按F12（打开谷歌浏览器的开发者工具）<br>点击Console<br>然后按F5 刷新下网页，（根据测试必须刷新下网页等下插入代码才能生效）</p><p><img src="https://xqmblog.files.wordpress.com/2017/07/360copy.png" alt="360copy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.oncontextmenu=document.onselectstart=document.body.onselectstart=document.oncopy=document.body.oncopy=&quot;&quot;</span><br></pre></td></tr></table></figure><p>然后按回车键，ok！不会弹出那令人蛋疼的提示了，可以复制了。</p><p>转：<a href="https://laod.cn/black-technology/360doc-copy.html" title="本文固定链接 https://laod.cn/black-technology/360doc-copy.html">360个人图书馆 轻松解除网页防复制 | 老D博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解除网页防复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js刷新页面</title>
      <link href="/jsrefresh/"/>
      <url>/jsrefresh/</url>
      
        <content type="html"><![CDATA[<p><strong>Javascript刷新页面的几种方法：</strong><br>1）history.go(0)<br>2）location.reload()<br>3）location&#x3D;location<br>4）location.assign(location)<br>5）document.execCommand(‘Refresh’)<br>6）window.navigate(location)<br>7）location.replace(location)<br>8）document.URL&#x3D;location.href</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> refresh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php生成随机字符串</title>
      <link href="/randkey/"/>
      <url>/randkey/</url>
      
        <content type="html"><![CDATA[<p>经常会使用到生成随机字符串  封装了个方法<br>也可以用来生成不重复的唯一key</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function rand_key($len)&#123;</span><br><span class="line">    mt_srand((double)microtime()*10000);//optional for php 4.2.0 and up.</span><br><span class="line">    $charid = strtoupper(md5(uniqid(rand(), true)));</span><br><span class="line">    $uuid =substr($charid, 0, $len);</span><br><span class="line">    return $uuid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHPMailer发邮件</title>
      <link href="/phpmailer/"/>
      <url>/phpmailer/</url>
      
        <content type="html"><![CDATA[<p><strong>PHPMailer 是一个强大的 PHP 编写的邮件发送类，使用它可以更加便捷的发送邮件，并且还能发送附件和 HTML 格式的邮件，同时还能使用 SMTP 服务器来发送邮件。</strong></p><span id="more"></span><p>PHPMailer支持多种邮件发送方式</p><p>qq邮箱为例</p><p>进入qq邮箱点击设置，选中账户选项，在账户下设置POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务：</p><p><img src="https://xqmblog.files.wordpress.com/2017/06/mail.png" alt="mail"></p><p>授权码 也是要用到的  自己去验证</p><p>引用了两个文件 <a href="https://github.com/PHPMailer/PHPMailer">class.phpmailer.php、class.smtp.php</a></p><p>写发邮件函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function sendMail($body) &#123;</span><br><span class="line">    // mail($toaddress, $subject, $mailcontent, $fromaddress);</span><br><span class="line">    date_default_timezone_set(&#x27;Asia/Shanghai&#x27;);//设定时区东八区</span><br><span class="line">    require_once(&#x27;class.phpmailer.php&#x27;);</span><br><span class="line">    include(&#x27;class.smtp.php&#x27;);</span><br><span class="line">    $mail = new PHPMailer;</span><br><span class="line">    $mail-&gt;SMTPDebug = 2;                               // Enable verbose debug output</span><br><span class="line">    $mail-&gt;isSMTP();                                      // Set mailer to use SMTP</span><br><span class="line">    $mail-&gt;Host = &#x27;smtp.qq.com&#x27;;  // Specify main and backup SMTP servers</span><br><span class="line">    $mail-&gt;SMTPAuth = true;                               // Enable SMTP authentication</span><br><span class="line">    $mail-&gt;Username = &#x27;***&#x27;;                 // SMTP 账号（一般是qq号）</span><br><span class="line">    $mail-&gt;Password = &#x27;****&#x27;;    // SMTP 授权码 （这个是上面生成的授权码）</span><br><span class="line">    $mail-&gt;SMTPSecure = &#x27;ssl&#x27;;                            // Enable TLS encryption, `ssl` also accepted</span><br><span class="line">    $mail-&gt;Port = 465;  //端口号</span><br><span class="line">    $mail-&gt;Host;                                  // TCP port to connect to</span><br><span class="line">    $mail-&gt;setFrom(&#x27;***@qq.com&#x27;, &#x27;Mailer&#x27;); //发件人地址，称呼</span><br><span class="line">    // $mail-&gt;addAddress(&#x27;***@qq.com&#x27;, &#x27;Joe User&#x27;);     // Add a recipient</span><br><span class="line">    $mail-&gt;addAddress(&#x27;***@qq.com&#x27;);               // 收件人</span><br><span class="line">    //$mail-&gt;addReplyTo(&#x27;***@qq.com&#x27;, &#x27;Information&#x27;);</span><br><span class="line">    // $mail-&gt;addCC(&#x27;***@qq.com&#x27;);</span><br><span class="line">    // $mail-&gt;addBCC(&#x27;***@qq.com&#x27;);</span><br><span class="line">    // $mail-&gt;addAttachment(&#x27;/var/tmp/file.tar.gz&#x27;);         // Add attachments</span><br><span class="line">    // $mail-&gt;addAttachment(&#x27;/tmp/image.jpg&#x27;);    //附件（注意路径）</span><br><span class="line">    $mail-&gt;isHTML(false);                                  // Set email format to HTML</span><br><span class="line">    $mail-&gt;Subject = &#x27;Here is the subject&#x27;;//标题</span><br><span class="line">    $mail-&gt;Body    = $body; //内容</span><br><span class="line">    $mail-&gt;AltBody = &#x27;This is the body in plain text for non-HTML mail clients&#x27;;</span><br><span class="line">    if(!$mail-&gt;send()) &#123;</span><br><span class="line">        echo &#x27;Message could not be sent.&#x27;;</span><br><span class="line">        echo &#x27;Mailer Error: &#x27; . $mail-&gt;ErrorInfo;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo ucwords(&#x27;Message has been sent&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用sendMail就可以了<br>这个知识简单的实现了发送邮件<br>具体的自己灵活运用</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHPMailer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中修改表字段名/字段长度/字段类型详解</title>
      <link href="/mysql-altertable/"/>
      <url>/mysql-altertable/</url>
      
        <content type="html"><![CDATA[<p>在mysql中我们对数据表字段的修改命令只要使用ALTER就可以了</p><span id="more"></span><p><strong>1.增加一个字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 增加一个字段，默认为空</span><br><span class="line">ALTER TABLE user add COLUMN new1 VARCHAR(20) DEFAULT NULL;</span><br><span class="line">-- 增加一个字段，默认不能为空</span><br><span class="line">ALTER TABLE user add COLUMN new2 VARCHAR(20) NOT NULL;</span><br></pre></td></tr></table></figure><p><strong>2.删除一个字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除一个字段</span><br><span class="line">ALTER TABLE user DROP COLUMN new2;</span><br></pre></td></tr></table></figure><p><strong>3.修改一个字段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">-- 修改一个字段的类型</span><br><span class="line">ALTER TABLE user MODIFY new1 VARCHAR(10); </span><br><span class="line">-- 修改一个字段的名称，此时一定要重新</span><br><span class="line">ALTER TABLE user CHANGE new1 new4 int;</span><br><span class="line"></span><br><span class="line">-- 主键</span><br><span class="line">ALTER TABLE tabelname add new_field_id int(5) unsigned default 0 not null auto_increment ,add primary key (new_field_id);</span><br><span class="line"></span><br><span class="line">-- 增加一个新列</span><br><span class="line">ALTER TABLE t2 add d timestamp;</span><br><span class="line">ALTER TABLE infos add ex tinyint not null default 0;</span><br><span class="line"></span><br><span class="line">-- 删除列</span><br><span class="line">ALTER TABLE t2 drop column c;`</span><br><span class="line"></span><br><span class="line">-- 重命名列</span><br><span class="line">ALTER TABLE t1 change a b integer;`</span><br><span class="line"></span><br><span class="line">-- 改变列的类型</span><br><span class="line">ALTER TABLE t1 change b b bigint not null;</span><br><span class="line">ALTER TABLE infos change list list tinyint not null default 0;</span><br><span class="line"></span><br><span class="line">-- 重命名表</span><br><span class="line">ALTER TABLE t1 rename t2;</span><br><span class="line"></span><br><span class="line">-- 加索引</span><br><span class="line">ALTER TABLE tablename change depno depno int(5) not null;</span><br><span class="line">ALTER TABLE tablename add index 索引名 (字段名1[，字段名2 …]);</span><br><span class="line">ALTER TABLE tablename add index emp_name (name);</span><br><span class="line"></span><br><span class="line">-- 加主关键字的索引</span><br><span class="line">ALTER TABLE tablename add primary key(id);</span><br><span class="line"></span><br><span class="line">-- 加唯一限制条件的索引</span><br><span class="line">ALTER TABLE tablename add unique emp_name2(cardnumber);</span><br><span class="line"></span><br><span class="line">-- 删除某个索引</span><br><span class="line">ALTER TABLE tablename drop index emp_name;</span><br><span class="line"></span><br><span class="line">-- 增加字段：</span><br><span class="line">ALTER TABLE table_name ADD field_name field_type;</span><br><span class="line"></span><br><span class="line">-- 修改原字段名称及类型：</span><br><span class="line">ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;</span><br><span class="line"></span><br><span class="line">-- 删除字段：</span><br><span class="line">ALTER TABLE table_name DROP field_name;</span><br><span class="line"></span><br><span class="line">-- mysql修改字段长度</span><br><span class="line">ALTER TABLE 表名 modify column 字段名 类型;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ALTER TABLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中获取当前日期（年-月-日）</title>
      <link href="/jsgetdate/"/>
      <url>/jsgetdate/</url>
      
        <content type="html"><![CDATA[<p>需要获取当前的日期，但是js有没有像PHP那样有date(‘Y-m-d’,time())就可以获取</p><span id="more"></span><p>所以就只能自己拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 获取当前日期</span><br><span class="line">var date = new Date();</span><br><span class="line">// 获取当前月份（月份是从0开始，所以要加1）</span><br><span class="line">var nowMonth = date.getMonth() + 1;</span><br><span class="line">// 获取当前是几号</span><br><span class="line">var strDate = date.getDate();</span><br><span class="line">// 添加分隔符“-”</span><br><span class="line">var seperator = &quot;-&quot;;</span><br><span class="line">// 对月份进行处理，1-9月在前面添加一个“0”</span><br><span class="line">if (nowMonth &gt;= 1 &amp;&amp; nowMonth &lt;= 9) &#123;</span><br><span class="line">    nowMonth = &quot;0&quot; + nowMonth;</span><br><span class="line">&#125;</span><br><span class="line">// 对月份进行处理，1-9号在前面添加一个“0”</span><br><span class="line">if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123;</span><br><span class="line">    strDate = &quot;0&quot; + strDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 最后拼接字符串，得到一个格式为(yyyy-MM-dd)的日期（date.getFullYear()得到的是4位数得年份，比如：2017 ；date.getYear()得到得是2位数得年份，比如：17）<br><code>var nowDate = date.getFullYear() + seperator + nowMonth + seperator + strDate;</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算php运行时间（毫秒数）</title>
      <link href="/runtime/"/>
      <url>/runtime/</url>
      
        <content type="html"><![CDATA[<p>有时候想看看某一块代码的运行时间，看看是如何计算的</p><span id="more"></span><p>非常简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$t1 = microtime(true);</span><br><span class="line">//php script here</span><br><span class="line">$t2 = microtime(true);</span><br><span class="line">echo (($t2-$t1)*1000).&#x27;ms&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运行时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中sessionStorage和localStorage用法</title>
      <link href="/sessionstorage-localstorage/"/>
      <url>/sessionstorage-localstorage/</url>
      
        <content type="html"><![CDATA[<p>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</p><span id="more"></span><p>而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p><p>web storage和cookie的区别</p><p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。</p><p>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。</p><p>但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生（来自@otakustay 的纠正）</p><p>html5 web storage的浏览器支持情况</p><p>浏览器的支持除了IE７及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的UserData其实就是javascript本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持web storage。</p><p>要判断浏览器是否支持localStorage可以使用下面的代码：</p><p><code>if(window.localStorage)&#123; </code></p><p><code>alert(&quot;浏览支持localStorage&quot;) </code></p><p><code>&#125;else&#123; </code></p><p><code>alert(&quot;浏览暂不支持localStorage&quot;) </code></p><p><code>&#125; </code></p><p><code>//或者 </code></p><p><code>if(typeof window.localStorage == &#39;undefined&#39;)&#123; </code></p><p><code>alert(&quot;浏览暂不支持localStorage&quot;)</code></p><p><code> &#125;</code></p><p>localStorage和sessionStorage操作</p><p>localStorage和sessionStorage都具有相同的操作方法，例如setItem、getItem和removeItem等</p><p>localStorage和sessionStorage的方法</p><p>setItem存储value</p><p>用途：将value存储到key字段 用法：.setItem( key, value) 代码示例：</p><p>sessionStorage.setItem(“key”, “value”);     localStorage.setItem(“site”, “js8.in”);<br>getItem获取value</p><p>用途：获取指定key本地存储的值 用法：.getItem(key) 代码示例：</p><p>var value &#x3D; sessionStorage.getItem(“key”);     var site &#x3D; localStorage.getItem(“site”);<br>removeItem删除key</p><p>用途：删除指定key本地存储的值 用法：.removeItem(key) 代码示例：</p><p>sessionStorage.removeItem(“key”);     localStorage.removeItem(“site”);<br>clear清除所有的key&#x2F;value</p><p>用途：清除所有的key&#x2F;value 用法：.clear() 代码示例：</p><p>sessionStorage.clear();     localStorage.clear();</p><p><code> </code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sessionStorage </tag>
            
            <tag> localStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享按钮</title>
      <link href="/sharebutton/"/>
      <url>/sharebutton/</url>
      
        <content type="html"><![CDATA[<p>最近在做网站，有文章分享功能，于是在网上找了一下<br>百度的百度分享，还可以设置按钮类型、位置、大小等；还有划词分享、图片分享</p><span id="more"></span><p>试过了挺好用的</p><p><img src="https://xqmblog.files.wordpress.com/2017/03/sharecode.png" alt="shareCode.png"></p><p>效果图：</p><p><img src="https://xqmblog.files.wordpress.com/2017/03/share.png" alt="share"></p><p>这是百度的百度分享，还可以设置按钮类型、位置、大小等；还有划词分享、图片分享。</p><p>传送门：<a href="http://share.baidu.com/">http://share.baidu.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php获取当前毫秒时间戳</title>
      <link href="/msectime/"/>
      <url>/msectime/</url>
      
        <content type="html"><![CDATA[<p>用php的time()函数来获取时间戳，获取的时间精确到秒级别，但是想获取到毫秒级就不行了<br>虽然在php没有自带的函数能获取毫秒时间戳，但提供了一个microtime()函数</p><span id="more"></span><p><code>echo microtime();</code></p><p>输出的是：0.02593300 1490238047</p><p>它的结果是分两部分的，也就是前半部分是毫秒（但是单位是秒），后半部分是秒。<br>这样我们获取获取到毫秒就好办了，修改一下就阔以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function  msectime()&#123;</span><br><span class="line">    list($msec, $sec) = explode(&#x27; &#x27;, microtime());</span><br><span class="line">    return (float)sprintf(&#x27;%.0f&#x27;, (floatval($msec) + floatval($sec)) * 1000);</span><br><span class="line">&#125;</span><br><span class="line">echo msectime();</span><br></pre></td></tr></table></figure><p>输出：1490238248638</p><p>注意：sprintf(‘%.0f’, $num) 是输出不含小数部分的浮点数</p><p>我把时间戳改成毫秒级别后，再次更新数据库数据时，却提示超出范围，原来之前我在数据库中是用int型来存储time()函数获取的秒级别的时间戳，存储范围是够的，改成毫秒级别的，就得改成BIGINT类型了。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间戳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP获取每个月的最后一个周五日期</title>
      <link href="/getfridaydate/"/>
      <url>/getfridaydate/</url>
      
        <content type="html"><![CDATA[<p>在网上看到的，感觉不错就记下来了，说不定以后用到。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回指定年份的月份最后周五日期</span><br><span class="line"> * </span><br><span class="line"> * @param  integer $month 月份</span><br><span class="line"> * @param  integer $year  年份</span><br><span class="line"> * @return 日期        YYYY-MM-DD</span><br><span class="line"> */</span><br><span class="line">function getFridayDate($month, $year = null)</span><br><span class="line">&#123;</span><br><span class="line">    $months = [</span><br><span class="line">        1  =&gt; &#x27;January&#x27;,</span><br><span class="line">        2  =&gt; &#x27;February&#x27;,</span><br><span class="line">        3  =&gt; &#x27;March&#x27;,</span><br><span class="line">        4  =&gt; &#x27;April&#x27;,</span><br><span class="line">        5  =&gt; &#x27;May&#x27;,</span><br><span class="line">        6  =&gt; &#x27;June &#x27;,</span><br><span class="line">        7  =&gt; &#x27;July&#x27;,</span><br><span class="line">        8  =&gt; &#x27;August&#x27;,</span><br><span class="line">        9  =&gt; &#x27;September&#x27;,</span><br><span class="line">        10 =&gt; &#x27;October&#x27;,</span><br><span class="line">        11 =&gt; &#x27;November&#x27;,</span><br><span class="line">        12 =&gt; &#x27;December&#x27;,</span><br><span class="line">    ];</span><br><span class="line">    if (! array_key_exists($month, $months)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($year == null) &#123;</span><br><span class="line">        $year = date(&#x27;Y&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return date(&#x27;Y-m-d&#x27;, strtotime(&#x27;last Friday of &#x27; . $months[$month] . &#x27; &#x27; . $year));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo getFridayDate(2);        // 2017-02-24</span><br><span class="line">echo getFridayDate(3, 2017);  // 2017-03-31</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最后一个周五 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS判断字符串是否包含某字符串 indexOf()方法使用</title>
      <link href="/indexof/"/>
      <url>/indexof/</url>
      
        <content type="html"><![CDATA[<p><strong>indexOf()方法可返回某个指定的字符串值在字符串中首次出现的位置。</strong></p><span id="more"></span><p>语法：<br><code>stringObject.indexOf(searchvalue,fromindex)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>searchvalue</td><td>必需。规定需检索的字符串值。</td></tr><tr><td>fromindex</td><td>可选的整数参数。规定在字符串中开始检索的位置.它的合法取值是0到stringObject.length-1。如省略该参数,则将从字符串的首字符开始检索。</td></tr></tbody></table><p>indexOf方法返回一个整数值,stringObject中的字符位置是从0开始的。如果没有找到子字符串，则返回 - 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Hello Word!&quot;;</span><br><span class="line">alert(str.indexOf(&quot;Word&quot;)); //6</span><br><span class="line">if(str.indexOf(&quot;Hello&quot;)!=-1)&#123;</span><br><span class="line">    alert(&quot;包含&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    alert(&quot;不包含&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> indexOf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql把查询结果保存为sql文件</title>
      <link href="/mysqloutfile%20/"/>
      <url>/mysqloutfile%20/</url>
      
        <content type="html"><![CDATA[<p>有时候需要从表中抽取一部分数据，然后导出来，没必要用导出命令是mysqldump 导出整张表</p><p>下面两个指令就可以解决这个问题了</p><span id="more"></span><p>在服务器端可以用select into outfile 命令把查询结果保存到一个可写的目录中：</p><p>使用Navicat for MySql等也适用</p><p><code>select * from article limit 150 into outfile &#39;/test/article.sql&#39;;</code></p><p>然后把article.sql文件下载到本地电脑上，通过load data local infile into table 命令来导入这个查询结果文件：</p><p><code>load data local infile &quot;D:/study/article.sql&quot; into table article;</code></p><p>这样就阔以了。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> outfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动站适配rel=alternate PC页和H5页适配标注</title>
      <link href="/alternate/"/>
      <url>/alternate/</url>
      
        <content type="html"><![CDATA[<p>鉴于移动化大潮的汹涌和H5页的炫丽普及，百度针对PC页与H5页的跳转适配方式推出了最优方案：<br>1.在pc版网页上，添加指向对应移动版网址的特殊链接rel&#x3D;”alternate”标记，这有助于百度发现网站的移动版网页所在的位置；<br>2.同时在移动版网页上，添加指向对应pc版网址的链接rel&#x3D;”canonical”标记。</p><span id="more"></span><p>电脑端网站截图：</p><p><img src="https://xqmblog.files.wordpress.com/2017/03/pc.jpg" alt="pc"></p><p>移动端网站截图：</p><p><img src="https://xqmblog.files.wordpress.com/2017/03/mobile.jpg" alt="mobile"></p><p>如果你的网址是：<br>pc版网址：<a href="http://pc_url/">http://pc_url</a><br>移动版网址：<a href="http://mobile_url/">http://mobile_url</a><br>那么此示例中的注释如下所示：<br>在pc版网页(<a href="http://pc_url/">http://pc_url</a>) 上，添加：<br><code>&lt;link rel=&quot;alternate&quot; media=&quot;only screen and(max-width: 640px)&quot; href=&quot;http://pc_url&quot;&gt;</code></p><p>在移动版网页(<a href="http://mobile_url/">http://mobile_url</a>) 上，所需的注释应为:<br><code>&lt;link rel=&quot;canonical&quot; href=&quot;http://mobile_url&quot; &gt;</code></p><p>之前的Meta标记（mobile agent）会继续沿用，但我们推荐使用HTMAL5语言制作的移动页面使用最新方案进行跳转适配，其它如xml语言的移动页跳转适配，需要继续使用之前的meta标记方式:<br><code>&lt;meta name=&quot;mobile-agent&quot;content=&quot;format=[wml|xhtml|html5]; url=mobile_url&quot;&gt;</code></p><p>转。</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alternate </tag>
            
            <tag> 适配标注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js判断用户的浏览器设备是移动端还是pc端</title>
      <link href="/agent/"/>
      <url>/agent/</url>
      
        <content type="html"><![CDATA[<p>网站页面中需要根据用户的访问设备的不同来显示不同的页面样式，主要是判断移动设备还是电脑浏览器访问的。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function browserRedirect() &#123;</span><br><span class="line">    var sUserAgent = navigator.userAgent.toLowerCase();</span><br><span class="line">    var bIsIpad = sUserAgent.match(/ipad/i) == &quot;ipad&quot;;</span><br><span class="line">    var bIsIphoneOs = sUserAgent.match(/iphone os/i) == &quot;iphone os&quot;;</span><br><span class="line">    var bIsMidp = sUserAgent.match(/midp/i) == &quot;midp&quot;;</span><br><span class="line">    var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == &quot;rv:1.2.3.4&quot;;</span><br><span class="line">    var bIsUc = sUserAgent.match(/ucweb/i) == &quot;ucweb&quot;;</span><br><span class="line">    var bIsAndroid = sUserAgent.match(/android/i) == &quot;android&quot;;</span><br><span class="line">    var bIsCE = sUserAgent.match(/windows ce/i) == &quot;windows ce&quot;;</span><br><span class="line">    var bIsWM = sUserAgent.match(/windows mobile/i) == &quot;windows mobile&quot;;</span><br><span class="line">    document.writeln(&quot;您的浏览设备为：&quot;);</span><br><span class="line">    if (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;</span><br><span class="line">        document.writeln(&quot;phone&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        document.writeln(&quot;pc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">browserRedirect();</span><br></pre></td></tr></table></figure><p>用电脑上的浏览器，android设备，iphone，ipad均做过测试，此代码可行，各设备判断均正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//判断是否微信浏览器中打开</span><br><span class="line">function is_weixn()&#123;  </span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();  </span><br><span class="line">    if(ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;) &#123;  </span><br><span class="line">        return true;  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">        return false;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>本文转自：<a href="http://www.cnblogs.com/babycool/">http://www.cnblogs.com/babycool/</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器设备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上了这套密码锁，你就无敌了</title>
      <link href="/nb-pwd/"/>
      <url>/nb-pwd/</url>
      
        <content type="html"><![CDATA[<p>按照重要性不同，我们把密码分成ABC三大类：极客密码、高频密码、临时密码</p><span id="more"></span><p><strong>A类</strong>：<strong>极客密码</strong><br>比如银行账户、支付宝、重要邮件密码，以及涉及个人重要隐私的网盘、相册密码等，该类最烧脑，要各个不同。</p><p><strong>B类：高频密码</strong><br>比如QQ、微博、FB等社交工具，以及经常登录的网站密码，该类使用频次高，又涉及个人隐私，建议至少提供3种以上的密码选择。</p><p><strong>C类：临时密码</strong><br>对于一些临时或偶尔使用的网站，又无关利益，不需要特别记忆，统一标准就好。</p><p>按照个人癖好，我们先挑软的柿子捏。</p><h4 id="针对C类，在下的建议是：为了最简化，统一使用一种密码。"><a href="#针对C类，在下的建议是：为了最简化，统一使用一种密码。" class="headerlink" title="针对C类，在下的建议是：为了最简化，统一使用一种密码。"></a>针对C类，在下的建议是：为了最简化，统一使用一种密码。</h4><p>比如自己所在城市，比如shanghai，beijing，或者母校的名字，如Harvard<a href="http://www.jianshu.com/writer#/">，</a>Oxford或者偶像名字的全拼，如JJlinjunjie，fanbingbing。</p><p>关键是要统一，当然必要时可以临时再注册或者忘记密码。</p><h4 id="针对B类，一句话就能搞定。"><a href="#针对B类，一句话就能搞定。" class="headerlink" title="针对B类，一句话就能搞定。"></a>针对B类，一句话就能搞定。</h4><p>比如Gwyb82ndlf（给我一杯82年的拉菲）</p><p>这句话可以从座右铭、歌词、吐槽、台词、名言等地方寻找，但尽量要长点。</p><p>比如座右铭：</p><p>Wwjylhnsgzjlddf（万物皆有裂痕，那是光照进来的地方）</p><p>Sybrrwyrblsy（岁月不饶人，我亦饶不了岁月）</p><p>Tcs99%dhsjs1%dlg（天才是99%的汗水，加上1%的灵感）</p><p>&nbsp;</p><p>漂亮得不像话的歌词：</p><p>Wdsdmdmjm（无敌是多么多么寂寞——《无敌》）</p><p>Chysxttlac（沧海一声笑，滔滔两岸潮——《沧海一声笑》）</p><p>&nbsp;</p><p>经典台词：</p><p>Shjxqklnyybhzdxymhddsm（生活就像巧克力,你永远不会知道下一秒你会得到什么——《阿甘正传》）</p><p>Nnbwbyhx（念念不忘，必有回响。——《一代宗师》）</p><p>Fuck and Son of a bitch（各种美剧里）</p><p>&nbsp;</p><p>神吐槽：</p><p>Rqsdgsrfhxwa（人穷啥都干，杀人放火写文案）</p><p>Yiwsjqrftrjjqswrft（以前，我视金钱如粪土；如今，金钱视我如粪土。）</p><p>Xshswwynzldsh（性生活是我唯一能自理的生活）</p><p>&nbsp;</p><h4 id="当然，字母-数字才是绝配，否则就像大龄青年找不到对象一样，让人有点小尴尬。"><a href="#当然，字母-数字才是绝配，否则就像大龄青年找不到对象一样，让人有点小尴尬。" class="headerlink" title="当然，字母+数字才是绝配，否则就像大龄青年找不到对象一样，让人有点小尴尬。"></a>当然，字母+数字才是绝配，否则就像大龄青年找不到对象一样，让人有点小尴尬。</h4><p>数字的话，如果你坚持使用生日，也没有问题，可以把生日放入那一串的前面、后面或中间，如Wdsdmdmjm19900308。</p><p>当然，除了生日外，还有身高、门牌号、电话号、车牌号、纪念日等数字可供选择。（体重就算了）</p><p>&nbsp;</p><p>如想再加密，可以把自己的幸运数字变成特殊符号，“shift+5”&#x3D;“%”，把其中数字5替换成%。</p><p>到这里的话，针对B类的基本够用。但是切记一点，不要用自己的口头语做密码，否则不定哪天醉酒，你就当笑话公之于众了。</p><p><img src="https://xqmblog.files.wordpress.com/2017/03/wd.jpg" alt="wd"></p><h4 id="针对A类，一般建议“数字-字母-特殊符号”都包括，有的还自带特殊加密，当然，这个主要看专长。"><a href="#针对A类，一般建议“数字-字母-特殊符号”都包括，有的还自带特殊加密，当然，这个主要看专长。" class="headerlink" title="针对A类，一般建议“数字+字母+特殊符号”都包括，有的还自带特殊加密，当然，这个主要看专长。"></a>针对A类，一般建议“数字+字母+特殊符号”都包括，有的还自带特殊加密，当然，这个主要看专长。</h4><p>&nbsp;</p><p>学化学的会利用方程式，比如3Cu+8HNO3&#x3D;3Cu(NO3)2+2NO+4H2O。</p><p>学音乐的会利用音乐简谱，比如《同桌的你》的简谱：555-576-440-444-432-110</p><p>学中文的会用诗词，比如ppnn13%dkstFeb.1st（娉娉袅袅十三余，豆蔻梢头二月初），“停车坐爱枫林晚，霜叶红于二月花”则是一个公式（tcmlflw,syred&gt;Febhua）。</p><p>最装逼的是在密码里编入自己的故事，美其名曰：“设计密码最重要的是，让密码体现你作为一个人的独特本体！”。（好吧，我服了。）</p><p>现身说法：5670754（儿时电话）+Sww（小学暗恋的女孩名字）+[499]（中考分数）+24（高中名）+history（大学专业）+（工资是秘密）结果就是：5670754Sww49924history。</p><p>通过以上方法，如果你还坚持用生日裸奔，在下只能说“施主，你高兴就好”。</p><p>当然，密码设置好还不算完，别忘了要备份。</p><p>相信我，别太高估自己的智商。</p><p>除非你有杨过的记忆力+李寻欢的自控力，才能说说这大话。</p><p>否则自己何苦为难自己。</p><p>转。</p>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP file_put_contents函数：将字符串写入或追加到文件</title>
      <link href="/fileputcontents/"/>
      <url>/fileputcontents/</url>
      
        <content type="html"><![CDATA[<p><strong>file_put_contents() 函数用于把字符串写入文件，成功返回写入到文件内数据的字节数，失败则返回 FALSE。</strong></p><span id="more"></span><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int file_put_contents ( string filename, string data [, int flags [, resource context]] )</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>filename</td><td>要写入数据的文件名</td></tr><tr><td>data</td><td>要写入的数据。类型可以是 string，array（但不能为多维数组），或者是 stream 资源</td></tr><tr><td>flags</td><td>可选，规定如何打开&#x2F;写入文件。可能的值：1.  FILE_USE_INCLUDE_PATH：检查 filename 副本的内置路径2.  FILE_APPEND：在文件末尾以追加的方式写入数据3.  LOCK_EX：对文件上锁</td></tr><tr><td>context</td><td>可选，Context是一组选项，可以通过它修改文本属性</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo file_put_contents(&quot;test.txt&quot;, &quot;This is something.&quot;);</span><br></pre></td></tr></table></figure><p> 输出：18</p><p> 而 test.txt 文件（与程序同目录下）内容则为：This is something.</p><p>提示:<br>如果文件不存在，则创建文件，相当于fopen()函数行为。<br>如果文件存在，默认将清空文件内的内容，可设置 flags 参数值为 FILE_APPEND 以避免（见下）。<br>本函数可安全用于二进制对象。</p><p><strong>以追加形式写入内容</strong><br>当设置 flags 参数值为 FILE_APPEND 时，表示在已有文件内容后面追加内容的方式写入新数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(&quot;test.txt&quot;, &quot;This is another something.&quot;, FILE_APPEND);</span><br></pre></td></tr></table></figure><p>执行程序后，test.txt 文件内容变为：This is something.This is another something.    </p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> file_put_contents </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php排序之快速排序、冒泡排序</title>
      <link href="/sort/"/>
      <url>/sort/</url>
      
        <content type="html"><![CDATA[<p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<code>递归</code>进行，以此达到整个数据变成有序序列。</p><span id="more"></span><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="https://xqmblog.files.wordpress.com/2017/02/quick_sort.gif" alt="quick_sort"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//快速排序</span><br><span class="line">function quick_sort($array)</span><br><span class="line">&#123;</span><br><span class="line">    $size=count($array);//得到数组总长度</span><br><span class="line">    if($size&gt;1)</span><br><span class="line">    &#123;</span><br><span class="line">        $first=$array[0];//拿出第一个作为标尺</span><br><span class="line">        $front=array();//前面的数组 存比标尺小的数</span><br><span class="line">        $back=array();//后面的数组 存比标尺大的数</span><br><span class="line">        for ($i=1; $i &lt; $size; $i++) </span><br><span class="line">        &#123; </span><br><span class="line">            if($array[$i]&lt;=$first)</span><br><span class="line">            &#123;</span><br><span class="line">                $front[]=$array[$i];//如果小于等于标尺 就放入前面的数组</span><br><span class="line">            &#125;else</span><br><span class="line">            &#123;</span><br><span class="line">                $back[]=$array[$i];//如果大于标尺 就放入后面的数组</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $front=quick_sort($front);//递归的对前面一半数组排序</span><br><span class="line">        $back=quick_sort($back);//递归的对后面一半数组排序</span><br><span class="line">        return array_merge($front,array($first),$back);//合并开始前面 中间 后面</span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        return $array;//如果数组只有一个长度 没必要排序 直接返回</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//调用</span><br><span class="line">$array=array(10,9,8,7,6,5,4,3,2,1);</span><br><span class="line">$result=my_quick_sort($array);</span><br><span class="line">var_dump($result);</span><br><span class="line">//输出</span><br><span class="line">array(10) &#123; [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) [3]=&gt; int(4) [4]=&gt; int(5) [5]=&gt; int(6) [6]=&gt; int(7) [7]=&gt; int(8) [8]=&gt; int(9) [9]=&gt; int(10) &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序比较简单。作为很多公司面试笔试题常常出现，要求手写该排序算法。<br>双层循环，不断的与后面的比较，如果大于后面的，调换两者顺序即可。<br>    演示效果如图：<br><img src="https://xqmblog.files.wordpress.com/2017/02/bubblesort.gif" alt="bubblesort"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   //冒泡排序</span><br><span class="line">   function bubbleSort($array=array())</span><br><span class="line">   &#123;</span><br><span class="line">       $length=count($array);//获取数组长度</span><br><span class="line">       for ($i=0; $i &lt; $length ; $i++)</span><br><span class="line">       &#123;</span><br><span class="line">           //循环数组</span><br><span class="line">           for ($j=$i+1; $j &lt; $length ; $j++)</span><br><span class="line">           &#123;</span><br><span class="line">               //本身与本身后面的人进行比较</span><br><span class="line">               if($array[$i]&gt;$array[$j])</span><br><span class="line">               &#123;</span><br><span class="line">                   //顺序不对 要调换  实现冒泡</span><br><span class="line">                   //两数换值</span><br><span class="line">                   $tmp=$array[$i];//将第一个值给临时变量</span><br><span class="line">                   $array[$i]=$array[$j];//把j的值给i</span><br><span class="line">                   $array[$j]=$tmp;//把tmp给j</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return $array;//返回数组</span><br><span class="line">   &#125;</span><br><span class="line">   //调用</span><br><span class="line">   $array=array(10,9,8,7,6,5,4,3,2,1);</span><br><span class="line">   $result=bubbleSort($array);</span><br><span class="line">   var_dump($result);</span><br><span class="line">//输出</span><br><span class="line">array(10) &#123; [0]=&gt; int(1) [1]=&gt; int(2) [2]=&gt; int(3) [3]=&gt; int(4) [4]=&gt; int(5) [5]=&gt; int(6) [6]=&gt; int(7) [7]=&gt; int(8) [8]=&gt; int(9) [9]=&gt; int(10) &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP cURL实现发送Get和Post请求</title>
      <link href="/curl-request/"/>
      <url>/curl-request/</url>
      
        <content type="html"><![CDATA[<p>cURL可以使用URL的语法模拟浏览器来传输数据<br>因为它是模拟浏览器，因此它同样支持多种协议，FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE 以及 LDAP等协议都可以很好的支持，包括一些：HTTPS认证，HTTP POST方法，HTTP PUT方法，FTP上传，keyberos认证，HTTP上传，代理服务器，cookies，用户名&#x2F;密码认证，下载文件断点续传，上传文件断点续传，http代理服务器管道，甚至它还支持IPv6，scoket5代理服务器，通过http代理服务器上传文件到FTP服务器等等。</p><span id="more"></span><p>下面是把<strong>post</strong>和<strong>get</strong>请求封装成了一个方法，方便调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* curl 函数</span><br><span class="line">* @param string $url 请求的地址</span><br><span class="line">* @param string $type POST/GET/post/get</span><br><span class="line">* @param array $data 要传输的数据</span><br><span class="line">* @param string $err_msg 可选的错误信息（引用传递）</span><br><span class="line">* @param int $timeout 超时时间</span><br><span class="line">* @param array $cert_info 证书信息</span><br><span class="line">*/</span><br><span class="line">public function curl_request($url, $type, $data = false, $err_msg = null, $timeout = 20, $cert_info = array())</span><br><span class="line">&#123;</span><br><span class="line">    $type = strtoupper($type);</span><br><span class="line">    if ($type == &#x27;GET&#x27; &amp;&amp; is_array($data)) &#123;</span><br><span class="line">        $data = http_build_query($data);</span><br><span class="line">    &#125;</span><br><span class="line">    $option = array();</span><br><span class="line">    if ( $type == &#x27;POST&#x27; ) &#123;</span><br><span class="line">        $option[CURLOPT_POST] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($data) &#123;</span><br><span class="line">        if ($type == &#x27;POST&#x27;) &#123;</span><br><span class="line">            $option[CURLOPT_POSTFIELDS] = $data;</span><br><span class="line">        &#125; elseif ($type == &#x27;GET&#x27;) &#123;</span><br><span class="line">            $url = strpos($url, &#x27;?&#x27;) !== false ? $url.&#x27;&amp;&#x27;.$data :  $url.&#x27;?&#x27;.$data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $option[CURLOPT_URL]            = $url;</span><br><span class="line">    $option[CURLOPT_FOLLOWLOCATION] = TRUE;</span><br><span class="line">    $option[CURLOPT_MAXREDIRS]      = 4;</span><br><span class="line">    $option[CURLOPT_RETURNTRANSFER] = TRUE;</span><br><span class="line">    $option[CURLOPT_TIMEOUT]        = $timeout;</span><br><span class="line">    //设置证书信息</span><br><span class="line">    if(!empty($cert_info) &amp;&amp; !empty($cert_info[&#x27;cert_file&#x27;])) &#123;</span><br><span class="line">    $option[CURLOPT_SSLCERT]       = $cert_info[&#x27;cert_file&#x27;];</span><br><span class="line">    $option[CURLOPT_SSLCERTPASSWD] = $cert_info[&#x27;cert_pass&#x27;];</span><br><span class="line">    $option[CURLOPT_SSLCERTTYPE]   = $cert_info[&#x27;cert_type&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    //设置CA</span><br><span class="line">    if(!empty($cert_info[&#x27;ca_file&#x27;])) &#123;</span><br><span class="line">        // 对认证证书来源的检查，0表示阻止对证书的合法性的检查。1需要设置CURLOPT_CAINFO</span><br><span class="line">        $option[CURLOPT_SSL_VERIFYPEER] = 1;</span><br><span class="line">        $option[CURLOPT_CAINFO] = $cert_info[&#x27;ca_file&#x27;];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 对认证证书来源的检查，0表示阻止对证书的合法性的检查。1需要设置CURLOPT_CAINFO</span><br><span class="line">        $option[CURLOPT_SSL_VERIFYPEER] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    //初始化</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt_array($ch, $option);</span><br><span class="line">    //设置，访问页面的来源地址</span><br><span class="line">    curl_setopt($ch,CURLOPT_REFERER,&quot;http://&quot;.$_SERVER[&#x27;HTTP_HOST&#x27;]);</span><br><span class="line">    //执行并获取结果 </span><br><span class="line">    $response = curl_exec($ch);</span><br><span class="line">    $curl_no  = curl_errno($ch);</span><br><span class="line">    $curl_err = curl_error($ch);</span><br><span class="line">    //释放cURL句柄</span><br><span class="line">    curl_close($ch);</span><br><span class="line">    // error_log</span><br><span class="line">    if($curl_no &gt; 0) &#123;</span><br><span class="line">        if($err_msg !== null) &#123;</span><br><span class="line">            $err_msg = &#x27;(&#x27;.$curl_no.&#x27;)&#x27;.$curl_err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cURL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 类似 js indexof与lastindexof 的方法 : strpos() strrpos()</title>
      <link href="/strpos/"/>
      <url>/strpos/</url>
      
        <content type="html"><![CDATA[<p>strpos()字符串在另一个字符串中第一次出现的位置。<br>strripos()字符串在另一个字符串中最后一次出现的位置。</p><span id="more"></span><p><strong>PHP strpos() 函数</strong><br>strpos() 函数返回字符串在另一个字符串中第一次出现的位置。<br>如果没有找到该字符串，则返回 false。</p><p>语法</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定被搜索的字符串。</td></tr><tr><td>find</td><td>必需。规定要查找的字符。</td></tr><tr><td>start</td><td>可选。规定开始搜索的位置。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strpos(string,find,start)</span><br><span class="line"></span><br><span class="line">mb_strpos(string,find,start,charset)//截取中文 (charset 字符集 如utf-8，gb2312)</span><br></pre></td></tr></table></figure><p>提示:该函数对大小写敏感。如需进行对大小写不敏感的搜索，请使用 stripos() 函数。</p><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo strpos(&quot;Hello world!&quot;,&quot;wo&quot;); //输出：6</span><br></pre></td></tr></table></figure><p><strong>PHP strripos() 函数</strong></p><p>strrpos() 函数查找字符串在另一个字符串中最后一次出现的位置。<br>如果成功，则返回位置，否则返回 false。</p><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strrpos(string,find,start)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定被搜索的字符串。</td></tr><tr><td>find</td><td>必需。规定要查找的字符。</td></tr><tr><td>start</td><td>可选。规定开始搜索的位置。</td></tr><tr><td>提示：该函数对大小写不敏感。如需进行大小写敏感的查找，请使用 strrpos()。</td><td></td></tr></tbody></table><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo strripos(&quot;Hello world!&quot;,&quot;WO&quot;); //输出：6</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> strpos </tag>
            
            <tag> strrpos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JS实现PHP的sprintf函数</title>
      <link href="/js-sprintf/"/>
      <url>/js-sprintf/</url>
      
        <content type="html"><![CDATA[<p><strong>在拼接字符串时，将字符串与变量穿插拼接，看起来很眼花缭乱，如果象PHP中的sprintf函数那个，将需要用变量表示的地方用“%s”来表示，看起来就清楚多了。</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function sprintf()</span><br><span class="line">   &#123;</span><br><span class="line">      var arg = arguments,</span><br><span class="line">         str = arg[0] || &#x27;&#x27;,</span><br><span class="line">         i, n;</span><br><span class="line">      for (i = 1, n = arg.length; i </span><br><span class="line">         str = str.replace(/%s/, arg[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      return str;</span><br><span class="line">   &#125;</span><br><span class="line">   var str = &quot;大家好，我叫%s。今年%s岁了，喜欢%s。呵呵！&quot;,</span><br><span class="line">   var1 = &quot;点点&quot;,</span><br><span class="line">   var2 = &quot;18&quot;,</span><br><span class="line">   var3 = &quot;睡觉&quot;,</span><br><span class="line">   str = sprintf(str, var1, var2, var3);</span><br><span class="line">   alert(str);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sprintf </tag>
            
            <tag> 拼接字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php dirname(__FILE__) 获取当前文件的绝对路径</title>
      <link href="/dirname/"/>
      <url>/dirname/</url>
      
        <content type="html"><![CDATA[<p>dirname(__FILE__) 取到的是当前文件的绝对路径，也就是说，比起相对路径，查找速度是最快的。</p><span id="more"></span><p>比如当前文件是放在(d:\www)下，文件名是testdir.php。</p><p>测试的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo __FILE__ ; // 取得当前文件的绝对地址，结果：D:\www\testdir.php</span><br><span class="line">echo dirname(__FILE__); // 取得当前文件所在的绝对目录，结果：D:\www\</span><br><span class="line">echo dirname(dirname(__FILE__)); //取得当前文件的上一层目录名，结果：D:\</span><br></pre></td></tr></table></figure><p>使用方法提示,<br>dirname(__FILE__) 取到的是当前文件的绝对路径，也就是说，比起相对路径，查找速度是最快的。<br>如果重复一次可以把目录往上提升一个层次:<br>比如：$d &#x3D; dirname(dirname(__FILE__));<br>其实就是把一个目录给dirname()做参数了．因为dirname()返回最后的目录不带\\或者是&#x2F;<br>所以重复使用的时候可以认为　dirname()　把最下层的目录当成文件名来处理了．照常返回<br>当前目录的上级目录.这样重复就得到了它的上一级的目录.</p><p>包含得到上一级目录的文件<br>include(dirname(__FILE__).’&#x2F;..&#x2F;filename.php’);</p><p>__FILE__的路径是当前代码所在文件</p><p>dirname(dirname(__FILE__));得到的是文件上一层目录名</p><p>dirname(__FILE__);得到的是文件所在层目录名</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dirname </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP页面转UTF-8编码问题</title>
      <link href="/strcode/"/>
      <url>/strcode/</url>
      
        <content type="html"><![CDATA[<p><strong>php页面中文乱码，那时因为字符编码问题，一行代码搞定</strong></p><span id="more"></span><p>在代码开始出加入一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(&quot;Content-Type:text/html;charset=utf-8&quot;);</span><br></pre></td></tr></table></figure><p>charset 字符编码 可换成相应的编码</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将一个表的查询结果插入到另一个表中</title>
      <link href="/mysqlinsertinto/"/>
      <url>/mysqlinsertinto/</url>
      
        <content type="html"><![CDATA[<p><strong>如果表存在（要注意两个表中的字段数要一样）：</strong><br>insert into tab1 select * from tab2;<br><strong>如果表不存在：</strong><br>create table tab1 as select * from tab2;</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> insert into </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php判断今天是星期几的方法</title>
      <link href="/getweek/"/>
      <url>/getweek/</url>
      
        <content type="html"><![CDATA[<p>这里主要用到了date 的 w 这个参数，关于这个参数的解释是：<br>w 表示星期中的第几天，数字表示 0（表示星期天）到 6（表示星期六）</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//php获取今天是星期几</span><br><span class="line">function getWeek($unixTime = &#x27;&#x27;) &#123;</span><br><span class="line">    $unixTime = is_numeric($unixTime) ? $unixTime : time();</span><br><span class="line">    $weekarray = array(&#x27;日&#x27;,&#x27;一&#x27;,&#x27;二&#x27;,&#x27;三&#x27;,&#x27;四&#x27;,&#x27;五&#x27;,&#x27;六&#x27;);</span><br><span class="line">    return &#x27;星期&#x27; . $weekarray[date(&#x27;w&#x27;, $unixTime)];</span><br><span class="line">&#125;</span><br><span class="line">echo getWeek();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 星期几 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL字符串函数substring：字符串截取</title>
      <link href="/mysql-substring/"/>
      <url>/mysql-substring/</url>
      
        <content type="html"><![CDATA[<p> <strong>MySQL 字符串截取函数：left(), right(), substring(), substring_index()。还有 mid(), substr()。其中，mid(), substr() 等价于 substring() 函数，substring() 的功能非常强大和灵活。</strong></p><span id="more"></span><p><strong>1. 字符串截取：left(str, length)</strong><br><code>select left(&#39;example.com&#39;, 3);</code><br>+————————-+<br>| left(‘example.com’, 3) |<br>+————————-+<br>| exa |<br>+————————-+</p><p><strong>2. 字符串截取：right(str, length)</strong><br><code> select right(&#39;example.com&#39;, 3);</code><br>+————————–+<br>| right(‘example.com’, 3) |<br>+————————–+<br>| com |<br>+————————–+</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询某个字段后两位字符</span><br><span class="line">select right(last3, 2) as last2 from historydata limit 10;</span><br><span class="line"></span><br><span class="line">-- 从应该字段取后两位字符更新到另外一个字段</span><br><span class="line">update `historydata` set `last2`= right(last3, 2);</span><br></pre></td></tr></table></figure><p><strong>3. 字符串截取：substring(str, pos); substring(str, pos, len)</strong></p><p>3.1 从字符串的第 4 个字符位置开始取，直到结束。<br><code> select substring(&#39;example.com&#39;, 4);</code><br>+——————————+<br>| substring(‘example.com’, 4) |<br>+——————————+<br>| ple.com |<br>+——————————+</p><p>3.2 从字符串的第 4 个字符位置开始取，只取 2 个字符。<br><code>mysql&amp;gt; select substring(&#39;example.com&#39;, 4, 2);</code><br>+———————————+<br>| substring(‘example.com’, 4, 2) |<br>+———————————+<br>| pl |<br>+———————————+</p><p>3.3 从字符串的第 4 个字符位置（倒数）开始取，直到结束。<br><code>mysql&amp;gt; select substring(&#39;example.com&#39;, -4);</code><br>+——————————-+<br>| substring(‘example.com’, -4) |<br>+——————————-+<br>| .com |<br>+——————————-+</p><p>3.4 从字符串的第 4 个字符位置（倒数）开始取，只取 2 个字符。<br><code>select substring(&#39;example.com&#39;, -4, 2);</code><br>+———————————-+<br>| substring(‘example.com’, -4, 2) |<br>+———————————-+<br>| .c |<br>+———————————-+<br>我们注意到在函数 substring(str,pos, len)中， pos 可以是负值，但 len 不能取负值。</p><p><strong>4. 字符串截取：substring_index(str,delim,count)</strong></p><p>4.1 截取第二个 ‘.’ 之前的所有字符。<br><code>select substring_index(&#39;www.example.com&#39;, &#39;.&#39;, 2);</code><br>+————————————————+<br>| substring_index(‘<a href="http://www.example.com/">www.example.com</a>‘, ‘.’, 2) |<br>+————————————————+<br>| www |<br>+————————————————+</p><p>4.2 截取第二个 ‘.’ （倒数）之后的所有字符。<br><code>select substring_index(&#39;www.example.com&#39;, &#39;.&#39;, -2);</code><br>+————————————————-+<br>| substring_index(‘<a href="http://www.example.com/">www.example.com</a>‘, ‘.’, -2) |<br>+————————————————-+<br>| com.cn |<br>+————————————————-+</p><p>4.3 如果在字符串中找不到 delim 参数指定的值，就返回整个字符串<br><code>select substring_index(&#39;www.example.com&#39;, &#39;.coc&#39;, 1);</code><br>+—————————————————+<br>| substring_index(‘<a href="http://www.example.com/">www.example.com</a>‘, ‘.coc’, 1) |<br>+—————————————————+<br>| <a href="http://www.example.com/">www.example.com</a> |<br>+—————————————————+</p><p>来源：转载</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> substring </tag>
            
            <tag> 字符串截取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP sprintf() 函数</title>
      <link href="/sprintf/"/>
      <url>/sprintf/</url>
      
        <content type="html"><![CDATA[<p>sprintf() 函数把格式化的字符串写入变量中。<br>把百分号（%）符号替换成一个作为参数进行传递的变量：</p><span id="more"></span><p>$number &#x3D; 2;<br>$str &#x3D; “Shanghai”;<br>$txt &#x3D; sprintf(“There are %u million cars in %s.”,$number,$str);<br>echo $txt;</p><p>输出：There are 2 million cars in Shanghai.</p><p>&nbsp;</p><p>定义和用法<br>sprintf() 函数把格式化的字符串写入变量中。<br>arg1、arg2、++ 参数将被插入到主字符串中的百分号（%）符号处。该函数是逐步执行的。在第一个 % 符号处，插入 arg1，在第二个 % 符号处，插入 arg2，依此类推。<br>注释：如果 % 符号多于 arg 参数，则您必须使用占位符。占位符位于 % 符号之后，由数字和 “$“ 组成。</p><p>%% - 返回一个百分号 %<br>%b - 二进制数<br>%c - ASCII 值对应的字符<br>%d - 包含正负号的十进制数（负数、0、正数）<br>%e - 使用小写的科学计数法（例如 1.2e+2）<br>%E - 使用大写的科学计数法（例如 1.2E+2）<br>%u - 不包含正负号的十进制数（大于等于 0）<br>%f - 浮点数（本地设置）<br>%F - 浮点数（非本地设置）<br>%g - 较短的 %e 和 %f<br>%G - 较短的 %E 和 %f<br>%o - 八进制数<br>%s - 字符串<br>%x - 十六进制数（小写字母）<br>%X - 十六进制数（大写字母）<br>附加的格式值。必需放置在 % 和字母之间（例如 %.2f）：</p><ul><li>（在数字前面加上 + 或 - 来定义数字的正负性。默认情况下，只有负数才做标记，正数不做标记）<br>‘ （规定使用什么作为填充，默认是空格。它必须与宽度指定器一起使用。例如：%’x20s（使用 “x” 作为填充））</li></ul><ul><li>（左调整变量值）<br>[0-9] （规定变量值的最小宽度）<br>.[0-9] （规定小数位数或最大字符串长度）<br>注释：如果使用多个上述的格式值，它们必须按照以上顺序使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sprintf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 判断是否包含某字符串</title>
      <link href="/hasstr/"/>
      <url>/hasstr/</url>
      
        <content type="html"><![CDATA[<p>PHP判断字符串的包含,可以使用PHP的内置函数 strstr,strpos,stristr直接进行判断.也可以通过explode函数的作用写一个判断函数</p><span id="more"></span><p>**1、strstr 和 stristr的用法 **<br>strstr: 返回一个从被判断字符开始到结束的字符串,如果没有返回值,则不包含. stristr: 它和strstr的使用方法完全一样.唯一的区别是stristr不区分大小写.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$email = &#x27;user@example.com&#x27;;</span><br><span class="line">$domain = strstr($email, &#x27;@&#x27;);</span><br><span class="line">echo $domain; // prints @example.com</span><br></pre></td></tr></table></figure><p><strong>2、 strpos的用法</strong><br>strpos: 返回boolean值.FALSE和TRUE不用多说.用 “&#x3D;&#x3D;&#x3D;”进行判断.strpos在执行速度上都比以上两个函数快,另外strpos有一个参数指定判断的位置,但是默认为空.意思是判断整个字符串.缺点是对中文的支持不好.<br>PHP判断字符串的包含代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str= &#x27;abc&#x27;;</span><br><span class="line">$needle= &#x27;a&#x27;;</span><br><span class="line">$pos = strpos($str, $needle);</span><br></pre></td></tr></table></figure><p><strong>3、explode 的用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function checkstr($str)</span><br><span class="line">&#123;</span><br><span class="line">    $needle = &#x27;a&#x27;;//判断是否包含a这个字符</span><br><span class="line">    $tmparray = explode($needle, $str);</span><br><span class="line">    if (count($tmparray) &gt; 1) &#123;</span><br><span class="line">        return &#x27;ok&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &#x27;no&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、in_array — 检查数组中是否存在某个值例子</strong></p><p>(1). in_array() 例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$os= array(&quot;Mac&quot;, &quot;NT&quot;, &quot;Irix&quot;, &quot;Linux&quot;);</span><br><span class="line">if (in_array(&quot;Irix&quot;, $os)) &#123;echo &quot;Got Irix&quot;;&#125; </span><br><span class="line">if (in_array(&quot;mac&quot;, $os)) &#123;echo&quot;Got mac&quot;;&#125; </span><br></pre></td></tr></table></figure><p>第二个条件失败，因为 in_array() 是区分大小写的，所以以上程序显示为：Got Irix</p><p>(2). in_array() 严格类型检查例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a= array(&#x27;1.10&#x27;, 12.4, 1.13);</span><br><span class="line">if (in_array(&#x27;12.4&#x27;, $a, true)) &#123;echo&quot;&#x27;12.4&#x27; found with strict check\n&quot;;&#125; </span><br><span class="line">if ( in_array(1.13, $a, true)) &#123;echo&quot;1.13 found with strict check\n&quot;;&#125;</span><br></pre></td></tr></table></figure><p>上例将输出：<br>1.13 found with strict check</p><p>(3). in_array() 中用数组作为 needle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a = array(array(&#x27;p&#x27;, &#x27;h&#x27;), array(&#x27;p&#x27;, &#x27;r&#x27;), &#x27;o&#x27;);</span><br><span class="line">if ( in_array(array(&#x27;p&#x27;, &#x27;h&#x27;), $a)) &#123;echo &quot;&#x27;ph&#x27; was found\n&quot;;&#125;</span><br><span class="line">if ( in_array(array(&#x27;f&#x27;, &#x27;i&#x27;), $a)) &#123;echo &quot;&#x27;fi&#x27; was found\n&quot;;&#125;</span><br><span class="line">if ( in_array(&#x27;o&#x27;, $a)) &#123;echo &quot;&#x27;o&#x27; was found\n&quot;;&#125;</span><br></pre></td></tr></table></figure><p>上例将输出：<br>‘ph’ was found<br>‘o’ was found</p><p>array_search — 在数组中搜索给定的值，如果成功则返回相应的键名</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php自动创建目录并保存文件函数</title>
      <link href="/makedir/"/>
      <url>/makedir/</url>
      
        <content type="html"><![CDATA[<p><strong>在做文件上传时有一个非常必须要做的功能就是上传文件会按日期生成目录并把文件保存在目录下了，下面我来为各位介绍一段php自动创建目录并保存文件函数</strong></p><span id="more"></span><p>php保存文件，还可以根据文件路径自动连续创建目录，代码如下（注：PHP要版本5以上）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * 保存文件 </span><br><span class="line"> * @param string $fileName 文件名（含相对路径） </span><br><span class="line"> * @param string $text 文件内容 </span><br><span class="line"> * @return boolean </span><br><span class="line"> */</span><br><span class="line">function saveFile($fileName, $text)</span><br><span class="line">&#123;</span><br><span class="line">    if (!$fileName || !$text) return false;</span><br><span class="line">    if (makeDir(dirname($fileName))) &#123;</span><br><span class="line">        if ($fp = fopen($fileName, &quot;w&quot;)) &#123;</span><br><span class="line">            if (@fwrite($fp, $text)) &#123;</span><br><span class="line">                fclose($fp);</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                fclose($fp);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line"> * 连续创建目录 (此外0777不能加单引号和双引号， 加了以后，&quot;0400&quot; = 600权限，处以为会这样，我也想不通)</span><br><span class="line"> * @param string $dir 目录字符串 </span><br><span class="line"> * @param int $mode 权限数字 </span><br><span class="line"> * @return boolean</span><br><span class="line"> */</span><br><span class="line">function makeDir($dir, $mode = 0755)</span><br><span class="line">&#123; </span><br><span class="line">    if (!dir) return false;</span><br><span class="line">    if (!file_exists($dir)) &#123;</span><br><span class="line">        return mkdir($dir, $mode, true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是测试内容,并调用上面的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$content = &#x27;这里是测试内容&#x27;;</span><br><span class="line">if (saveFile(&#x27;dir/test.txt&#x27;, $content)) &#123;</span><br><span class="line">    echo &#x27;写入成功&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &#x27;写入失败&#x27;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注意：makeDir就是一个目录创建函数，我们使用的是递归创建了．</p><p>来源:转载</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动创建目录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
